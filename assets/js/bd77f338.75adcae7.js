"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[8877],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},51918:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={},i="Internal Details",l={unversionedId:"manual/references/contributing/architecture",id:"manual/references/contributing/architecture",title:"Internal Details",description:"Deno and Linux analogy",source:"@site/runtime/manual/references/contributing/architecture.md",sourceDirName:"manual/references/contributing",slug:"/manual/references/contributing/architecture",permalink:"/runtime/manual/references/contributing/architecture",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Contributing",permalink:"/runtime/manual/references/contributing/"},next:{title:"Building deno from Source",permalink:"/runtime/manual/references/contributing/building_from_source"}},s={},c=[{value:"Deno and Linux analogy",id:"deno-and-linux-analogy",level:2},{value:"Resources",id:"resources",level:3},{value:"Metrics",id:"metrics",level:3},{value:"Conference",id:"conference",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"internal-details"},"Internal Details"),(0,a.kt)("h2",{id:"deno-and-linux-analogy"},"Deno and Linux analogy"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"right"},(0,a.kt)("strong",{parentName:"th"},"Linux")),(0,a.kt)("th",{parentName:"tr",align:"left"},(0,a.kt)("strong",{parentName:"th"},"Deno")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"right"},"Processes"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Web Workers")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"right"},"Syscalls"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Ops")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"right"},"File descriptors (fd)"),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"#resources"},"Resource ids (rid)"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"right"},"Scheduler"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Tokio")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"right"},"Userland: libc++ / glib / boost"),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"https://deno.land/std/"},"https://deno.land/std/"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"right"},"/proc/\\$\\$/stat"),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"#metrics"},"Deno.metrics()"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"right"},"man pages"),(0,a.kt)("td",{parentName:"tr",align:"left"},"deno types")))),(0,a.kt)("h3",{id:"resources"},"Resources"),(0,a.kt)("p",null,"Resources (AKA ",(0,a.kt)("inlineCode",{parentName:"p"},"rid"),") are Deno's version of file descriptors. They are integer\nvalues used to refer to open files, sockets, and other concepts. For testing it\nwould be good to be able to query the system for how many open resources there\nare."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'console.log(Deno.resources());\n// { 0: "stdin", 1: "stdout", 2: "stderr" }\nDeno.close(0);\nconsole.log(Deno.resources());\n// { 1: "stdout", 2: "stderr" }\n')),(0,a.kt)("h3",{id:"metrics"},"Metrics"),(0,a.kt)("p",null,"Metrics is Deno's internal counter for various statistics."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"> console.table(Deno.metrics())\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          (idx)          \u2502  Values   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      opsDispatched      \u2502    9      \u2502\n\u2502    opsDispatchedSync    \u2502    0      \u2502\n\u2502   opsDispatchedAsync    \u2502    0      \u2502\n\u2502 opsDispatchedAsyncUnref \u2502    0      \u2502\n\u2502      opsCompleted       \u2502    9      \u2502\n\u2502    opsCompletedSync     \u2502    0      \u2502\n\u2502    opsCompletedAsync    \u2502    0      \u2502\n\u2502 opsCompletedAsyncUnref  \u2502    0      \u2502\n\u2502    bytesSentControl     \u2502   504     \u2502\n\u2502      bytesSentData      \u2502    0      \u2502\n\u2502      bytesReceived      \u2502   856     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,a.kt)("h2",{id:"conference"},"Conference"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Ryan Dahl. (May 27, 2020).\n",(0,a.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=1b7FoBwxc7E"},"An interesting case with Deno"),".\nDeno Israel."),(0,a.kt)("li",{parentName:"ul"},"Bartek Iwa\u0144czuk. (Oct 6, 2020).\n",(0,a.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=AOvg_GbnsbA&t=35m13s"},"Deno internals - how modern JS/TS runtime is\nbuilt"),". Paris Deno.")))}d.isMDXComponent=!0}}]);