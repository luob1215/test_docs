"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[2889],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?o.createElement(h,l(l({ref:t},c),{},{components:n})):o.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},84377:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var o=n(87462),a=(n(67294),n(3905));const r={},l="Connect to Postgres",i={unversionedId:"manual/postgres",id:"manual/postgres",title:"Connect to Postgres",description:"This tutorial covers how to connect to a Postgres database from an application",source:"@site/deploy/manual/postgres.md",sourceDirName:"manual",slug:"/manual/postgres",permalink:"/deploy/manual/postgres",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"deployGuideHome",previous:{title:"Connect to Firebase",permalink:"/deploy/manual/firebase"},next:{title:"About Subhosting",permalink:"/deploy/manual/subhosting/"}},s={},p=[{value:"Setup Postgres",id:"setup-postgres",level:2},{value:"Gather credentials from Postgres",id:"gather-credentials-from-postgres",level:2},{value:"Supabase",id:"supabase",level:3},{value:"psql",id:"psql",level:3},{value:"Create a project in Deno Deploy",id:"create-a-project-in-deno-deploy",level:2},{value:"Write code that connects to Postgres",id:"write-code-that-connects-to-postgres",level:2},{value:"Deploy application to Deno Deploy",id:"deploy-application-to-deno-deploy",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,o.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"connect-to-postgres"},"Connect to Postgres"),(0,a.kt)("p",null,"This tutorial covers how to connect to a Postgres database from an application\ndeployed on Deno Deploy."),(0,a.kt)("p",null,"You can find a more comprehensive tutorial that builds a sample application on\ntop of Postgres ",(0,a.kt)("a",{parentName:"p",href:"../tutorials/tutorial-postgres"},"here"),"."),(0,a.kt)("h2",{id:"setup-postgres"},"Setup Postgres"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This tutorial will focus entirely on connecting to Postgres unencrypted. If\nyou would like to use encryption with a custom CA certificate, use the\ndocumentation ",(0,a.kt)("a",{parentName:"p",href:"https://deno-postgres.com/#/?id=ssltls-connection"},"here"),".")),(0,a.kt)("p",null,"To get started, we need to create a new Postgres instance for us to connect to.\nFor this tutorial, we will be using ",(0,a.kt)("a",{parentName:"p",href:"https://supabase.com"},"Supabase")," as they\nprovide free, managed Postgres instances. If you like to host your database\nsomewhere else, you can do that too."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Visit ",(0,a.kt)("a",{parentName:"li",href:"https://app.supabase.io/"},"https://app.supabase.io/")," and click ",(0,a.kt)("strong",{parentName:"li"},"New project"),"."),(0,a.kt)("li",{parentName:"ol"},"Select a name, password, and region for your database. Make sure to save the\npassword, as you will need it later."),(0,a.kt)("li",{parentName:"ol"},"Click ",(0,a.kt)("strong",{parentName:"li"},"Create new project"),". Creating the project can take a while, so be\npatient.")),(0,a.kt)("h2",{id:"gather-credentials-from-postgres"},"Gather credentials from Postgres"),(0,a.kt)("p",null,"Once you've set up your Postgres database, gather your connection information\nfrom your Postgres instance."),(0,a.kt)("h3",{id:"supabase"},"Supabase"),(0,a.kt)("p",null,"For the Supabase instance above, to get your connection information:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Navigate to the ",(0,a.kt)("strong",{parentName:"li"},"Database")," tab on the left."),(0,a.kt)("li",{parentName:"ol"},"Go to the ",(0,a.kt)("strong",{parentName:"li"},"Project Settings")," >> ",(0,a.kt)("strong",{parentName:"li"},"Database")," and copy the connection string\nfrom the ",(0,a.kt)("strong",{parentName:"li"},"Connection String")," >> ",(0,a.kt)("strong",{parentName:"li"},"URI")," field. This is the connection\nstring you will use to connect to your database. Insert the password you\nsaved earlier into this string, and then save the string somewhere - you will\nneed it later.")),(0,a.kt)("h3",{id:"psql"},"psql"),(0,a.kt)("p",null,"If you are using psql, you should generally be able to find your connection\ninformation by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-psql"},"test=# \\conninfo\n")),(0,a.kt)("p",null,"Your Postgres connection string will take the form:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"postgres://user:password@127.0.0.1:5432/deploy?sslmode=disable\n")),(0,a.kt)("h2",{id:"create-a-project-in-deno-deploy"},"Create a project in Deno Deploy"),(0,a.kt)("p",null,"Next, let's create a project in Deno Deploy and set it up with the requisite\nenvironment variables:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Go to ",(0,a.kt)("a",{parentName:"li",href:"https://dash.deno.com/new"},"https://dash.deno.com/new")," (Sign in with\nGitHub if you didn't already) and click on ",(0,a.kt)("strong",{parentName:"li"},"+ Empty Project")," under ",(0,a.kt)("strong",{parentName:"li"},"Deploy\nfrom the command line"),"."),(0,a.kt)("li",{parentName:"ol"},"Now click on the ",(0,a.kt)("strong",{parentName:"li"},"Settings")," button available on the project page."),(0,a.kt)("li",{parentName:"ol"},"Navigate to ",(0,a.kt)("strong",{parentName:"li"},"Environment Variables")," Section and add the following secrets.")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DATABASE_URL")," - The value should be your connection string that you retrieved\nin the last step.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"postgres_env_variable",src:n(7150).Z,width:"715",height:"557"})),(0,a.kt)("h2",{id:"write-code-that-connects-to-postgres"},"Write code that connects to Postgres"),(0,a.kt)("p",null,"To read/write to Postgres, import the Postgres module, read the connection\nstring from the environment variables, and create a connection pool."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Pool } from "https://deno.land/x/postgres@v0.17.0/mod.ts";\n\n// Get the connection string from the environment variable "DATABASE_URL"\nconst databaseUrl = Deno.env.get("DATABASE_URL")!;\n\n// Create a database pool with three connections that are lazily established\nconst pool = new Pool(databaseUrl, 3, true);\n\n// Connect to the database\nconst connection = await pool.connect();\n\ntry {\n  // Create the table\n  await connection.queryObject`\n    CREATE TABLE IF NOT EXISTS todos (\n      id SERIAL PRIMARY KEY,\n      title TEXT NOT NULL\n    )\n  `;\n} finally {\n  // Release the connection back into the pool\n  connection.release();\n}\n')),(0,a.kt)("h2",{id:"deploy-application-to-deno-deploy"},"Deploy application to Deno Deploy"),(0,a.kt)("p",null,"Once you have finished writing your application, you can deploy it on Deno\nDeploy."),(0,a.kt)("p",null,"To do this, go back to your project page at\n",(0,a.kt)("inlineCode",{parentName:"p"},"https://dash.deno.com/projects/<project-name>"),"."),(0,a.kt)("p",null,"You should see a couple of options to deploy:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"ci_github"},"Github integration")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"deployctl"},(0,a.kt)("inlineCode",{parentName:"a"},"deployctl")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"deployctl deploy --project=<project-name> <application-file-name>\n")))),(0,a.kt)("p",null,"Unless you want to add a build step, we recommend that you select the Github\nintegration."),(0,a.kt)("p",null,"For more details on the different ways to deploy on Deno Deploy and the\ndifferent configuration options, read ",(0,a.kt)("a",{parentName:"p",href:"how-to-deploy"},"here"),"."))}d.isMDXComponent=!0},7150:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/postgres_env_variable-de2a82ddef8916007a7bb18f7774221d.png"}}]);