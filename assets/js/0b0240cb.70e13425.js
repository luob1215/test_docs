"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[4263],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=a.createContext({}),l=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(u.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=l(t),m=o,h=c["".concat(u,".").concat(m)]||c[m]||d[m]||i;return t?a.createElement(h,s(s({ref:n},p),{},{components:t})):a.createElement(h,s({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=m;var r={};for(var u in n)hasOwnProperty.call(n,u)&&(r[u]=n[u]);r.originalType=e,r[c]="string"==typeof e?e:o,s[1]=r;for(var l=2;l<i;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},20647:(e,n,t)=>{t.d(n,{ZP:()=>r});var a=t(87462),o=(t(67294),t(3905));const i={toc:[]},s="wrapper";function r(e){let{components:n,...t}=e;return(0,o.kt)(s,(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"Deno KV is currently in beta",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Deno KV and related cloud primitive APIs like queues and cron are currently\n",(0,o.kt)("strong",{parentName:"p"},"experimental")," and ",(0,o.kt)("strong",{parentName:"p"},"subject to change"),". While we do our best to ensure data\ndurability, data loss is possible, especially around Deno updates."),(0,o.kt)("p",{parentName:"admonition"},"Deno programs that use KV require the ",(0,o.kt)("inlineCode",{parentName:"p"},"--unstable")," flag when launching the\nprogram, as shown below:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"deno run -A --unstable my_kv_code.ts\n"))))}r.isMDXComponent=!0},78897:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var a=t(87462),o=(t(67294),t(3905)),i=t(20647);const s={},r="Using Queues",u={unversionedId:"manual/queue_overview",id:"manual/queue_overview",title:"Using Queues",description:"The Deno runtime includes a queueing API that supports offloading larger",source:"@site/kv/manual/queue_overview.md",sourceDirName:"manual",slug:"/manual/queue_overview",permalink:"/kv/manual/queue_overview",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"kvGuideHome",previous:{title:"Transactions",permalink:"/kv/manual/transactions"},next:{title:"Scheduling cron tasks",permalink:"/kv/manual/cron"}},l={},p=[{value:"Enqueue a message",id:"enqueue-a-message",level:2},{value:"Listening for messages",id:"listening-for-messages",level:2},{value:"Queue API with KV atomic transactions",id:"queue-api-with-kv-atomic-transactions",level:2},{value:"Queue behavior",id:"queue-behavior",level:2},{value:"Message delivery guarantees",id:"message-delivery-guarantees",level:3},{value:"Automatic retries",id:"automatic-retries",level:3},{value:"Message delivery order",id:"message-delivery-order",level:3},{value:"Queues on Deno Deploy",id:"queues-on-deno-deploy",level:2},{value:"Just-in-time isolate spin-up",id:"just-in-time-isolate-spin-up",level:3},{value:"Queue size limit",id:"queue-size-limit",level:3},{value:"Pricing details and limits",id:"pricing-details-and-limits",level:3},{value:"Use cases",id:"use-cases",level:2},{value:"Offloading async processes",id:"offloading-async-processes",level:3},{value:"Scheduling work for the future",id:"scheduling-work-for-the-future",level:3}],c={toc:p},d="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"using-queues"},"Using Queues"),(0,o.kt)(i.ZP,{mdxType:"Admonition"}),(0,o.kt)("p",null,"The Deno runtime includes a queueing API that supports offloading larger\nworkloads for async processing, with guaranteed at-least-once delivery of queued\nmessages. Queues can be used to offload tasks in a web application, or to\nschedule units of work for a time in the future."),(0,o.kt)("p",null,"The primary APIs you'll use with queues are in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Deno.Kv")," namespace as\n",(0,o.kt)("a",{parentName:"p",href:"https://deno.land/api?unstable=true&s=Deno.Kv&p=prototype.enqueue"},(0,o.kt)("inlineCode",{parentName:"a"},"enqueue")),"\nand\n",(0,o.kt)("a",{parentName:"p",href:"https://deno.land/api?unstable=true&s=Deno.Kv&p=prototype.listenQueue"},(0,o.kt)("inlineCode",{parentName:"a"},"listenQueue")),"."),(0,o.kt)("h2",{id:"enqueue-a-message"},"Enqueue a message"),(0,o.kt)("p",null,"To enqueue a message for processing, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"enqueue")," method on an instance of\n",(0,o.kt)("a",{parentName:"p",href:"https://deno.land/api?unstable=true&s=Deno.Kv"},(0,o.kt)("inlineCode",{parentName:"a"},"Deno.Kv")),". In the example\nbelow, we show what it might look like to enqueue a notification for delivery."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="queue_example.ts"',title:'"queue_example.ts"'},'// Describe the shape of your message object (optional)\ninterface Notification {\n  forUser: string;\n  body: string;\n}\n\n// Get a reference to a KV instance\nconst kv = await Deno.openKv();\n\n// Create a notification object\nconst message: Notification = {\n  forUser: "alovelace",\n  body: "You\'ve got mail!",\n};\n\n// Enqueue the message for immediate delivery\nawait kv.enqueue(message);\n')),(0,o.kt)("p",null,"You can enqueue a message for later delivery by specifying a ",(0,o.kt)("inlineCode",{parentName:"p"},"delay")," option in\nmilliseconds."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Enqueue the message for delivery in 3 days\nconst delay = 1000 * 60 * 60 * 24 * 3;\nawait kv.enqueue(message, { delay });\n")),(0,o.kt)("p",null,"You can also specify a key in Deno KV where your message value will be stored if\nyour message isn't delivered for any reason."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// Configure a key where a failed message would be sent\nconst backupKey = ["failed_notifications", "alovelace", Date.now()];\nawait kv.enqueue(message, { keysIfUndelivered: [backupKey] });\n\n// ... disaster strikes ...\n\n// Get the unsent message\nconst r = await kv.get<Notification>(backupKey);\n// This is the message that didn\'t get sent:\nconsole.log("Found failed notification for:", r.value?.forUser);\n')),(0,o.kt)("h2",{id:"listening-for-messages"},"Listening for messages"),(0,o.kt)("p",null,"You can configure a JavaScript function that will process items added to your\nqueue with the ",(0,o.kt)("inlineCode",{parentName:"p"},"listenQueue")," method on an instance of\n",(0,o.kt)("a",{parentName:"p",href:"https://deno.land/api?unstable=true&s=Deno.Kv"},(0,o.kt)("inlineCode",{parentName:"a"},"Deno.Kv")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="listen_example.ts"',title:'"listen_example.ts"'},'// Define the shape of the object we expect as a message in the queue\ninterface Notification {\n  forUser: string;\n  body: string;\n}\n\n// Create a type guard to check the type of the incoming message\nfunction isNotification(o: unknown): o is Notification {\n  return (\n    ((o as Notification)?.forUser !== undefined &&\n      typeof (o as Notification).forUser === "string") &&\n    ((o as Notification)?.body !== undefined &&\n      typeof (o as Notification).body === "string")\n  );\n}\n\n// Get a reference to a KV database\nconst kv = await Deno.openKv();\n\n// Register a handler function to listen for values - this example shows\n// how you might send a notification\nkv.listenQueue((msg: unknown) => {\n  // Use type guard - then TypeScript compiler knows msg is a Notification\n  if (isNotification(msg)) {\n    console.log("Sending notification to user:", msg.forUser);\n    // ... do something to actually send the notification!\n  } else {\n    // If the message is of an unknown type, it might be an error\n    console.error("Unknown message received:", msg);\n  }\n});\n')),(0,o.kt)("h2",{id:"queue-api-with-kv-atomic-transactions"},"Queue API with KV atomic transactions"),(0,o.kt)("p",null,"You can combine the queue API with ",(0,o.kt)("a",{parentName:"p",href:"/kv/manual/transactions"},"KV atomic transactions"),"\nto atomically enqueue messages and modify keys in the same transaction."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="kv_transaction_example.ts"',title:'"kv_transaction_example.ts"'},'const kv = await Deno.openKv();\n\nkv.listenQueue(async (msg: unknown) => {\n  const nonce = await kv.get(["nonces", msg.nonce]);\n  if (nonce.value === null) {\n    // This messaged was already processed\n    return;\n  }\n\n  const change = msg.change;\n  const bob = await kv.get(["balance", "bob"]);\n  const liz = await kv.get(["balance", "liz"]);\n\n  const success = await kv.atomic()\n    // Ensure this message was not yet processed\n    .check({ key: nonce.key, versionstamp: nonce.versionstamp })\n    .delete(nonce.key)\n    .sum(["processed_count"], 1n)\n    .check(bob, liz) // balances did not change\n    .set(["balance", "bob"], bob.value - change)\n    .set(["balance", "liz"], liz.value + change)\n    .commit();\n});\n\n// Modify keys and enqueue messages in the same KV transaction!\nconst nonce = crypto.randomUUID();\nawait kv\n  .atomic()\n  .check({ key: ["nonces", nonce], versionstamp: null })\n  .enqueue({ nonce: nonce, change: 10 })\n  .set(["nonces", nonce], true)\n  .sum(["enqueued_count"], 1n)\n  .commit();\n')),(0,o.kt)("h2",{id:"queue-behavior"},"Queue behavior"),(0,o.kt)("h3",{id:"message-delivery-guarantees"},"Message delivery guarantees"),(0,o.kt)("p",null,"The runtime guarantees at-least-once delivery. This means that for majority of\nenqueued messages, the\n",(0,o.kt)("a",{parentName:"p",href:"https://deno.land/api?unstable=true&s=Deno.Kv&p=prototype.listenQueue"},(0,o.kt)("inlineCode",{parentName:"a"},"listenQueue")),"\nhandler will be invoked once for each message. In some failure scenarios, the\nhandler may be invoked multiple times for the same message to ensure delivery.\nIt's important to design your applications such that duplicate messages are\nhandled correctly."),(0,o.kt)("p",null,"You may use queues in combination with\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.deno.com/kv/manual/transactions"},"KV atomic transactions"),"\nprimitives to ensure that your queue handler KV updates are performed exactly\nonce per message. See\n",(0,o.kt)("a",{parentName:"p",href:"#queue-api-with-kv-atomic-transactions"},"Queue API with KV atomic transactions"),"."),(0,o.kt)("h3",{id:"automatic-retries"},"Automatic retries"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://deno.land/api?unstable=true&s=Deno.Kv&p=prototype.listenQueue"},(0,o.kt)("inlineCode",{parentName:"a"},"listenQueue")),"\nhandler is invoked to process your queued messages when they're ready for\ndelivery. If your handler throws an exception the runtime will automatically\nretry to call the handler again until it succeeds or until maximum retry\nattempts are reached. The message is considered to be succesfully processed once\nthe\n",(0,o.kt)("a",{parentName:"p",href:"https://deno.land/api?unstable=true&s=Deno.Kv&p=prototype.listenQueue"},(0,o.kt)("inlineCode",{parentName:"a"},"listenQueue")),"\nhandler invocation completes succesfully. The message will be dropped if the\nhandler consistently fails on retries."),(0,o.kt)("h3",{id:"message-delivery-order"},"Message delivery order"),(0,o.kt)("p",null,"The runtime makes best effort to deliver messages in the order they were\nenqueued. However, there is not strict order guarantee. Occasionally, messages\nmay be delivered out of order to ensure maximum throughput."),(0,o.kt)("h2",{id:"queues-on-deno-deploy"},"Queues on Deno Deploy"),(0,o.kt)("p",null,"Deno Deploy offers global, serverless, distributed implementation of the\nqueueing API, designed for high availability and throughput. You can use it to\nbuild applications that scale to handle large workloads."),(0,o.kt)("h3",{id:"just-in-time-isolate-spin-up"},"Just-in-time isolate spin-up"),(0,o.kt)("p",null,"When using queues with Deno Deploy, isolates are automatically spun up on demand\nto invoke your\n",(0,o.kt)("a",{parentName:"p",href:"https://deno.land/api?unstable=true&s=Deno.Kv&p=prototype.listenQueue"},(0,o.kt)("inlineCode",{parentName:"a"},"listenQueue")),"\nhandler when a message becomes available for processing. Defining\n",(0,o.kt)("a",{parentName:"p",href:"https://deno.land/api?unstable=true&s=Deno.Kv&p=prototype.listenQueue"},(0,o.kt)("inlineCode",{parentName:"a"},"listenQueue")),"\nhandler is the only requirement to enable queue processing in your Deno Deploy\napplication, no additional configuration is needed."),(0,o.kt)("h3",{id:"queue-size-limit"},"Queue size limit"),(0,o.kt)("p",null,"The maximum number of undelivered queue messages is limited to 100,000.\n",(0,o.kt)("a",{parentName:"p",href:"https://deno.land/api?unstable=true&s=Deno.Kv&p=prototype.enqueue"},(0,o.kt)("inlineCode",{parentName:"a"},"enqueue")),"\nmethod will fail with an error if the queue is full."),(0,o.kt)("h3",{id:"pricing-details-and-limits"},"Pricing details and limits"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://deno.land/api?unstable=true&s=Deno.Kv&p=prototype.enqueue"},(0,o.kt)("inlineCode",{parentName:"a"},"enqueue")),"\nis treated just like other\n",(0,o.kt)("a",{parentName:"li",href:"https://deno.land/api?unstable=true&s=Deno.Kv"},(0,o.kt)("inlineCode",{parentName:"a"},"Deno.Kv"))," write operations.\nEnqueued messages consume KV storage and write units."),(0,o.kt)("li",{parentName:"ul"},"Messages delivered through\n",(0,o.kt)("a",{parentName:"li",href:"https://deno.land/api?unstable=true&s=Deno.Kv&p=prototype.listenQueue"},(0,o.kt)("inlineCode",{parentName:"a"},"listenQueue")),"\nconsume requests and KV write units."),(0,o.kt)("li",{parentName:"ul"},"See ",(0,o.kt)("a",{parentName:"li",href:"https://deno.com/deploy/pricing"},"Pricing details")," for more information.")),(0,o.kt)("h2",{id:"use-cases"},"Use cases"),(0,o.kt)("p",null,"Queues can be useful in many different scenarios, but there are a few use cases\nyou might see a lot when building web applications."),(0,o.kt)("h3",{id:"offloading-async-processes"},"Offloading async processes"),(0,o.kt)("p",null,"Sometimes a task that's initiated by a client (like sending a notification or\nAPI request), may take long enough where you don't want to make clients wait for\nthat task to be completed before returning a response. Other times, clients\ndon't actually need a response at all, such as when a client is sending your\napplication a ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Webhook"},"webhook request"),", so\nthere's no need to wait for the underlying task to be completed before returning\na response."),(0,o.kt)("p",null,"In these cases, you can offload work to a queue to keep your web application\nresponsive and send immediate feedback to clients. To see an example of this use\ncase in action, check out our\n",(0,o.kt)("a",{parentName:"p",href:"/kv/tutorials/webhook_processor"},"webhook processing example"),"."),(0,o.kt)("h3",{id:"scheduling-work-for-the-future"},"Scheduling work for the future"),(0,o.kt)("p",null,"Another helpful application of queues (and queue APIs like this one), is to\nschedule work to happen at an appropriate time in the future. Maybe you'd like\nto send a notification to a new customer a day after they have placed an order\nto send them a satisfaction survey. You can schedule a queue message to be\ndelivered 24 hours into the future, and set up a listener to send out the\nnotification at that time."),(0,o.kt)("p",null,"To see an example of scheduling a notification to go out in the future, check\nout our ",(0,o.kt)("a",{parentName:"p",href:"/kv/tutorials/schedule_notification"},"notification example"),"."))}m.isMDXComponent=!0}}]);