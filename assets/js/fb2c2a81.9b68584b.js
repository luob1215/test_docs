"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[9726],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,y=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return n?o.createElement(y,i(i({ref:t},c),{},{components:n})):o.createElement(y,i({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[d]="string"==typeof e?e:a,i[1]=p;for(var s=2;s<r;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},67044:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var o=n(87462),a=(n(67294),n(3905));const r={},i="How to Deploy Deno on Kinsta",p={unversionedId:"manual/advanced/deploying_deno/kinsta",id:"manual/advanced/deploying_deno/kinsta",title:"How to Deploy Deno on Kinsta",description:"Kinsta Application Hosting is a",source:"@site/runtime/manual/advanced/deploying_deno/kinsta.md",sourceDirName:"manual/advanced/deploying_deno",slug:"/manual/advanced/deploying_deno/kinsta",permalink:"/runtime/manual/advanced/deploying_deno/kinsta",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"How to Deploy to Google Cloud Run",permalink:"/runtime/manual/advanced/deploying_deno/google_cloud_run"},next:{title:"Continuous Integration",permalink:"/runtime/manual/advanced/continuous_integration"}},l={},s=[{value:"Preparing your application",id:"preparing-your-application",level:2},{value:"Example application",id:"example-application",level:2},{value:"Deployment",id:"deployment",level:2}],c={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-deploy-deno-on-kinsta"},"How to Deploy Deno on Kinsta"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://kinsta.com/application-hosting"},"Kinsta Application Hosting")," is a\nservice that lets you build and deploy your web apps directly from your Git\nrepository."),(0,a.kt)("h2",{id:"preparing-your-application"},"Preparing your application"),(0,a.kt)("p",null,"At ",(0,a.kt)("strong",{parentName:"p"},"Kinsta"),", we recommend using the\n",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/deno-bin"},(0,a.kt)("inlineCode",{parentName:"a"},"deno-bin"))," package to run Deno\napplications."),(0,a.kt)("p",null,"To do so, your ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," should look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "deno app",\n  "scripts": {\n    "start": "deno run --allow-net index.js --port=${PORT}"\n  },\n  "devDependencies": {\n    "deno-bin": "^1.28.2"\n  }\n}\n')),(0,a.kt)("h2",{id:"example-application"},"Example application"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { serve } from "https://deno.land/std@0.208.0/http/server.ts";\nimport { parse } from "https://deno.land/std@0.208.0/flags/mod.ts";\n\nconst { args } = Deno;\nconst argPort = parse(args).port ? Number(parse(args).port) : 8000;\n\nserve((_req) => new Response("Hello, world"), { port: argPort });\n')),(0,a.kt)("p",null,"The application itself is self-explanatory. It's crucial not to hardcode the\n",(0,a.kt)("inlineCode",{parentName:"p"},"PORT")," but use the environmental variable ",(0,a.kt)("strong",{parentName:"p"},"Kinsta")," provides."),(0,a.kt)("p",null,"There is also a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kinsta/hello-world-deno"},"repository")," that\nshould help you to get started."),(0,a.kt)("h2",{id:"deployment"},"Deployment"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Register on\n",(0,a.kt)("a",{parentName:"li",href:"https://kinsta.com/signup/?product_type=app-db"},"Kinsta Application Hosting"),"\nor login directly to ",(0,a.kt)("a",{parentName:"li",href:"https://my.kinsta.com/"},"My Kinsta")," admin panel."),(0,a.kt)("li",{parentName:"ol"},"Go to the Applications tab."),(0,a.kt)("li",{parentName:"ol"},"Connect your GitHub repository."),(0,a.kt)("li",{parentName:"ol"},"Press the ",(0,a.kt)("strong",{parentName:"li"},"Add service > Application button"),"."),(0,a.kt)("li",{parentName:"ol"},"Follow the wizard steps.")))}u.isMDXComponent=!0}}]);