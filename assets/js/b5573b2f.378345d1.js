"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[8317],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var s=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},i=Object.keys(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=s.createContext({}),p=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return s.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return n?s.createElement(f,o(o({ref:t},u),{},{components:n})):s.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[d]="string"==typeof e?e:a,o[1]=r;for(var p=2;p<i;p++)o[p]=n[p];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},69072:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var s=n(87462),a=(n(67294),n(3905));const i={sidebar_position:2},o="Testing in Deno",r={unversionedId:"manual/basics/testing/index",id:"manual/basics/testing/index",title:"Testing in Deno",description:"Deno has a built-in test runner that you can use for testing JavaScript or",source:"@site/runtime/manual/basics/testing/index.md",sourceDirName:"manual/basics/testing",slug:"/manual/basics/testing/",permalink:"/runtime/manual/basics/testing/",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"runtimeGuideHome",previous:{title:"Vendoring Dependencies",permalink:"/runtime/manual/tools/vendor"},next:{title:"Assertions",permalink:"/runtime/manual/basics/testing/assertions"}},l={},p=[{value:"Quickstart",id:"quickstart",level:2},{value:"Writing tests",id:"writing-tests",level:2},{value:"Async functions",id:"async-functions",level:3},{value:"Test steps",id:"test-steps",level:3},{value:"Nested test steps",id:"nested-test-steps",level:4},{value:"Running tests",id:"running-tests",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Command line filtering",id:"command-line-filtering",level:3},{value:"Including and excluding paths in the configuration file",id:"including-and-excluding-paths-in-the-configuration-file",level:3},{value:"Test definition filtering",id:"test-definition-filtering",level:3},{value:"Filtering out (Ignoring these tests)",id:"filtering-out-ignoring-these-tests",level:4},{value:"Filtering in (Only run these tests)",id:"filtering-in-only-run-these-tests",level:4},{value:"Failing fast",id:"failing-fast",level:2},{value:"Reporters",id:"reporters",level:2},{value:"Integration with testing libraries",id:"integration-with-testing-libraries",level:2},{value:"Example: spying on a function with Sinon",id:"example-spying-on-a-function-with-sinon",level:3}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"testing-in-deno"},"Testing in Deno"),(0,a.kt)("p",null,"Deno has a built-in test runner that you can use for testing JavaScript or\nTypeScript code."),(0,a.kt)("h2",{id:"quickstart"},"Quickstart"),(0,a.kt)("p",null,"Firstly, let's create a file ",(0,a.kt)("inlineCode",{parentName:"p"},"url_test.ts")," and register a test case using\n",(0,a.kt)("inlineCode",{parentName:"p"},"Deno.test()")," function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// url_test.ts\nimport { assertEquals } from "https://deno.land/std@0.208.0/assert/mod.ts";\n\nDeno.test("url test", () => {\n  const url = new URL("./foo.js", "https://deno.land/");\n  assertEquals(url.href, "https://deno.land/foo.js");\n});\n')),(0,a.kt)("p",null,"Secondly, run the test using ",(0,a.kt)("inlineCode",{parentName:"p"},"deno test")," subcommand."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ deno test url_test.ts\nrunning 1 test from file:///dev/url_test.js\ntest url test ... ok (2ms)\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out (9ms)\n")),(0,a.kt)("h2",{id:"writing-tests"},"Writing tests"),(0,a.kt)("p",null,"To define a test you need to register it with a call to ",(0,a.kt)("inlineCode",{parentName:"p"},"Deno.test")," API. There\nare multiple overloads of this API to allow for greatest flexibility and easy\nswitching between the forms (eg. when you need to quickly focus a single test\nfor debugging, using ",(0,a.kt)("inlineCode",{parentName:"p"},"only: true")," option):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { assertEquals } from "https://deno.land/std@0.208.0/assert/mod.ts";\n\n// Compact form: name and function\nDeno.test("hello world #1", () => {\n  const x = 1 + 2;\n  assertEquals(x, 3);\n});\n\n// Compact form: named function.\nDeno.test(function helloWorld3() {\n  const x = 1 + 2;\n  assertEquals(x, 3);\n});\n\n// Longer form: test definition.\nDeno.test({\n  name: "hello world #2",\n  fn: () => {\n    const x = 1 + 2;\n    assertEquals(x, 3);\n  },\n});\n\n// Similar to compact form, with additional configuration as a second argument.\nDeno.test("hello world #4", { permissions: { read: true } }, () => {\n  const x = 1 + 2;\n  assertEquals(x, 3);\n});\n\n// Similar to longer form, with test function as a second argument.\nDeno.test(\n  { name: "hello world #5", permissions: { read: true } },\n  () => {\n    const x = 1 + 2;\n    assertEquals(x, 3);\n  },\n);\n\n// Similar to longer form, with a named test function as a second argument.\nDeno.test({ permissions: { read: true } }, function helloWorld6() {\n  const x = 1 + 2;\n  assertEquals(x, 3);\n});\n')),(0,a.kt)("h3",{id:"async-functions"},"Async functions"),(0,a.kt)("p",null,"You can also test asynchronous code by passing a test function that returns a\npromise. For this you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"async")," keyword when defining a function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { delay } from "https://deno.land/std@0.208.0/async/delay.ts";\n\nDeno.test("async hello world", async () => {\n  const x = 1 + 2;\n\n  // await some async task\n  await delay(100);\n\n  if (x !== 3) {\n    throw Error("x should be equal to 3");\n  }\n});\n')),(0,a.kt)("h3",{id:"test-steps"},"Test steps"),(0,a.kt)("p",null,"The test steps API provides a way to report distinct steps within a test and do\nsetup and teardown code within that test."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { assertEquals } from "https://deno.land/std@0.208.0/assert/mod.ts";\nimport { Client } from "https://deno.land/x/postgres@v0.15.0/mod.ts";\n\ninterface User {\n  id: number;\n  name: string;\n}\n\ninterface Book {\n  id: number;\n  title: string;\n}\n\nDeno.test("database", async (t) => {\n  const client = new Client({\n    user: "user",\n    database: "test",\n    hostname: "localhost",\n    port: 5432,\n  });\n  await client.connect();\n\n  // provide a step name and function\n  await t.step("insert user", async () => {\n    const users = await client.queryObject<User>(\n      "INSERT INTO users (name) VALUES (\'Deno\') RETURNING *",\n    );\n    assertEquals(users.rows.length, 1);\n    assertEquals(users.rows[0].name, "Deno");\n  });\n\n  // or provide a test definition\n  await t.step({\n    name: "insert book",\n    fn: async () => {\n      const books = await client.queryObject<Book>(\n        "INSERT INTO books (name) VALUES (\'The Deno Manual\') RETURNING *",\n      );\n      assertEquals(books.rows.length, 1);\n      assertEquals(books.rows[0].title, "The Deno Manual");\n    },\n    ignore: false,\n    // these default to the parent test or step\'s value\n    sanitizeOps: true,\n    sanitizeResources: true,\n    sanitizeExit: true,\n  });\n\n  // nested steps are also supported\n  await t.step("update and delete", async (t) => {\n    await t.step("update", () => {\n      // even though this test throws, the outer promise does not reject\n      // and the next test step will run\n      throw new Error("Fail.");\n    });\n\n    await t.step("delete", () => {\n      // ...etc...\n    });\n  });\n\n  // steps return a value saying if they ran or not\n  const testRan = await t.step({\n    name: "copy books",\n    fn: () => {\n      // ...etc...\n    },\n    ignore: true, // was ignored, so will return `false`\n  });\n\n  // steps can be run concurrently if sanitizers are disabled on sibling steps\n  const testCases = [1, 2, 3];\n  await Promise.all(testCases.map((testCase) =>\n    t.step({\n      name: `case ${testCase}`,\n      fn: async () => {\n        // ...etc...\n      },\n      sanitizeOps: false,\n      sanitizeResources: false,\n      sanitizeExit: false,\n    })\n  ));\n\n  client.end();\n});\n')),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"test database ...\n  test insert user ... ok (2ms)\n  test insert book ... ok (14ms)\n  test update and delete ...\n    test update ... FAILED (17ms)\n      Error: Fail.\n          at <stack trace omitted>\n    test delete ... ok (19ms)\n  FAILED (46ms)\n  test copy books ... ignored (0ms)\n  test case 1 ... ok (14ms)\n  test case 2 ... ok (14ms)\n  test case 3 ... ok (14ms)\nFAILED (111ms)\n")),(0,a.kt)("p",null,"Notes:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Test steps ",(0,a.kt)("strong",{parentName:"li"},"must be awaited")," before the parent test/step function resolves\nor you will get a runtime error."),(0,a.kt)("li",{parentName:"ol"},"Test steps cannot be run concurrently unless sanitizers on a sibling step or\nparent test are disabled."),(0,a.kt)("li",{parentName:"ol"},"If nesting steps, ensure you specify a parameter for the parent step.",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'Deno.test("my test", async (t) => {\n  await t.step("step", async (t) => {\n    // note the `t` used here is for the parent step and not the outer `Deno.test`\n    await t.step("sub-step", () => {\n    });\n  });\n});\n')))),(0,a.kt)("h4",{id:"nested-test-steps"},"Nested test steps"),(0,a.kt)("h2",{id:"running-tests"},"Running tests"),(0,a.kt)("p",null,"To run the test, call ",(0,a.kt)("inlineCode",{parentName:"p"},"deno test")," with the file that contains your test\nfunction. You can also omit the file name, in which case all tests in the\ncurrent directory (recursively) that match the glob\n",(0,a.kt)("inlineCode",{parentName:"p"},"{*_,*.,}test.{ts, tsx, mts, js, mjs, jsx}")," will be run. If you pass a\ndirectory, all files in the directory that match this glob will be run."),(0,a.kt)("p",null,"The glob expands to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"files named ",(0,a.kt)("inlineCode",{parentName:"li"},"test.{ts, tsx, mts, js, mjs, jsx}"),","),(0,a.kt)("li",{parentName:"ul"},"or files ending with ",(0,a.kt)("inlineCode",{parentName:"li"},".test.{ts, tsx, mts, js, mjs, jsx}"),","),(0,a.kt)("li",{parentName:"ul"},"or files ending with ",(0,a.kt)("inlineCode",{parentName:"li"},"_test.{ts, tsx, mts, js, mjs, jsx}"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# Run all tests in the current directory and all sub-directories\ndeno test\n\n# Run all tests in the util directory\ndeno test util/\n\n# Run just my_test.ts\ndeno test my_test.ts\n\n# Run test modules in parallel\ndeno test --parallel\n")),(0,a.kt)("p",null,"Note that starting in Deno v1.24, some test options can be configured via\n",(0,a.kt)("a",{parentName:"p",href:"/runtime/manual/getting_started/configuration_file"},"a configuration file"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f If you want to pass additional CLI arguments to the test files use ",(0,a.kt)("inlineCode",{parentName:"p"},"--")," to\ninform Deno that remaining arguments are scripts arguments.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# Pass additional arguments to the test file\ndeno test my_test.ts -- -e --foo --bar\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"deno test")," uses the same permission model as ",(0,a.kt)("inlineCode",{parentName:"p"},"deno run")," and therefore will\nrequire, for example, ",(0,a.kt)("inlineCode",{parentName:"p"},"--allow-write")," to write to the file system during\ntesting."),(0,a.kt)("p",null,"To see all runtime options with ",(0,a.kt)("inlineCode",{parentName:"p"},"deno test"),", you can reference the command line\nhelp:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"deno help test\n")),(0,a.kt)("h2",{id:"filtering"},"Filtering"),(0,a.kt)("p",null,"There are a number of options to filter the tests you are running."),(0,a.kt)("h3",{id:"command-line-filtering"},"Command line filtering"),(0,a.kt)("p",null,"Tests can be run individually or in groups using the command line ",(0,a.kt)("inlineCode",{parentName:"p"},"--filter"),"\noption."),(0,a.kt)("p",null,"The filter flags accept a string or a pattern as value."),(0,a.kt)("p",null,"Assuming the following tests:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'Deno.test({ name: "my-test", fn: myTest });\nDeno.test({ name: "test-1", fn: test1 });\nDeno.test({ name: "test-2", fn: test2 });\n')),(0,a.kt)("p",null,'This command will run all of these tests because they all contain the word\n"test".'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'deno test --filter "test" tests/\n')),(0,a.kt)("p",null,"On the flip side, the following command uses a pattern and will run the second\nand third tests."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'deno test --filter "/test-*\\d/" tests/\n')),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"To let Deno know that you want to use a pattern, wrap your filter with\nforward-slashes like the JavaScript syntactic sugar for a REGEX.")),(0,a.kt)("h3",{id:"including-and-excluding-paths-in-the-configuration-file"},"Including and excluding paths in the configuration file"),(0,a.kt)("p",null,"You can also filter tests by specifying paths to include or exclude in the Deno\nconfiguration file."),(0,a.kt)("p",null,"For example, if you want to only test ",(0,a.kt)("inlineCode",{parentName:"p"},"src/fetch_test.ts")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"src/signal_test.ts")," and exclude everything in ",(0,a.kt)("inlineCode",{parentName:"p"},"out/"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "test": {\n    "include": [\n      "src/fetch_test.ts",\n      "src/signal_test.ts"\n    ]\n  }\n}\n')),(0,a.kt)("p",null,"Or more likely:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "test": {\n    "exclude": ["out/"]\n  }\n}\n')),(0,a.kt)("p",null,"Then running ",(0,a.kt)("inlineCode",{parentName:"p"},"deno test")," in the same directory tree as the configuration file\nwill take these options into account."),(0,a.kt)("h3",{id:"test-definition-filtering"},"Test definition filtering"),(0,a.kt)("p",null,"Within the tests themselves, you have two options for filtering."),(0,a.kt)("h4",{id:"filtering-out-ignoring-these-tests"},"Filtering out (Ignoring these tests)"),(0,a.kt)("p",null,"Sometimes you want to ignore tests based on some sort of condition (for example\nyou only want a test to run on Windows). For this you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"ignore"),"\nboolean in the test definition. If it is set to true the test will be skipped."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'Deno.test({\n  name: "do macOS feature",\n  ignore: Deno.build.os !== "darwin",\n  fn() {\n    // do MacOS feature here\n  },\n});\n')),(0,a.kt)("h4",{id:"filtering-in-only-run-these-tests"},"Filtering in (Only run these tests)"),(0,a.kt)("p",null,"Sometimes you may be in the middle of a problem within a large test class and\nyou would like to focus on just that test and ignore the rest for now. For this\nyou can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"only")," option to tell the test framework to only run tests with\nthis set to true. Multiple tests can set this option. While the test run will\nreport on the success or failure of each test, the overall test run will always\nfail if any test is flagged with ",(0,a.kt)("inlineCode",{parentName:"p"},"only"),", as this is a temporary measure only\nwhich disables nearly all of your tests."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'Deno.test({\n  name: "Focus on this test only",\n  only: true,\n  fn() {\n    // test complicated stuff here\n  },\n});\n')),(0,a.kt)("h2",{id:"failing-fast"},"Failing fast"),(0,a.kt)("p",null,"If you have a long-running test suite and wish for it to stop on the first\nfailure, you can specify the ",(0,a.kt)("inlineCode",{parentName:"p"},"--fail-fast")," flag when running the suite."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"deno test --fail-fast\n")),(0,a.kt)("h2",{id:"reporters"},"Reporters"),(0,a.kt)("p",null,"Deno ships with three built-in reporters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pretty")," (default)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"dot")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"junit"))),(0,a.kt)("p",null,"You can specify the reporter to use with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--reporter")," flag."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# use default pretty reporter\n$ deno test\n\n# use dot reporter with concise output\n$ deno test --reporter=dot\n\n# use JUnit reporter\n$ deno test --reporter=junit\n")),(0,a.kt)("p",null,"You can also write the output of machine-readable JUnit report to a file, while\nstill enjoying human-readable output in the terminal. In such situations specify\n",(0,a.kt)("inlineCode",{parentName:"p"},"--junit-path")," flag:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ deno test --junit-path=./report.xml\n")),(0,a.kt)("h2",{id:"integration-with-testing-libraries"},"Integration with testing libraries"),(0,a.kt)("p",null,"Deno's test runner works with popular testing libraries like\n",(0,a.kt)("a",{parentName:"p",href:"https://www.chaijs.com/"},"Chai"),", ",(0,a.kt)("a",{parentName:"p",href:"https://sinonjs.org/"},"Sinon.JS")," or\n",(0,a.kt)("a",{parentName:"p",href:"https://fast-check.dev/"},"fast-check"),"."),(0,a.kt)("p",null,"For example integration see:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://deno.land/std/testing/chai_example.ts"},"https://deno.land/std/testing/chai_example.ts")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://deno.land/std/testing/sinon_example.ts"},"https://deno.land/std/testing/sinon_example.ts")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://deno.land/std/testing/fast_check_example.ts"},"https://deno.land/std/testing/fast_check_example.ts"))),(0,a.kt)("h3",{id:"example-spying-on-a-function-with-sinon"},"Example: spying on a function with Sinon"),(0,a.kt)("p",null,"Test spies are function stand-ins that are used to assert if a function's\ninternal behavior matches expectations. Sinon is a widely used testing library\nthat provides test spies and can be used in Deno by importing it from NPM:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import sinon from "npm:sinon";\n')),(0,a.kt)("p",null,"Say we have two functions, ",(0,a.kt)("inlineCode",{parentName:"p"},"foo")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"bar")," and want to assert that ",(0,a.kt)("inlineCode",{parentName:"p"},"bar")," is\ncalled during execution of ",(0,a.kt)("inlineCode",{parentName:"p"},"foo"),". There are a few ways to achieve this with\nSinon, one is to have function ",(0,a.kt)("inlineCode",{parentName:"p"},"foo")," take another function as a parameter:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// my_file.js\nexport function bar() {/*...*/}\n\nexport function foo(fn) {\n  fn();\n}\n")),(0,a.kt)("p",null,"This way, we can call ",(0,a.kt)("inlineCode",{parentName:"p"},"foo(bar)")," in the application code or wrap a spy function\naround ",(0,a.kt)("inlineCode",{parentName:"p"},"bar")," and call ",(0,a.kt)("inlineCode",{parentName:"p"},"foo(spy)")," in the testing code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js,",metastring:"ignore",ignore:!0},'import sinon from "npm:sinon";\nimport { assertEquals } from "https://deno.land/std@0.208.0/assert/mod.ts";\nimport { bar, foo } from "./my_file.js";\n\nDeno.test("calls bar during execution of foo", () => {\n  // create a test spy that wraps \'bar\'\n  const spy = sinon.spy(bar);\n\n  // call function \'foo\' and pass the spy as an argument\n  foo(spy);\n\n  assertEquals(spy.called, true);\n  assertEquals(spy.getCalls().length, 1);\n});\n')),(0,a.kt)("p",null,"If you prefer not to add additional parameters for testing purposes only, you\ncan also use ",(0,a.kt)("inlineCode",{parentName:"p"},"sinon")," to wrap a method on an object instead. In other JavaScript\nenvironments ",(0,a.kt)("inlineCode",{parentName:"p"},"bar")," might have been accessible via a global such as ",(0,a.kt)("inlineCode",{parentName:"p"},"window")," and\ncallable via ",(0,a.kt)("inlineCode",{parentName:"p"},'sinon.spy(window, "bar")'),", but in Deno this will not work and\ninstead you can ",(0,a.kt)("inlineCode",{parentName:"p"},"export")," an object with the functions to be tested. This means\nrewriting ",(0,a.kt)("inlineCode",{parentName:"p"},"my_file.js")," to something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// my_file.js\nfunction bar() {/*...*/}\n\nexport const funcs = {\n  bar,\n};\n\n// 'foo' no longer takes a parameter, but calls 'bar' from an object\nexport function foo() {\n  funcs.bar();\n}\n")),(0,a.kt)("p",null,"And then ",(0,a.kt)("inlineCode",{parentName:"p"},"import")," in a test file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js,",metastring:"ignore",ignore:!0},'import sinon from "npm:sinon";\nimport { assertEquals } from "https://deno.land/std@0.208.0/assert/mod.ts";\nimport { foo, funcs } from "./my_file.js";\n\nDeno.test("calls bar during execution of foo", () => {\n  // create a test spy that wraps \'bar\' on the \'funcs\' object\n  const spy = sinon.spy(funcs, "bar");\n\n  // call function \'foo\' without an argument\n  foo();\n\n  assertEquals(spy.called, true);\n  assertEquals(spy.getCalls().length, 1);\n});\n')))}c.isMDXComponent=!0}}]);