"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[7591],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),f=i,h=u["".concat(c,".").concat(f)]||u[f]||d[f]||o;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:i,r[1]=s;for(var l=2;l<o;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},31966:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(87462),i=(n(67294),n(3905));const o={},r="Schedule a notification for a future date",s={unversionedId:"tutorials/schedule_notification",id:"tutorials/schedule_notification",title:"Schedule a notification for a future date",description:"A common use case for queues is scheduling work",source:"@site/kv/tutorials/schedule_notification.md",sourceDirName:"tutorials",slug:"/tutorials/schedule_notification",permalink:"/kv/tutorials/schedule_notification",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"kvTutorialsHome",previous:{title:"Deno KV Tutorials & Examples",permalink:"/kv/tutorials/"},next:{title:"Offload webhook processing to a queue",permalink:"/kv/tutorials/webhook_processor"}},c={},l=[{value:"Download and configure the sample",id:"download-and-configure-the-sample",level:2},{value:"Key functionality",id:"key-functionality",level:2},{value:"Connecting to KV and adding a listener on app start",id:"connecting-to-kv-and-adding-a-listener-on-app-start",level:3},{value:"Creating and scheduling a notification",id:"creating-and-scheduling-a-notification",level:3},{value:"Defining the notification data type in TypeScript",id:"defining-the-notification-data-type-in-typescript",level:3},{value:"Sending a Courier API request",id:"sending-a-courier-api-request",level:3}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"schedule-a-notification-for-a-future-date"},"Schedule a notification for a future date"),(0,i.kt)("p",null,"A common use case for ",(0,i.kt)("a",{parentName:"p",href:"/kv/manual/queue_overview"},"queues")," is scheduling work\nto be completed at some point in the future. To help demonstrate how this works,\nwe've provided a sample application (described below) that schedules\nnotification messages sent through the ",(0,i.kt)("a",{parentName:"p",href:"https://www.courier.com/"},"Courier API"),".\nThe application runs on ",(0,i.kt)("a",{parentName:"p",href:"https://www.deno.com/deploy"},"Deno Deploy"),", using the\nbuilt-in KV and queue API implementations available there with zero\nconfiguration."),(0,i.kt)("h2",{id:"download-and-configure-the-sample"},"Download and configure the sample"),(0,i.kt)("p",null,"\u2b07\ufe0f\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kwhinnery/deno_courier_example"},(0,i.kt)("strong",{parentName:"a"},"Download or clone the complete sample app here")),"."),(0,i.kt)("p",null,"You can run and deploy this sample application yourself using the instructions\nin the GitHub repo's\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kwhinnery/deno_courier_example"},(0,i.kt)("inlineCode",{parentName:"a"},"README")," file"),"."),(0,i.kt)("p",null,"To run the example app above, you'll also need to\n",(0,i.kt)("a",{parentName:"p",href:"https://app.courier.com/signup"},"sign up for Courier"),". Of course the techniques\nyou'll see in the application would just as easily apply to any notification\nservice, from ",(0,i.kt)("a",{parentName:"p",href:"https://aws.amazon.com/sns/"},"Amazon SNS")," to\n",(0,i.kt)("a",{parentName:"p",href:"https://www.twilio.com"},"Twilio"),", but Courier provides an easy-to-use\nnotification API that you can use with a personal GMail account for testing (in\naddition to all the other neat things it can do)."),(0,i.kt)("h2",{id:"key-functionality"},"Key functionality"),(0,i.kt)("p",null,"After setting up and running the project, we'd like to direct your attention to\na few key parts of the code that implement the scheduling mechanics."),(0,i.kt)("h3",{id:"connecting-to-kv-and-adding-a-listener-on-app-start"},"Connecting to KV and adding a listener on app start"),(0,i.kt)("p",null,"Most of the example app's functionality lives in\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kwhinnery/deno_courier_example/blob/main/server.tsx"},"server.tsx"),"\nin the top-level directory. When the Deno app process starts, it creates a\nconnection to a Deno KV instance and attaches an event handler which will\nprocess messages as they are received from the queue."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server.tsx"',title:'"server.tsx"'},"// Create a Deno KV database reference\nconst kv = await Deno.openKv();\n\n// Create a queue listener that will process enqueued messages\nkv.listenQueue(async (message) => {\n  /* ... implementation of listener here ... */\n});\n")),(0,i.kt)("h3",{id:"creating-and-scheduling-a-notification"},"Creating and scheduling a notification"),(0,i.kt)("p",null,"After a new order is submitted through the form in this demo application, the\n",(0,i.kt)("inlineCode",{parentName:"p"},"enqueue")," function is called with a delay of five seconds before a notification\nemail is sent out."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server.tsx"',title:'"server.tsx"'},'app.post("/order", async (c) => {\n  const { email, order } = await c.req.parseBody();\n  const n: Notification = {\n    email: email as string,\n    body: `Order received for: "${order as string}"`,\n  };\n\n  // Select a time in the future - for now, just wait 5 seconds\n  const delay = 1000 * 5;\n\n  // Enqueue the message for processing!\n  kv.enqueue(n, { delay });\n\n  // Redirect back home with a success message!\n  setCookie(c, "flash_message", "Order created!");\n  return c.redirect("/");\n});\n')),(0,i.kt)("h3",{id:"defining-the-notification-data-type-in-typescript"},"Defining the notification data type in TypeScript"),(0,i.kt)("p",null,"Often, it is desirable to work with strongly typed objects when pushing data\ninto or out of the queue. While queue messages are an\n",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown"},(0,i.kt)("inlineCode",{parentName:"a"},"unknown")),"\nTypeScript type initially, we can use\n",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/narrowing.html"},"type guards")," to\ntell the compiler the shape of the data we expect."),(0,i.kt)("p",null,"Here's the source code for the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kwhinnery/deno_courier_example/blob/main/notification.ts"},"notification module"),",\nwhich we use to describe the properties of a notification in our system."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="notification.ts"',title:'"notification.ts"'},'// Shape of a notification object\nexport default interface Notification {\n  email: string;\n  body: string;\n}\n\n// Type guard for a notification object\nexport function isNotification(o: unknown): o is Notification {\n  return (\n    ((o as Notification)?.email !== undefined &&\n      typeof (o as Notification).email === "string") &&\n    ((o as Notification)?.body !== undefined &&\n      typeof (o as Notification).body === "string")\n  );\n}\n')),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"server.tsx"),", we use the exported type guard to ensure we are responding to\nthe right message types."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server.tsx"',title:'"server.tsx"'},"kv.listenQueue(async (message) => {\n  // Use type guard to short circuit early if the message is of the wrong type\n  if (!isNotification(message)) return;\n\n  // Grab the relevant data from the message, which TypeScript now knows\n  // is a Notification interface\n  const { email, body } = message;\n\n  // Create an email notification with Courier\n  // ...\n});\n")),(0,i.kt)("h3",{id:"sending-a-courier-api-request"},"Sending a Courier API request"),(0,i.kt)("p",null,"To send an email as scheduled, we use the Courier REST API. More information\nabout the Courier REST API can be found in\n",(0,i.kt)("a",{parentName:"p",href:"https://www.courier.com/docs/reference/send/message/"},"their reference docs"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server.tsx"',title:'"server.tsx"'},'const response = await fetch("https://api.courier.com/send", {\n  method: "POST",\n  headers: {\n    Authorization: `Bearer ${COURIER_API_TOKEN}`,\n  },\n  body: JSON.stringify({\n    message: {\n      to: { email },\n      content: {\n        title: "New order placed by Deno!",\n        body: "notification body goes here",\n      },\n    },\n  }),\n});\n')))}d.isMDXComponent=!0}}]);