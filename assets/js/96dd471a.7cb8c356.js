"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[962],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=a,h=u["".concat(s,".").concat(c)]||u[c]||d[c]||r;return n?o.createElement(h,i(i({ref:t},m),{},{components:n})):o.createElement(h,i({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},82634:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=n(87462),a=(n(67294),n(3905));const r={},i="ECMAScript Modules in Deno",l={unversionedId:"manual/basics/modules/index",id:"manual/basics/modules/index",title:"ECMAScript Modules in Deno",description:"Concepts",source:"@site/runtime/manual/basics/modules/index.md",sourceDirName:"manual/basics/modules",slug:"/manual/basics/modules/",permalink:"/runtime/manual/basics/modules/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Using React with Deno",permalink:"/runtime/manual/basics/react"},next:{title:"Reloading Modules",permalink:"/runtime/manual/basics/modules/reloading_modules"}},s={},p=[{value:"Concepts",id:"concepts",level:2},{value:"Overview",id:"overview",level:2},{value:"Local Import",id:"local-import",level:2},{value:"Remote Import",id:"remote-import",level:2},{value:"Export",id:"export",level:2},{value:"FAQ",id:"faq",level:2},{value:"How do I import a specific version of a module?",id:"how-do-i-import-a-specific-version-of-a-module",level:3},{value:"It seems unwieldy to import URLs everywhere.",id:"it-seems-unwieldy-to-import-urls-everywhere",level:3},{value:"How can I trust a URL that may change?",id:"how-can-i-trust-a-url-that-may-change",level:3},{value:"But what if the host of the URL goes down? The source won&#39;t be available.",id:"but-what-if-the-host-of-the-url-goes-down-the-source-wont-be-available",level:3}],m={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ecmascript-modules-in-deno"},"ECMAScript Modules in Deno"),(0,a.kt)("h2",{id:"concepts"},"Concepts"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"},"import"),"\nallows you to include and use modules held elsewhere, on your local file\nsystem or remotely."),(0,a.kt)("li",{parentName:"ul"},"Imports are URLs or file system paths."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"},"export"),"\nallows you to specify which parts of your module are accessible to users who\nimport your module.")),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Deno by default standardizes the way modules are imported in both JavaScript and\nTypeScript using the ECMAScript 6 ",(0,a.kt)("inlineCode",{parentName:"p"},"import/export")," standard."),(0,a.kt)("p",null,"It adopts browser-like module resolution, meaning that file names must be\nspecified in full. You may not omit the file extension and there is no special\nhandling of ",(0,a.kt)("inlineCode",{parentName:"p"},"index.js"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js,",metastring:"ignore",ignore:!0},'import { add, multiply } from "./arithmetic.ts";\n')),(0,a.kt)("p",null,"Dependencies are also imported directly, there is no package management\noverhead. Local modules are imported in exactly the same way as remote modules.\nAs the examples show below, the same functionality can be produced in the same\nway with local or remote modules."),(0,a.kt)("h2",{id:"local-import"},"Local Import"),(0,a.kt)("p",null,"In this example the ",(0,a.kt)("inlineCode",{parentName:"p"},"add")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"multiply")," functions are imported from a local\n",(0,a.kt)("inlineCode",{parentName:"p"},"arithmetic.ts")," module."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Command:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"deno run local.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'/**\n * local.ts\n */\nimport { add, multiply } from "./arithmetic.ts";\n\nfunction totalCost(outbound: number, inbound: number, tax: number): number {\n  return multiply(add(outbound, inbound), tax);\n}\n\nconsole.log(totalCost(19, 31, 1.2));\nconsole.log(totalCost(45, 27, 1.15));\n\n/**\n * Output\n *\n * 60\n * 82.8\n */\n')),(0,a.kt)("h2",{id:"remote-import"},"Remote Import"),(0,a.kt)("p",null,"In the local import example above an ",(0,a.kt)("inlineCode",{parentName:"p"},"add")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"multiply")," method are imported\nfrom a locally stored arithmetic module. The same functionality can be created\nby importing ",(0,a.kt)("inlineCode",{parentName:"p"},"add")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"multiply")," methods from a remote module too."),(0,a.kt)("p",null,"In this case the Ramda module is referenced, including the version number. Also\nnote a JavaScript module is imported directly into a TypeScript module, Deno has\nno problem handling this."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Command:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"deno run ./remote.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * remote.ts\n */\nimport {\n  add,\n  multiply,\n} from "https://x.nest.land/ramda@0.27.0/source/index.js";\n\nfunction totalCost(outbound: number, inbound: number, tax: number): number {\n  return multiply(add(outbound, inbound), tax);\n}\n\nconsole.log(totalCost(19, 31, 1.2));\nconsole.log(totalCost(45, 27, 1.15));\n\n/**\n * Output\n *\n * 60\n * 82.8\n */\n')),(0,a.kt)("h2",{id:"export"},"Export"),(0,a.kt)("p",null,"In the local import example above the ",(0,a.kt)("inlineCode",{parentName:"p"},"add")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"multiply")," functions are\nimported from a locally stored arithmetic module. To make this possible the\nfunctions stored in the arithmetic module must be exported."),(0,a.kt)("p",null,"To do this just add the keyword ",(0,a.kt)("inlineCode",{parentName:"p"},"export")," to the beginning of the function\nsignature as is shown below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * arithmetic.ts\n */\nexport function add(a: number, b: number): number {\n  return a + b;\n}\n\nexport function multiply(a: number, b: number): number {\n  return a * b;\n}\n")),(0,a.kt)("p",null,"All functions, classes, constants and variables which need to be accessible\ninside external modules must be exported. Either by prepending them with the\n",(0,a.kt)("inlineCode",{parentName:"p"},"export")," keyword or including them in an export statement at the bottom of the\nfile."),(0,a.kt)("h2",{id:"faq"},"FAQ"),(0,a.kt)("h3",{id:"how-do-i-import-a-specific-version-of-a-module"},"How do I import a specific version of a module?"),(0,a.kt)("p",null,"Specify the version in the URL. For example, this URL fully specifies the code\nbeing run: ",(0,a.kt)("inlineCode",{parentName:"p"},"https://unpkg.com/liltest@0.0.5/dist/liltest.js"),"."),(0,a.kt)("h3",{id:"it-seems-unwieldy-to-import-urls-everywhere"},"It seems unwieldy to import URLs everywhere."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"What if one of the URLs links to a subtly different version of a library?")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Isn't it error prone to maintain URLs everywhere in a large project?")),(0,a.kt)("p",null,"The solution is to import and re-export your external libraries in a central\n",(0,a.kt)("inlineCode",{parentName:"p"},"deps.ts")," file (which serves the same purpose as Node's ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," file).\nFor example, let's say you were using the above assertion library across a large\nproject. Rather than importing ",(0,a.kt)("inlineCode",{parentName:"p"},'"https://deno.land/std/assert/mod.ts"'),"\neverywhere, you could create a ",(0,a.kt)("inlineCode",{parentName:"p"},"deps.ts")," file that exports the third-party code:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"deps.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'export {\n  assert,\n  assertEquals,\n  assertStringIncludes,\n} from "https://deno.land/std@0.208.0/assert/mod.ts";\n')),(0,a.kt)("p",null,"And throughout the same project, you can import from the ",(0,a.kt)("inlineCode",{parentName:"p"},"deps.ts")," and avoid\nhaving many references to the same URL:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'import { assertEquals, runTests, test } from "./deps.ts";\n')),(0,a.kt)("p",null,"This design circumvents a plethora of complexity spawned by package management\nsoftware, centralized code repositories, and superfluous file formats."),(0,a.kt)("h3",{id:"how-can-i-trust-a-url-that-may-change"},"How can I trust a URL that may change?"),(0,a.kt)("p",null,"By using a lock file (with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--lock")," command line flag), you can ensure that\nthe code pulled from a URL is the same as it was during initial development. You\ncan learn more about this ",(0,a.kt)("a",{parentName:"p",href:"/runtime/manual/basics/modules/integrity_checking"},"here"),"."),(0,a.kt)("h3",{id:"but-what-if-the-host-of-the-url-goes-down-the-source-wont-be-available"},"But what if the host of the URL goes down? The source won't be available."),(0,a.kt)("p",null,"This, like the above, is a problem faced by ",(0,a.kt)("em",{parentName:"p"},"any")," remote dependency system.\nRelying on external servers is convenient for development but brittle in\nproduction. Production software should always vendor its dependencies. In Node\nthis is done by checking ",(0,a.kt)("inlineCode",{parentName:"p"},"node_modules")," into source control. In Deno this is\ndone by using the ",(0,a.kt)("a",{parentName:"p",href:"/runtime/manual/tools/vendor"},(0,a.kt)("inlineCode",{parentName:"a"},"deno vendor"))," subcommand."))}d.isMDXComponent=!0}}]);