"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[9524],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=s,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(h,o(o({ref:n},p),{},{components:t})):a.createElement(h,o({ref:n},p))}));function h(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,o=new Array(r);o[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:s,o[1]=i;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},81361:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=t(87462),s=(t(67294),t(3905));const r={},o="Chat application with WebSocket",i={unversionedId:"tutorials/chat_app",id:"tutorials/chat_app",title:"Chat application with WebSocket",description:"In this tutorial we'll create a simple chat app using Deno. Our chat app will",source:"@site/runtime/tutorials/chat_app.md",sourceDirName:"tutorials",slug:"/tutorials/chat_app",permalink:"/runtime/tutorials/chat_app",draft:!1,tags:[],version:"current",frontMatter:{}},l={},c=[{value:"Building the View",id:"building-the-view",level:2},{value:"<strong>WebSocket</strong> Primer",id:"websocket-primer",level:2},{value:"Chat Client",id:"chat-client",level:2},{value:"Chat Server",id:"chat-server",level:2},{value:"Example Code",id:"example-code",level:2}],p={toc:c},u="wrapper";function d(e){let{components:n,...r}=e;return(0,s.kt)(u,(0,a.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"chat-application-with-websocket"},"Chat application with WebSocket"),(0,s.kt)("p",null,"In this tutorial we'll create a simple chat app using Deno. Our chat app will\nallow multiple chat clients connected to the same backend to send group messages\nthrough web sockets. After a client chooses a username, they can then start\nsending group messages to other online clients. Each client also displays the\nlist of currently active users."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Untitled",src:t(16248).Z,width:"656",height:"358"})),(0,s.kt)("h2",{id:"building-the-view"},"Building the View"),(0,s.kt)("p",null,"We can build the simple UI shown above with the following as our ",(0,s.kt)("inlineCode",{parentName:"p"},"index.html"),".\nNote that the ",(0,s.kt)("inlineCode",{parentName:"p"},"app.js")," script is our chat client (which will be discussed in\ndetail later)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- index.html --\x3e\n\n<html>\n  <head>\n    <title>Chat App</title>\n    <script src="/public/app.js"><\/script>\n  </head>\n  <body>\n    <div style="text-align: center">\n      <div>\n        <b>Users</b>\n        <hr />\n        <div id="users"></div>\n        <hr class="visible-xs visible-sm" />\n      </div>\n      <div>\n        <input id="data" placeholder="send message" />\n        <hr />\n        <div id="conversation"></div>\n      </div>\n    </div>\n  </body>\n</html>\n')),(0,s.kt)("h2",{id:"websocket-primer"},(0,s.kt)("strong",{parentName:"h2"},"WebSocket")," Primer"),(0,s.kt)("p",null,"We will rely on Deno's native support for web sockets when building our client\nand server. A\n",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket"},"web socket")," is a\nbidirectional communication channel that allows the both the client and server\nto send messages to each other at any time. Web sockets are frequently used in\nrealtime applications where low latency is critical. Each of our clients will\nkeep a web socket connection open to our server so they can receive the latest\nmessages and user logins without constantly polling."),(0,s.kt)("h2",{id:"chat-client"},"Chat Client"),(0,s.kt)("p",null,"The chat client ",(0,s.kt)("inlineCode",{parentName:"p"},"app.js")," runs in the browser and listens for updates from our\nserver and then manipulates the DOM. Specifically our client is listening for\nnew messages and the list of currently active users. We need to add event\nhandlers to our client's web socket to specify what happens when our clients\nreceives a new message or event."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'// app.js\n\nconst myUsername = prompt("Please enter your name") || "Anonymous";\nconst socket = new WebSocket(\n  `ws://localhost:8080/start_web_socket?username=${myUsername}`,\n);\n\nsocket.onmessage = (m) => {\n  const data = JSON.parse(m.data);\n\n  switch (data.event) {\n    case "update-users":\n      // refresh displayed user list\n      let userListHtml = "";\n      for (const username of data.usernames) {\n        userListHtml += `<div> ${username} </div>`;\n      }\n      document.getElementById("users").innerHTML = userListHtml;\n      break;\n\n    case "send-message":\n      // display new chat message\n      addMessage(data.username, data.message);\n      break;\n  }\n};\n\nfunction addMessage(username, message) {\n  // displays new message\n  document.getElementById(\n    "conversation",\n  ).innerHTML += `<b> ${username} </b>: ${message} <br/>`;\n}\n\n// on page load\nwindow.onload = () => {\n  // when the client hits the ENTER key\n  document.getElementById("data").addEventListener("keypress", (e) => {\n    if (e.key === "Enter") {\n      const inputElement = document.getElementById("data");\n      var message = inputElement.value;\n      inputElement.value = "";\n      socket.send(\n        JSON.stringify({\n          event: "send-message",\n          message: message,\n        }),\n      );\n    }\n  });\n};\n')),(0,s.kt)("h2",{id:"chat-server"},"Chat Server"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://deno.land/x/oak@v11.1.0"},"oak")," is the Deno middleware framework that\nwe'll be using to set up our server. Our server will return the plain\n",(0,s.kt)("inlineCode",{parentName:"p"},"index.html")," file previously shown when the user first navigates to the site.\nOur server also exposes a ",(0,s.kt)("inlineCode",{parentName:"p"},"ws_endpoint/")," endpoint which the chat clients will\nuse to create their web socket connection. Note that the client's initial HTTP\nconnection is converted into a WebSocket connection by the server via HTTP's\n",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism"},"protocol upgrade mechanism"),".\nOur server will maintain web socket connections with each active client and tell\nthem which users are currently active. Our server will also broadcast a message\nto all active clients whenever there is a new message so that each client can\ndisplay it."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'// server.js\n\nimport { Application, Router } from "https://deno.land/x/oak/mod.ts";\n\nconst connectedClients = new Map();\n\nconst app = new Application();\nconst port = 8080;\nconst router = new Router();\n\n// send a message to all connected clients\nfunction broadcast(message) {\n  for (const client of connectedClients.values()) {\n    client.send(message);\n  }\n}\n\n// send updated users list to all connected clients\nfunction broadcast_usernames() {\n  const usernames = [...connectedClients.keys()];\n  console.log(\n    "Sending updated username list to all clients: " +\n      JSON.stringify(usernames),\n  );\n  broadcast(\n    JSON.stringify({\n      event: "update-users",\n      usernames: usernames,\n    }),\n  );\n}\n\nrouter.get("/start_web_socket", async (ctx) => {\n  const socket = await ctx.upgrade();\n  const username = ctx.request.url.searchParams.get("username");\n  if (connectedClients.has(username)) {\n    socket.close(1008, `Username ${username} is already taken`);\n    return;\n  }\n  socket.username = username;\n  connectedClients.set(username, socket);\n  console.log(`New client connected: ${username}`);\n\n  // broadcast the active users list when a new user logs in\n  socket.onopen = () => {\n    broadcast_usernames();\n  };\n\n  // when a client disconnects, remove them from the connected clients list\n  // and broadcast the active users list\n  socket.onclose = () => {\n    console.log(`Client ${socket.username} disconnected`);\n    connectedClients.delete(socket.username);\n    broadcast_usernames();\n  };\n\n  // broadcast new message if someone sent one\n  socket.onmessage = (m) => {\n    const data = JSON.parse(m.data);\n    switch (data.event) {\n      case "send-message":\n        broadcast(\n          JSON.stringify({\n            event: "send-message",\n            username: socket.username,\n            message: data.message,\n          }),\n        );\n        break;\n    }\n  };\n});\n\napp.use(router.routes());\napp.use(router.allowedMethods());\napp.use(async (context) => {\n  await context.send({\n    root: `${Deno.cwd()}/`,\n    index: "public/index.html",\n  });\n});\n\nconsole.log("Listening at http://localhost:" + port);\nawait app.listen({ port });\n')),(0,s.kt)("p",null,"We can start our server with the following command. Note we need to explicitly\ngrant access to the file system and network because Deno is secure by default."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"deno run --allow-read --allow-net server.js\n")),(0,s.kt)("p",null,"Now if you visit ",(0,s.kt)("a",{parentName:"p",href:"http://localhost:8080/"},"http://localhost:8080")," you will be\nable to start a chat session. You can open 2 simultaneous windows and try\nchatting with yourself."),(0,s.kt)("h2",{id:"example-code"},"Example Code"),(0,s.kt)("p",null,"You can find the entire example code\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/awelm/deno-chat-app"},"here"),"."))}d.isMDXComponent=!0},16248:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/chat_app_render-0581c4bff72718a055b81edf2c0c5097.png"}}]);