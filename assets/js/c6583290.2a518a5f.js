"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[5163],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),u=a,f=p["".concat(l,".").concat(u)]||p[u]||m[u]||i;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},26879:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=t(87462),a=(t(67294),t(3905));const i={},o="Using Twind with Deno",s={unversionedId:"manual/advanced/jsx_dom/twind",id:"manual/advanced/jsx_dom/twind",title:"Using Twind with Deno",description:"Twind is a tailwind-in-js solution for using",source:"@site/runtime/manual/advanced/jsx_dom/twind.md",sourceDirName:"manual/advanced/jsx_dom",slug:"/manual/advanced/jsx_dom/twind",permalink:"/runtime/manual/advanced/jsx_dom/twind",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Parsing and Stringifying CSS",permalink:"/runtime/manual/advanced/jsx_dom/css"},next:{title:"Using jsdom with Deno",permalink:"/runtime/manual/advanced/jsx_dom/jsdom"}},l={},d=[{value:"Basic example",id:"basic-example",level:2}],c={toc:d},p="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"using-twind-with-deno"},"Using Twind with Deno"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://twind.style/"},"Twind")," is a ",(0,a.kt)("em",{parentName:"p"},"tailwind-in-js")," solution for using\n",(0,a.kt)("a",{parentName:"p",href:"https://tailwindcss.com/"},"Tailwind"),". Twind is particularly useful in Deno's\nserver context, where Tailwind and CSS can be easily server side rendered,\ngenerating dynamic, performant and efficient CSS while having the usability of\nstyling with Tailwind."),(0,a.kt)("h2",{id:"basic-example"},"Basic example"),(0,a.kt)("p",null,"In the following example, we will use twind to server side render an HTML page\nand log it to the console. It demonstrates using grouped tailwind classes and\nhave it rendered using only the styles specified in the document and no client\nside JavaScript to accomplish the ",(0,a.kt)("em",{parentName:"p"},"tailwind-in-js"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { extract, install } from "https://esm.sh/@twind/core@1.1.3";\nimport presetTailwind from "https://esm.sh/@twind/preset-tailwind@1.1.4";\n\ninstall({\n  presets: [\n    presetTailwind(),\n    {\n      theme: {\n        fontFamily: {\n          sans: ["Helvetica", "sans-serif"],\n          serif: ["Times", "serif"],\n        },\n      },\n    },\n  ],\n});\n\nfunction renderBody() {\n  return `<!DOCTYPE html>\n    <html lang="en">\n      <head>\n        <title>Hello from Deno</title>\n      </head>\n      <body class="font-sans">\n        <h1 class="text(3xl blue-500)">Hello from Deno</h1>\n        <form>\n          <input name="user">\n          <button class="text(2xl red-500)">\n            Submit\n          </button>\n        </form>\n      </body>\n    </html>\n  `;\n}\n\nfunction ssr() {\n  const body = renderBody();\n  const { html, css } = extract(body);\n  return html.replace("</head>", `<style data-twind>${css}</style></head>`);\n}\n\nconsole.log(ssr());\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://twind.style/packages/@twind/core#extract"},"https://twind.style/packages/@twind/core#extract")))}m.isMDXComponent=!0}}]);