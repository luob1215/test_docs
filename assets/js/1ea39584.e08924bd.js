"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[3496],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=p(n),u=l,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||o;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:l,r[1]=i;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},10834:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(87462),l=(n(67294),n(3905));const o={sidebar_position:4},r="Command Line Interface",i={unversionedId:"manual/getting_started/command_line_interface",id:"manual/getting_started/command_line_interface",title:"Command Line Interface",description:"Deno is a command line program. You should be familiar with some simple commands",source:"@site/runtime/manual/getting_started/command_line_interface.md",sourceDirName:"manual/getting_started",slug:"/manual/getting_started/command_line_interface",permalink:"/runtime/manual/getting_started/command_line_interface",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"runtimeGuideHome",previous:{title:"Set Up Your Environment",permalink:"/runtime/manual/getting_started/setup_your_environment"},next:{title:"Configuration File",permalink:"/runtime/manual/getting_started/configuration_file"}},s={},p=[{value:"Script source",id:"script-source",level:2},{value:"Script arguments",id:"script-arguments",level:2},{value:"Watch mode",id:"watch-mode",level:2},{value:"Hot Module Replacement mode",id:"hot-module-replacement-mode",level:2},{value:"Integrity flags (lock files)",id:"integrity-flags-lock-files",level:2},{value:"Cache and compilation flags",id:"cache-and-compilation-flags",level:2},{value:"Runtime flags",id:"runtime-flags",level:2},{value:"Type checking flags",id:"type-checking-flags",level:3},{value:"Permission flags",id:"permission-flags",level:3},{value:"Other runtime flags",id:"other-runtime-flags",level:3},{value:"Autocomplete",id:"autocomplete",level:2}],d={toc:p},m="wrapper";function c(e){let{components:t,...n}=e;return(0,l.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"command-line-interface"},"Command Line Interface"),(0,l.kt)("p",null,"Deno is a command line program. You should be familiar with some simple commands\nhaving followed the examples thus far and already understand the basics of shell\nusage."),(0,l.kt)("p",null,"There are multiple ways of viewing the main help text:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# Using the subcommand.\ndeno help\n\n# Using the short flag -- outputs the same as above.\ndeno -h\n\n# Using the long flag -- outputs more detailed help text where available.\ndeno --help\n")),(0,l.kt)("p",null,"Deno's CLI is subcommand-based. The above commands should show you a list of\nsubcommands supported, such as ",(0,l.kt)("inlineCode",{parentName:"p"},"deno compile"),". To see subcommand-specific help,\nfor example for ",(0,l.kt)("inlineCode",{parentName:"p"},"compile"),", you can similarly run one of:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"deno help compile\ndeno compile -h\ndeno compile --help\n")),(0,l.kt)("p",null,"Detailed guides for each subcommand can be found ",(0,l.kt)("a",{parentName:"p",href:"/runtime/manual/"},"here"),"."),(0,l.kt)("h2",{id:"script-source"},"Script source"),(0,l.kt)("p",null,"Deno can grab the scripts from multiple sources, a filename, a url, and '-' to\nread the file from stdin. The latter is useful for integration with other\napplications."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"deno run main.ts\ndeno run https://mydomain.com/main.ts\ncat main.ts | deno run -\n")),(0,l.kt)("h2",{id:"script-arguments"},"Script arguments"),(0,l.kt)("p",null,"Separately from the Deno runtime flags, you can pass user-space arguments to the\nscript you are running by specifying them ",(0,l.kt)("strong",{parentName:"p"},"after")," the script name:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"deno run main.ts a b -c --quiet\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'// main.ts\nconsole.log(Deno.args); // [ "a", "b", "-c", "--quiet" ]\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note that anything passed after the script name will be passed as a script\nargument and not consumed as a Deno runtime flag.")," This leads to the following\npitfall:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# Good. We grant net permission to net_client.ts.\ndeno run --allow-net net_client.ts\n\n# Bad! --allow-net was passed to Deno.args, throws a net permission error.\ndeno run net_client.ts --allow-net\n")),(0,l.kt)("p",null,"Some see it as unconventional that:"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"a non-positional flag is parsed differently depending on its position.")),(0,l.kt)("p",null,"However:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"This is the most logical and ergonomic way of distinguishing between runtime\nflags and script arguments."),(0,l.kt)("li",{parentName:"ol"},"This is, in fact, the same behaviour as that of any other popular runtime.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Try ",(0,l.kt)("inlineCode",{parentName:"li"},"node -c index.js")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"node index.js -c"),". The first will only do a\nsyntax check on ",(0,l.kt)("inlineCode",{parentName:"li"},"index.js")," as per Node's ",(0,l.kt)("inlineCode",{parentName:"li"},"-c")," flag. The second will\n",(0,l.kt)("em",{parentName:"li"},"execute")," ",(0,l.kt)("inlineCode",{parentName:"li"},"index.js")," with ",(0,l.kt)("inlineCode",{parentName:"li"},"-c")," passed to ",(0,l.kt)("inlineCode",{parentName:"li"},'require("process").argv'),".")))),(0,l.kt)("hr",null),(0,l.kt)("p",null,"There exist logical groups of flags that are shared between related subcommands.\nWe discuss these below."),(0,l.kt)("h2",{id:"watch-mode"},"Watch mode"),(0,l.kt)("p",null,"You can supply the ",(0,l.kt)("inlineCode",{parentName:"p"},"--watch")," flag to ",(0,l.kt)("inlineCode",{parentName:"p"},"deno run"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"deno test"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"deno compile"),",\nand ",(0,l.kt)("inlineCode",{parentName:"p"},"deno fmt")," to enable the built-in file watcher. The files that are watched\ndepend on the subcommand used:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"for ",(0,l.kt)("inlineCode",{parentName:"li"},"deno run"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"deno test"),", and ",(0,l.kt)("inlineCode",{parentName:"li"},"deno compile")," the entrypoint, and all local\nfiles the entrypoint(s) statically import(s) will be watched."),(0,l.kt)("li",{parentName:"ul"},"for ",(0,l.kt)("inlineCode",{parentName:"li"},"deno fmt")," all local files and directories specified as command line\narguments (or the working directory if no specific files/directories is\npassed) are watched.")),(0,l.kt)("p",null,"Whenever one of the watched files is changed on disk, the program will\nautomatically be restarted / formatted / tested / bundled."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"deno run --watch main.ts\ndeno test --watch\ndeno fmt --watch\n")),(0,l.kt)("h2",{id:"hot-module-replacement-mode"},"Hot Module Replacement mode"),(0,l.kt)("p",null,"You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"--unstable-hmr")," flag with ",(0,l.kt)("inlineCode",{parentName:"p"},"deno run")," to enable the hot module\nreplacement mode. Instead of restarting the program, the runtime will try to\nupdate the program in-place. If updating in-place fails, the program will still\nbe restarted."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"deno run --unstable-hmr main.ts\n")),(0,l.kt)("p",null,"When a hot module replacement is triggered, the runtime will dispatch a\n",(0,l.kt)("inlineCode",{parentName:"p"},"CustomEvent")," of type ",(0,l.kt)("inlineCode",{parentName:"p"},"hmr")," that will include ",(0,l.kt)("inlineCode",{parentName:"p"},"path")," property in its ",(0,l.kt)("inlineCode",{parentName:"p"},"detail"),"\nobject. You can listen for this event and perform any additional logic that you\nneed to do when a module is updated (eg. notify a browser over a WebSocket\nconnection)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'addEventListener("hmr", (e) => {\n  console.log("HMR triggered", e.detail.path);\n});\n')),(0,l.kt)("h2",{id:"integrity-flags-lock-files"},"Integrity flags (lock files)"),(0,l.kt)("p",null,"Affect commands which can download resources to the cache: ",(0,l.kt)("inlineCode",{parentName:"p"},"deno cache"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"deno run"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"deno test"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"deno doc"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"deno compile"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-terminal"},"--lock <FILE>    Check the specified lock file\n--lock-write     Write lock file. Use with --lock.\n")),(0,l.kt)("p",null,"Find out more about these ",(0,l.kt)("a",{parentName:"p",href:"/runtime/manual/basics/modules/integrity_checking"},"here"),"."),(0,l.kt)("h2",{id:"cache-and-compilation-flags"},"Cache and compilation flags"),(0,l.kt)("p",null,"Affect commands which can populate the cache: ",(0,l.kt)("inlineCode",{parentName:"p"},"deno cache"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"deno run"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"deno test"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"deno doc"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"deno compile"),". As well as the flags above, this\nincludes those which affect module resolution, compilation configuration etc."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-terminal"},"--config <FILE>               Load configuration file\n--import-map <FILE>           Load import map file\n--no-remote                   Do not resolve remote modules\n--reload=<CACHE_BLOCKLIST>    Reload source code cache (recompile TypeScript)\n--unstable                    Enable unstable APIs\n")),(0,l.kt)("h2",{id:"runtime-flags"},"Runtime flags"),(0,l.kt)("p",null,"Affect commands which execute user code: ",(0,l.kt)("inlineCode",{parentName:"p"},"deno run")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"deno test"),". These\ninclude all of the above as well as the following."),(0,l.kt)("h3",{id:"type-checking-flags"},"Type checking flags"),(0,l.kt)("p",null,"You can type-check your code (without executing it) using the command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"> deno check main.ts\n")),(0,l.kt)("p",null,"You can also type-check your code before execution by using the ",(0,l.kt)("inlineCode",{parentName:"p"},"--check"),"\nargument to deno run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"> deno run --check main.ts\n")),(0,l.kt)("p",null,"This flag affects ",(0,l.kt)("inlineCode",{parentName:"p"},"deno run"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"deno eval"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"deno repl")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"deno cache"),'. The\nfollowing table describes the type-checking behavior of various subcommands.\nHere "Local" means that only errors from local code will induce type-errors,\nmodules imported from https URLs (remote) may have type errors that are not\nreported. (To turn on type-checking for all modules, use ',(0,l.kt)("inlineCode",{parentName:"p"},"--check=all"),".)"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Subcommand"),(0,l.kt)("th",{parentName:"tr",align:null},"Type checking mode"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"deno bench")),(0,l.kt)("td",{parentName:"tr",align:null},"\ud83d\udcc1 Local")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"deno cache")),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"deno check")),(0,l.kt)("td",{parentName:"tr",align:null},"\ud83d\udcc1 Local")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"deno compile")),(0,l.kt)("td",{parentName:"tr",align:null},"\ud83d\udcc1 Local")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"deno eval")),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"deno repl")),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"deno run")),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"deno test")),(0,l.kt)("td",{parentName:"tr",align:null},"\ud83d\udcc1 Local")))),(0,l.kt)("h3",{id:"permission-flags"},"Permission flags"),(0,l.kt)("p",null,"These are listed ",(0,l.kt)("a",{parentName:"p",href:"/runtime/manual/basics/permissions#permissions-list"},"here"),"."),(0,l.kt)("h3",{id:"other-runtime-flags"},"Other runtime flags"),(0,l.kt)("p",null,"More flags which affect the execution environment."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-terminal"},"--cached-only                Require that remote dependencies are already cached\n--inspect=<HOST:PORT>        activate inspector on host:port ...\n--inspect-brk=<HOST:PORT>    activate inspector on host:port and break at ...\n--inspect-wait=<HOST:PORT>   activate inspector on host:port and wait for ...\n--location <HREF>            Value of 'globalThis.location' used by some web APIs\n--prompt                     Fallback to prompt if required permission wasn't passed\n--seed <NUMBER>              Seed Math.random()\n--v8-flags=<v8-flags>        Set V8 command line options. For help: ...\n")),(0,l.kt)("h2",{id:"autocomplete"},"Autocomplete"),(0,l.kt)("p",null,"You can get IDE-style autocompletions for Deno with ",(0,l.kt)("a",{parentName:"p",href:"https://fig.io/"},"Fig")),(0,l.kt)("a",{href:"https://fig.io/",target:"_blank"},(0,l.kt)("img",{src:"https://fig.io/badges/Logo.svg",width:"15",height:"15"})),". It works in bash, zsh, and fish.",(0,l.kt)("p",null,"To install, run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"brew install fig\n")))}c.isMDXComponent=!0}}]);