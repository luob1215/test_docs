"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[8488],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=o.createContext({}),u=function(e){var t=o.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return o.createElement(m.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,m=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),s=u(n),c=r,f=s["".concat(m,".").concat(c)]||s[c]||d[c]||a;return n?o.createElement(f,l(l({ref:t},p),{},{components:n})):o.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=c;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i[s]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<a;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},29590:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var o=n(87462),r=(n(67294),n(3905));const a={},l="Module Metadata",i={unversionedId:"tutorials/module_metadata",id:"tutorials/module_metadata",title:"Module Metadata",description:"Concepts",source:"@site/runtime/tutorials/module_metadata.md",sourceDirName:"tutorials",slug:"/tutorials/module_metadata",permalink:"/runtime/tutorials/module_metadata",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeTutorialsHome",previous:{title:"File System Events",permalink:"/runtime/tutorials/file_system_events"},next:{title:"How to use Apollo with Deno",permalink:"/runtime/tutorials/how_to_with_npm/apollo"}},m={},u=[{value:"Concepts",id:"concepts",level:2},{value:"Example",id:"example",level:2}],p={toc:u},s="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"module-metadata"},"Module Metadata"),(0,r.kt)("h2",{id:"concepts"},"Concepts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import.meta"},"import.meta"),"\ncan provide information on the context of the module."),(0,r.kt)("li",{parentName:"ul"},"The boolean ",(0,r.kt)("a",{parentName:"li",href:"https://deno.land/api?s=ImportMeta#prop_main"},"import.meta.main"),"\nwill let you know if the current module is the program entry point."),(0,r.kt)("li",{parentName:"ul"},"The string ",(0,r.kt)("a",{parentName:"li",href:"https://deno.land/api?s=ImportMeta#prop_url"},"import.meta.url")," will\ngive you the URL of the current module."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://deno.land/api?s=ImportMeta#prop_resolve"},"import.meta.resolve"),"\nallows you to resolve specifier relative to the current module. This function\ntakes into account an import map (if one was provided on startup)."),(0,r.kt)("li",{parentName:"ul"},"The string ",(0,r.kt)("a",{parentName:"li",href:"https://deno.land/api?s=Deno.mainModule"},"Deno.mainModule")," will\ngive you the URL of the main module entry point, i.e. the module invoked by\nthe deno runtime.")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"The example below uses two modules to show the difference between\n",(0,r.kt)("inlineCode",{parentName:"p"},"import.meta.url"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"import.meta.main")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Deno.mainModule"),". In this example,\n",(0,r.kt)("inlineCode",{parentName:"p"},"module_a.ts")," is the main module entry point:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="module_b.ts"',title:'"module_b.ts"'},'export function outputB() {\n  console.log("Module B\'s import.meta.url", import.meta.url);\n  console.log("Module B\'s mainModule url", Deno.mainModule);\n  console.log(\n    "Is module B the main module via import.meta.main?",\n    import.meta.main,\n  );\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="module_a.ts"',title:'"module_a.ts"'},'import { outputB } from "./module_b.ts";\n\nfunction outputA() {\n  console.log("Module A\'s import.meta.url", import.meta.url);\n  console.log("Module A\'s mainModule url", Deno.mainModule);\n  console.log(\n    "Is module A the main module via import.meta.main?",\n    import.meta.main,\n  );\n  console.log(\n    "Resolved specifier for ./module_b.ts",\n    import.meta.resolve("./module_b.ts"),\n  );\n}\n\noutputA();\nconsole.log("");\noutputB();\n')),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"module_a.ts")," is located in ",(0,r.kt)("inlineCode",{parentName:"p"},"/home/alice/deno")," then the output of\n",(0,r.kt)("inlineCode",{parentName:"p"},"deno run --allow-read module_a.ts")," is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Module A's import.meta.url file:///home/alice/deno/module_a.ts\nModule A's mainModule url file:///home/alice/deno/module_a.ts\nIs module A the main module via import.meta.main? true\nResolved specifier for ./module_b.ts file:///home/alice/deno/module_b.ts\n\nModule B's import.meta.url file:///home/alice/deno/module_b.ts\nModule B's mainModule url file:///home/alice/deno/module_a.ts\nIs module B the main module via import.meta.main? false\n")))}d.isMDXComponent=!0}}]);