"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[4468],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),p=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return o.createElement(l.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||r;return t?o.createElement(h,i(i({ref:n},u),{},{components:t})):o.createElement(h,i({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},82572:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=t(87462),a=(t(67294),t(3905));const r={},i="Deno Style Guide",s={unversionedId:"manual/references/contributing/style_guide",id:"manual/references/contributing/style_guide",title:"Deno Style Guide",description:"\u26a0\ufe0f Note that this is the style guide for internal runtime code in the Deno",source:"@site/runtime/manual/references/contributing/style_guide.md",sourceDirName:"manual/references/contributing",slug:"/manual/references/contributing/style_guide",permalink:"/runtime/manual/references/contributing/style_guide",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Release Schedule",permalink:"/runtime/manual/references/contributing/release_schedule"},next:{title:"Web Platform Test",permalink:"/runtime/manual/references/contributing/web_platform_tests"}},l={},p=[{value:"Copyright Headers",id:"copyright-headers",level:2},{value:"Use underscores, not dashes in filenames.",id:"use-underscores-not-dashes-in-filenames",level:2},{value:"Add tests for new features.",id:"add-tests-for-new-features",level:2},{value:"TODO Comments",id:"todo-comments",level:2},{value:"Meta-programming is discouraged. Including the use of Proxy.",id:"meta-programming-is-discouraged-including-the-use-of-proxy",level:2},{value:"Inclusive code",id:"inclusive-code",level:2},{value:"Rust",id:"rust",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Use TypeScript instead of JavaScript.",id:"use-typescript-instead-of-javascript",level:3},{value:"Do not use the filename <code>index.ts</code>/<code>index.js</code>.",id:"do-not-use-the-filename-indextsindexjs",level:3},{value:"Exported functions: max 2 args, put the rest into an options object.",id:"exported-functions-max-2-args-put-the-rest-into-an-options-object",level:3},{value:"Export all interfaces that are used as parameters to an exported member",id:"export-all-interfaces-that-are-used-as-parameters-to-an-exported-member",level:3},{value:"Minimize dependencies; do not make circular imports.",id:"minimize-dependencies-do-not-make-circular-imports",level:3},{value:"If a filename starts with an underscore: <code>_foo.ts</code>, do not link to it.",id:"if-a-filename-starts-with-an-underscore-_foots-do-not-link-to-it",level:3},{value:"Use JSDoc for exported symbols.",id:"use-jsdoc-for-exported-symbols",level:3},{value:"Resolve linting problems using directives",id:"resolve-linting-problems-using-directives",level:3},{value:"Each module should come with a test module.",id:"each-module-should-come-with-a-test-module",level:3},{value:"Unit Tests should be explicit.",id:"unit-tests-should-be-explicit",level:3},{value:"Top-level functions should not use arrow syntax.",id:"top-level-functions-should-not-use-arrow-syntax",level:3},{value:"<code>std</code>",id:"std",level:3},{value:"Do not depend on external code.",id:"do-not-depend-on-external-code",level:4},{value:"Document and maintain browser compatibility.",id:"document-and-maintain-browser-compatibility",level:4},{value:"Prefer <code>#</code> over <code>private</code>",id:"prefer--over-private",level:4},{value:"Naming convention",id:"naming-convention",level:4}],u={toc:p},d="wrapper";function c(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"deno-style-guide"},"Deno Style Guide"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f Note that this is the style guide for ",(0,a.kt)("strong",{parentName:"p"},"internal runtime code")," in the Deno\nruntime, and in the Deno standard library. This is not meant as a general\nstyle guide for users of Deno.")),(0,a.kt)("h2",{id:"copyright-headers"},"Copyright Headers"),(0,a.kt)("p",null,"Most modules in the repository should have the following copyright header:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.\n")),(0,a.kt)("p",null,"If the code originates elsewhere, ensure that the file has the proper copyright\nheaders. We only allow MIT, BSD, and Apache licensed code."),(0,a.kt)("h2",{id:"use-underscores-not-dashes-in-filenames"},"Use underscores, not dashes in filenames."),(0,a.kt)("p",null,"Example: Use ",(0,a.kt)("inlineCode",{parentName:"p"},"file_server.ts")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"file-server.ts"),"."),(0,a.kt)("h2",{id:"add-tests-for-new-features"},"Add tests for new features."),(0,a.kt)("p",null,"Each module should contain or be accompanied by tests for its public\nfunctionality."),(0,a.kt)("h2",{id:"todo-comments"},"TODO Comments"),(0,a.kt)("p",null,"TODO comments should usually include an issue or the author's github username in\nparentheses. Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO(ry): Add tests.\n// TODO(#123): Support Windows.\n// FIXME(#349): Sometimes panics.\n")),(0,a.kt)("h2",{id:"meta-programming-is-discouraged-including-the-use-of-proxy"},"Meta-programming is discouraged. Including the use of Proxy."),(0,a.kt)("p",null,"Be explicit, even when it means more code."),(0,a.kt)("p",null,"There are some situations where it may make sense to use such techniques, but in\nthe vast majority of cases it does not."),(0,a.kt)("h2",{id:"inclusive-code"},"Inclusive code"),(0,a.kt)("p",null,"Please follow the guidelines for inclusive code outlined at\n",(0,a.kt)("a",{parentName:"p",href:"https://chromium.googlesource.com/chromium/src/+/HEAD/styleguide/inclusive_code.md"},"https://chromium.googlesource.com/chromium/src/+/HEAD/styleguide/inclusive_code.md"),"."),(0,a.kt)("h2",{id:"rust"},"Rust"),(0,a.kt)("p",null,"Follow Rust conventions and be consistent with existing code."),(0,a.kt)("h2",{id:"typescript"},"TypeScript"),(0,a.kt)("p",null,"The TypeScript portion of the code base is the standard library ",(0,a.kt)("inlineCode",{parentName:"p"},"std"),"."),(0,a.kt)("h3",{id:"use-typescript-instead-of-javascript"},"Use TypeScript instead of JavaScript."),(0,a.kt)("h3",{id:"do-not-use-the-filename-indextsindexjs"},"Do not use the filename ",(0,a.kt)("inlineCode",{parentName:"h3"},"index.ts"),"/",(0,a.kt)("inlineCode",{parentName:"h3"},"index.js"),"."),(0,a.kt)("p",null,'Deno does not treat "index.js" or "index.ts" in a special way. By using these\nfilenames, it suggests that they can be left out of the module specifier when\nthey cannot. This is confusing.'),(0,a.kt)("p",null,"If a directory of code needs a default entry point, use the filename ",(0,a.kt)("inlineCode",{parentName:"p"},"mod.ts"),".\nThe filename ",(0,a.kt)("inlineCode",{parentName:"p"},"mod.ts")," follows Rust's convention, is shorter than ",(0,a.kt)("inlineCode",{parentName:"p"},"index.ts"),", and\ndoesn't come with any preconceived notions about how it might work."),(0,a.kt)("h3",{id:"exported-functions-max-2-args-put-the-rest-into-an-options-object"},"Exported functions: max 2 args, put the rest into an options object."),(0,a.kt)("p",null,"When designing function interfaces, stick to the following rules."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"A function that is part of the public API takes 0-2 required arguments, plus\n(if necessary) an options object (so max 3 total).")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Optional parameters should generally go into the options object."),(0,a.kt)("p",{parentName:"li"},"An optional parameter that's not in an options object might be acceptable if\nthere is only one, and it seems inconceivable that we would add more optional\nparameters in the future.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The 'options' argument is the only argument that is a regular 'Object'."),(0,a.kt)("p",{parentName:"li"},"Other arguments can be objects, but they must be distinguishable from a\n'plain' Object runtime, by having either:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"a distinguishing prototype (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"Array"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Map"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Date"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"class MyThing"),")."),(0,a.kt)("li",{parentName:"ul"},"a well-known symbol property (e.g. an iterable with ",(0,a.kt)("inlineCode",{parentName:"li"},"Symbol.iterator"),").")),(0,a.kt)("p",{parentName:"li"},"This allows the API to evolve in a backwards compatible way, even when the\nposition of the options object changes."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'// BAD: optional parameters not part of options object. (#2)\nexport function resolve(\n  hostname: string,\n  family?: "ipv4" | "ipv6",\n  timeout?: number,\n): IPAddress[] {}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'// GOOD.\nexport interface ResolveOptions {\n  family?: "ipv4" | "ipv6";\n  timeout?: number;\n}\nexport function resolve(\n  hostname: string,\n  options: ResolveOptions = {},\n): IPAddress[] {}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},"export interface Environment {\n  [key: string]: string;\n}\n\n// BAD: `env` could be a regular Object and is therefore indistinguishable\n// from an options object. (#3)\nexport function runShellWithEnv(cmdline: string, env: Environment): string {}\n\n// GOOD.\nexport interface RunShellOptions {\n  env: Environment;\n}\nexport function runShellWithEnv(\n  cmdline: string,\n  options: RunShellOptions,\n): string {}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// BAD: more than 3 arguments (#1), multiple optional parameters (#2).\nexport function renameSync(\n  oldname: string,\n  newname: string,\n  replaceExisting?: boolean,\n  followLinks?: boolean,\n) {}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// GOOD.\ninterface RenameOptions {\n  replaceExisting?: boolean;\n  followLinks?: boolean;\n}\nexport function renameSync(\n  oldname: string,\n  newname: string,\n  options: RenameOptions = {},\n) {}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// BAD: too many arguments. (#1)\nexport function pwrite(\n  fd: number,\n  buffer: ArrayBuffer,\n  offset: number,\n  length: number,\n  position: number,\n) {}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// BETTER.\nexport interface PWrite {\n  fd: number;\n  buffer: ArrayBuffer;\n  offset: number;\n  length: number;\n  position: number;\n}\nexport function pwrite(options: PWrite) {}\n")),(0,a.kt)("p",null,"Note: When one of the arguments is a function, you can adjust the order\nflexibly. See examples like ",(0,a.kt)("a",{parentName:"p",href:"https://deno.land/api?s=Deno.serve"},"Deno.serve"),",\n",(0,a.kt)("a",{parentName:"p",href:"https://deno.land/api?s=Deno.test"},"Deno.test"),",\n",(0,a.kt)("a",{parentName:"p",href:"https://deno.land/api?s=Deno.addSignalListener"},"Deno.addSignalListener"),". See\nalso ",(0,a.kt)("a",{parentName:"p",href:"https://twitter.com/jaffathecake/status/1646798390355697664"},"this post"),"."),(0,a.kt)("h3",{id:"export-all-interfaces-that-are-used-as-parameters-to-an-exported-member"},"Export all interfaces that are used as parameters to an exported member"),(0,a.kt)("p",null,"Whenever you are using interfaces that are included in the parameters or return\ntype of an exported member, you should export the interface that is used. Here\nis an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'// my_file.ts\nexport interface Person {\n  name: string;\n  age: number;\n}\n\nexport function createPerson(name: string, age: number): Person {\n  return { name, age };\n}\n\n// mod.ts\nexport { createPerson } from "./my_file.ts";\nexport type { Person } from "./my_file.ts";\n')),(0,a.kt)("h3",{id:"minimize-dependencies-do-not-make-circular-imports"},"Minimize dependencies; do not make circular imports."),(0,a.kt)("p",null,"Although ",(0,a.kt)("inlineCode",{parentName:"p"},"std")," has no external dependencies, we must still be careful to keep\ninternal dependencies simple and manageable. In particular, be careful not to\nintroduce circular imports."),(0,a.kt)("h3",{id:"if-a-filename-starts-with-an-underscore-_foots-do-not-link-to-it"},"If a filename starts with an underscore: ",(0,a.kt)("inlineCode",{parentName:"h3"},"_foo.ts"),", do not link to it."),(0,a.kt)("p",null,"There may be situations where an internal module is necessary but its API is not\nmeant to be stable or linked to. In this case prefix it with an underscore. By\nconvention, only files in its own directory should import it."),(0,a.kt)("h3",{id:"use-jsdoc-for-exported-symbols"},"Use JSDoc for exported symbols."),(0,a.kt)("p",null,"We strive for complete documentation. Every exported symbol ideally should have\na documentation line."),(0,a.kt)("p",null,"If possible, use a single line for the JSDoc. Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"/** foo does bar. */\nexport function foo() {\n  // ...\n}\n")),(0,a.kt)("p",null,"It is important that documentation is easily human-readable, but there is also a\nneed to provide additional styling information to ensure generated documentation\nis more rich text. Therefore JSDoc should generally follow markdown markup to\nenrich the text."),(0,a.kt)("p",null,"While markdown supports HTML tags, it is forbidden in JSDoc blocks."),(0,a.kt)("p",null,"Code string literals should be braced with the back-tick (","`",") instead of quotes.\nFor example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"/** Import something from the `deno` module. */\n")),(0,a.kt)("p",null,"Do not document function arguments unless they are non-obvious of their intent\n(though if they are non-obvious intent, the API should be considered anyways).\nTherefore ",(0,a.kt)("inlineCode",{parentName:"p"},"@param")," should generally not be used. If ",(0,a.kt)("inlineCode",{parentName:"p"},"@param")," is used, it should\nnot include the ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," as TypeScript is already strongly-typed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * Function with non-obvious param.\n * @param foo Description of non-obvious parameter.\n */\n")),(0,a.kt)("p",null,"Vertical spacing should be minimized whenever possible. Therefore, single-line\ncomments should be written as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"/** This is a good single-line JSDoc. */\n")),(0,a.kt)("p",null,"And not:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * This is a bad single-line JSDoc.\n */\n")),(0,a.kt)("p",null,"Code examples should utilize markdown format, like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/** A straightforward comment and an example:\n * ```ts\n * import { foo } from "deno";\n * foo("bar");\n * ```\n */\n')),(0,a.kt)("p",null,"Code examples should not contain additional comments and must not be indented.\nIt is already inside a comment. If it needs further comments, it is not a good\nexample."),(0,a.kt)("h3",{id:"resolve-linting-problems-using-directives"},"Resolve linting problems using directives"),(0,a.kt)("p",null,"Currently, the building process uses ",(0,a.kt)("inlineCode",{parentName:"p"},"dlint")," to validate linting problems in the\ncode. If the task requires code that is non-conformant to linter use\n",(0,a.kt)("inlineCode",{parentName:"p"},"deno-lint-ignore <code>")," directive to suppress the warning."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// deno-lint-ignore no-explicit-any\nlet x: any;\n")),(0,a.kt)("p",null,"This ensures the continuous integration process doesn't fail due to linting\nproblems, but it should be used scarcely."),(0,a.kt)("h3",{id:"each-module-should-come-with-a-test-module"},"Each module should come with a test module."),(0,a.kt)("p",null,"Every module with public functionality ",(0,a.kt)("inlineCode",{parentName:"p"},"foo.ts")," should come with a test module\n",(0,a.kt)("inlineCode",{parentName:"p"},"foo_test.ts"),". A test for a ",(0,a.kt)("inlineCode",{parentName:"p"},"std")," module should go in ",(0,a.kt)("inlineCode",{parentName:"p"},"std/tests")," due to their\ndifferent contexts; otherwise, it should just be a sibling to the tested module."),(0,a.kt)("h3",{id:"unit-tests-should-be-explicit"},"Unit Tests should be explicit."),(0,a.kt)("p",null,"For a better understanding of the tests, function should be correctly named as\nit's prompted throughout the test command. Like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"test myTestFunction ... ok\n")),(0,a.kt)("p",null,"Example of test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'import { assertEquals } from "https://deno.land/std@0.208.0/assert/mod.ts";\nimport { foo } from "./mod.ts";\n\nDeno.test("myTestFunction", function () {\n  assertEquals(foo(), { bar: "bar" });\n});\n')),(0,a.kt)("h3",{id:"top-level-functions-should-not-use-arrow-syntax"},"Top-level functions should not use arrow syntax."),(0,a.kt)("p",null,"Top-level functions should use the ",(0,a.kt)("inlineCode",{parentName:"p"},"function")," keyword. Arrow syntax should be\nlimited to closures."),(0,a.kt)("p",null,"Bad:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'export const foo = (): string => {\n  return "bar";\n};\n')),(0,a.kt)("p",null,"Good:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'export function foo(): string {\n  return "bar";\n}\n')),(0,a.kt)("h3",{id:"std"},(0,a.kt)("inlineCode",{parentName:"h3"},"std")),(0,a.kt)("h4",{id:"do-not-depend-on-external-code"},"Do not depend on external code."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"https://deno.land/std/")," is intended to be baseline functionality that all Deno\nprograms can rely on. We want to guarantee to users that this code does not\ninclude potentially unreviewed third-party code."),(0,a.kt)("h4",{id:"document-and-maintain-browser-compatibility"},"Document and maintain browser compatibility."),(0,a.kt)("p",null,"If a module is browser-compatible, include the following in the JSDoc at the top\nof the module:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// This module is browser-compatible.\n")),(0,a.kt)("p",null,"Maintain browser compatibility for such a module by either not using the global\n",(0,a.kt)("inlineCode",{parentName:"p"},"Deno")," namespace or feature-testing for it. Make sure any new dependencies are\nalso browser compatible."),(0,a.kt)("h4",{id:"prefer--over-private"},"Prefer ",(0,a.kt)("inlineCode",{parentName:"h4"},"#")," over ",(0,a.kt)("inlineCode",{parentName:"h4"},"private")),(0,a.kt)("p",null,"We prefer the private fields (",(0,a.kt)("inlineCode",{parentName:"p"},"#"),") syntax over ",(0,a.kt)("inlineCode",{parentName:"p"},"private")," keyword of TypeScript\nin the standard modules codebase. The private fields make the properties and\nmethods private even at runtime. On the other hand, ",(0,a.kt)("inlineCode",{parentName:"p"},"private")," keyword of\nTypeScript guarantee it private only at compile time and the fields are publicly\naccessible at runtime."),(0,a.kt)("p",null,"Good:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class MyClass {\n  #foo = 1;\n  #bar() {}\n}\n")),(0,a.kt)("p",null,"Bad:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class MyClass {\n  private foo = 1;\n  private bar() {}\n}\n")),(0,a.kt)("h4",{id:"naming-convention"},"Naming convention"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"camelCase")," for functions, methods, fields, and local variables. Use\n",(0,a.kt)("inlineCode",{parentName:"p"},"PascalCase")," for classes, types, interfaces, and enums. Use ",(0,a.kt)("inlineCode",{parentName:"p"},"UPPER_SNAKE_CASE"),"\nfor static top-level items, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"number"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"bigint"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"RegExp"),", arrays of static items, records of static keys and values, etc."),(0,a.kt)("p",null,"Good:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'function generateKey() {}\n\nlet currentValue = 0;\n\nclass KeyObject {}\n\ntype SharedKey = {};\n\nenum KeyType {\n  PublicKey,\n  PrivateKey,\n}\n\nconst KEY_VERSION = "1.0.0";\n\nconst KEY_MAX_LENGTH = 4294967295;\n\nconst KEY_PATTERN = /^[0-9a-f]+$/;\n')),(0,a.kt)("p",null,"Bad:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'function generate_key() {}\n\nlet current_value = 0;\n\nfunction GenerateKey() {}\n\nclass keyObject {}\n\ntype sharedKey = {};\n\nenum keyType {\n  publicKey,\n  privateKey,\n}\n\nconst key_version = "1.0.0";\n\nconst key_maxLength = 4294967295;\n\nconst KeyPattern = /^[0-9a-f]+$/;\n')),(0,a.kt)("p",null,"When the names are in ",(0,a.kt)("inlineCode",{parentName:"p"},"camelCase")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"PascalCase"),", always follow the rules of\nthem even when the parts of them are acronyms."),(0,a.kt)("p",null,"Note: Web APIs use uppercase acronyms (",(0,a.kt)("inlineCode",{parentName:"p"},"JSON"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"URL"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"URL.createObjectURL()"),"\netc.). Deno Standard Library does not follow this convention."),(0,a.kt)("p",null,"Good:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class HttpObject {\n}\n")),(0,a.kt)("p",null,"Bad:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class HTTPObject {\n}\n")),(0,a.kt)("p",null,"Good:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function convertUrl(url: URL) {\n  return url.href;\n}\n")),(0,a.kt)("p",null,"Bad:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function convertURL(url: URL) {\n  return url.href;\n}\n")))}c.isMDXComponent=!0}}]);