"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[921],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),c=r,h=d["".concat(p,".").concat(c)]||d[c]||m[c]||o;return t?a.createElement(h,i(i({ref:n},u),{},{components:t})):a.createElement(h,i({ref:n},u))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=c;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},73724:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=t(87462),r=(t(67294),t(3905));const o={},i="How to use Vue with Deno",s={unversionedId:"tutorials/how_to_with_npm/vue",id:"tutorials/how_to_with_npm/vue",title:"How to use Vue with Deno",description:"Vue is a progressive front-end JavaScript framework, built",source:"@site/runtime/tutorials/how_to_with_npm/vue.md",sourceDirName:"tutorials/how_to_with_npm",slug:"/tutorials/how_to_with_npm/vue",permalink:"/runtime/tutorials/how_to_with_npm/vue",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeTutorialsHome",previous:{title:"How to Use Redis with Deno",permalink:"/runtime/tutorials/how_to_with_npm/redis"}},p={},l=[{value:"Run <code>npm:create-vite-extra</code>",id:"run-npmcreate-vite-extra",level:2},{value:"Add a backend",id:"add-a-backend",level:2},{value:"Add Vue components",id:"add-vue-components",level:2},{value:"Maintain state with <code>store</code>",id:"maintain-state-with-store",level:2},{value:"Update Vue components",id:"update-vue-components",level:2},{value:"Add routing",id:"add-routing",level:2}],u={toc:l},d="wrapper";function m(e){let{components:n,...o}=e;return(0,r.kt)(d,(0,a.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-use-vue-with-deno"},"How to use Vue with Deno"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://vuejs.org/"},"Vue")," is a progressive front-end JavaScript framework, built\nfor performance and versatility."),(0,r.kt)("p",null,"This How To guide will show you how to create a simple app using Deno, Vite, and\nVue."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/denoland/examples/tree/main/with-vue"},"View source")," or\n",(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=MDPauM8fZDE"},"follow the video guide"),"."),(0,r.kt)("h2",{id:"run-npmcreate-vite-extra"},"Run ",(0,r.kt)("inlineCode",{parentName:"h2"},"npm:create-vite-extra")),(0,r.kt)("p",null,"We'll use Vite to scaffold our Vue app. First, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"deno run --allow-read --allow-write --allow-env npm:create-vite-extra@latest\n")),(0,r.kt)("p",null,'Name your project, then select "deno-vue".'),(0,r.kt)("p",null,"Then, ",(0,r.kt)("inlineCode",{parentName:"p"},"cd")," into your new project and run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"deno task dev\n")),(0,r.kt)("p",null,"You should now be able to view your default Deno and Vue app in your browser:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"default vue app",src:t(6840).Z,width:"1072",height:"662"})),(0,r.kt)("h2",{id:"add-a-backend"},"Add a backend"),(0,r.kt)("p",null,"The next step is to add a backend API. We'll create a very simple API that\nreturns information about dinosaurs."),(0,r.kt)("p",null,"In the directory, let's create an ",(0,r.kt)("inlineCode",{parentName:"p"},"api")," folder. In that folder, we'll create a\n",(0,r.kt)("inlineCode",{parentName:"p"},"main.ts")," file, which will run the server, and a ",(0,r.kt)("inlineCode",{parentName:"p"},"data.json"),", which is the hard\ncoded data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir api && touch api/data.json && touch api/main.ts\n")),(0,r.kt)("p",null,"Copy and paste\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/denoland/deno-vue-example/blob/main/api/data.json"},"this json file"),"\ninto your ",(0,r.kt)("inlineCode",{parentName:"p"},"api/data.json"),"."),(0,r.kt)("p",null,"Then, let's update ",(0,r.kt)("inlineCode",{parentName:"p"},"api/main.ts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { Application, Router } from "https://deno.land/x/oak/mod.ts";\nimport { oakCors } from "https://deno.land/x/cors/mod.ts";\nimport data from "./data.json" assert { type: "json" };\n\nconst router = new Router();\nrouter\n  .get("/", (context) => {\n    context.response.body = "Welcome to dinosaur API!";\n  })\n  .get("/api", (context) => {\n    context.response.body = data;\n  })\n  .get("/api/:dinosaur", (context) => {\n    if (context?.params?.dinosaur) {\n      const found = data.find((item) =>\n        item.name.toLowerCase() === context.params.dinosaur.toLowerCase()\n      );\n      if (found) {\n        context.response.body = found;\n      } else {\n        context.response.body = "No dinosaurs found.";\n      }\n    }\n  });\n\nconst app = new Application();\napp.use(oakCors()); // Enable CORS for All Routes\napp.use(router.routes());\napp.use(router.allowedMethods());\n\nawait app.listen({ port: 8000 });\n')),(0,r.kt)("p",null,"This is a very simple API server using ",(0,r.kt)("a",{parentName:"p",href:"https://deno.land/x/oak"},(0,r.kt)("inlineCode",{parentName:"a"},"oak"))," that\nwill return dinosaur information based on the route. Let's start the API server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"deno run --allow-env --allow-net api/main.ts\n")),(0,r.kt)("p",null,"If we go to ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost:8000/api"),", we see:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"json response of dinosaurs",src:t(13431).Z,width:"1072",height:"662"})),(0,r.kt)("p",null,"Lookin' good so far."),(0,r.kt)("h2",{id:"add-vue-components"},"Add Vue components"),(0,r.kt)("p",null,"Let's update ",(0,r.kt)("inlineCode",{parentName:"p"},"src/components"),". We'll add the files:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HomePage.vue"),", the component for the home page"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Dinosaurs.vue"),", the component that lists all dinosaur names as anchor links,\nand"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Dinosaur.vue"),", the component that shows an individual dinosaur's name and\ndescription")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"touch src/components/HomePage.vue src/components/Dinosaurs.vue src/components/Dinosaur.vue\n")),(0,r.kt)("p",null,"Before we create the components, let's add some state management."),(0,r.kt)("h2",{id:"maintain-state-with-store"},"Maintain state with ",(0,r.kt)("inlineCode",{parentName:"h2"},"store")),(0,r.kt)("p",null,"In order to maintain state across our ",(0,r.kt)("inlineCode",{parentName:"p"},"<Dinosaur>")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"<Dinosaurs>")," components,\nwe'll use ",(0,r.kt)("a",{parentName:"p",href:"https://vuejs.org/guide/scaling-up/state-management.html"},"Vue store"),".\nNote for more complex state management, check out the Vue-endorsed\n",(0,r.kt)("a",{parentName:"p",href:"https://pinia.vuejs.org/"},"Pinia")," library."),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"src/store.js")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"touch src/store.js\n")),(0,r.kt)("p",null,"And in it, let's add:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { reactive } from "vue";\n\nexport const store = reactive({\n  dinosaur: {},\n  setDinosaur(name, description) {\n    this.dinosaur.name = name;\n    this.dinosaur.description = description;\n  },\n});\n')),(0,r.kt)("p",null,"We'll import ",(0,r.kt)("inlineCode",{parentName:"p"},"store")," into both ",(0,r.kt)("inlineCode",{parentName:"p"},"Dinosaurs.vue")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Dinosaur.vue")," to set and\nretrieve dinosaur name and description."),(0,r.kt)("h2",{id:"update-vue-components"},"Update Vue components"),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"Dinosaurs.vue"),", we'll do three things:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"send a ",(0,r.kt)("inlineCode",{parentName:"li"},"GET")," request to our API and return that as ",(0,r.kt)("inlineCode",{parentName:"li"},"dinosaurs")),(0,r.kt)("li",{parentName:"ul"},"iterate through ",(0,r.kt)("inlineCode",{parentName:"li"},"dinosaurs")," and render each ",(0,r.kt)("inlineCode",{parentName:"li"},"dinosaur")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"<router-link>")," that\npoints to the ",(0,r.kt)("inlineCode",{parentName:"li"},"<Dinosaur>")," component"),(0,r.kt)("li",{parentName:"ul"},"add ",(0,r.kt)("inlineCode",{parentName:"li"},"store.setDinosaur()")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"@click")," on each ",(0,r.kt)("inlineCode",{parentName:"li"},"dinosaur"),", which will set the\n",(0,r.kt)("inlineCode",{parentName:"li"},"store"))),(0,r.kt)("p",null,"Here is the complete code below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'<script>\nimport { ref } from \'vue\'\nimport { store } from \'../store.js\'\nexport default ({\n  async setup() {\n    const res = await fetch("http://localhost:8000/api")\n    const dinosaurs = await res.json();\n    return {\n      dinosaurs\n    }\n  },\n  data() {\n    return {\n      store\n    }\n  }\n})\n<\/script>\n\n<template>\n  <div class="container">\n    <div v-for="dinosaur in dinosaurs" class="dinosaur-wrapper">\n      <span class="dinosaur">\n        <router-link :to="{ name: \'Dinosaur\', params: { dinosaur: `${dinosaur.name.toLowerCase()}` }}">\n          <span @click="store.setDinosaur(dinosaur.name, dinosaur.description)">\n            {{dinosaur.name}}\n          </span>\n        </router-link>\n      </span>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.dinosaur {\n}\n.dinosaur-wrapper {\n  display: inline-block;\n  margin: 0.15rem 1rem;\n  padding: 0.15rem 1rem;\n}\n.container {\n  text-align: left;\n}\n</style>\n')),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"Dinosaur.vue"),", we'll add:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"importing ",(0,r.kt)("inlineCode",{parentName:"li"},"store")),(0,r.kt)("li",{parentName:"ul"},"rendering ",(0,r.kt)("inlineCode",{parentName:"li"},"store.dinosaur")," in the HTML")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<script>\nimport { store } from '../store.js';\nexport default {\n  data() {\n    return {\n      store\n    }\n  }\n}\n<\/script>\n\n<template>\n  Name: {{ store.dinosaur.name }}\n  <br />\n  Description: {{ store.dinosaur.description }}\n</template>\n")),(0,r.kt)("p",null,"Next, we'll update ",(0,r.kt)("inlineCode",{parentName:"p"},"HomePage.vue"),". Since the ",(0,r.kt)("inlineCode",{parentName:"p"},"Dinosaurs")," component needs to\nfetch the data from the API, we'll use\n",(0,r.kt)("a",{parentName:"p",href:"https://vuejs.org/guide/built-ins/suspense.html"},(0,r.kt)("inlineCode",{parentName:"a"},"<Suspense>")),", which manages\nasync dependencies in a component tree."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'<script>\nimport { ref } from \'vue\'\nimport Dinosaurs from \'./Dinosaurs.vue\'\nexport default {\n  components: {\n    Dinosaurs\n  }\n}\n<\/script>\n\n<template>\n  <Suspense>\n    <template #default>\n      <Dinosaurs />\n    </template>\n    <template #fallback>\n      <div>Loading...</div>\n    </template>\n  </Suspense>\n\n  <p>\n    Check out\n    <a href="https://vuejs.org/guide/quick-start.html#local" target="_blank"\n      >create-vue</a\n    >, the official Vue + Vite starter\n  </p>\n  <p class="read-the-docs">Learn more about using Deno and Vite.</p>\n</template>\n\n<style scoped>\n.read-the-docs {\n  color: #888;\n}\n</style>\n')),(0,r.kt)("p",null,"Tying it all together, let's update ",(0,r.kt)("inlineCode",{parentName:"p"},"src/App.vue"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<template>\n  <router-view />\n</template>;\n")),(0,r.kt)("h2",{id:"add-routing"},"Add routing"),(0,r.kt)("p",null,"You'll notice that we have used ",(0,r.kt)("inlineCode",{parentName:"p"},"<router-link>")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"<router-view>"),". These\ncomponents are part of the ",(0,r.kt)("a",{parentName:"p",href:"https://router.vuejs.org/"},(0,r.kt)("inlineCode",{parentName:"a"},"vue-router")," library"),",\nwhich we'll have to setup and configure in another file."),(0,r.kt)("p",null,"First, let's import ",(0,r.kt)("inlineCode",{parentName:"p"},"vue-router")," in our ",(0,r.kt)("inlineCode",{parentName:"p"},"vite.config.mjs")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { defineConfig } from "npm:vite@^3.1.3";\nimport vue from "npm:@vitejs/plugin-vue@^3.2.39";\n\nimport "npm:vue@^3.2.39";\nimport "npm:vue-router@4";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [vue()],\n});\n')),(0,r.kt)("p",null,"Next, let's create a folder named ",(0,r.kt)("inlineCode",{parentName:"p"},"router"),". In it, let's create ",(0,r.kt)("inlineCode",{parentName:"p"},"index.ts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mkdir router && touch router/index.ts\n")),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"router/index.ts"),", we'll create ",(0,r.kt)("inlineCode",{parentName:"p"},"router"),", which contains information about\neach route and their component, and export it. For more information on using\n",(0,r.kt)("inlineCode",{parentName:"p"},"vue-router"),", check out their ",(0,r.kt)("a",{parentName:"p",href:"https://router.vuejs.org/guide"},"guide"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createRouter, createWebHistory } from "vue-router";\nimport HomePage from "../components/HomePage.vue";\nimport Dinosaur from "../components/Dinosaur.vue";\n\nconst routes = [\n  {\n    path: "/",\n    name: "Home",\n    component: HomePage,\n  },\n  {\n    path: "/:dinosaur",\n    name: "Dinosaur",\n    component: Dinosaur,\n    props: true,\n  },\n];\n\nconst router = createRouter({\n  history: createWebHistory("/"),\n  routes,\n});\n\nexport default router;\n')),(0,r.kt)("p",null,"Next, in our ",(0,r.kt)("inlineCode",{parentName:"p"},"src/main.ts")," file, which contains all of the logic for the\nfrontend app, we'll have to import and use ",(0,r.kt)("inlineCode",{parentName:"p"},"router"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createApp } from "vue";\nimport "./style.css";\nimport App from "./App.vue";\nimport router from "./router/index.ts";\n\nconst app = createApp(App);\napp.use(router);\napp.mount("#app");\n')),(0,r.kt)("p",null,"Let's run it and see what we get so far:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Clicking on a dinosaur to get to an individual dinosaur page",src:t(50659).Z,width:"954",height:"550"})),(0,r.kt)("p",null,"Awesome!"))}m.isMDXComponent=!0},13431:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/api-response-25c9245e09d56ade97ec4ee03def8d17.png"},6840:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/default-vue-app-8a0ffbc131c2cba6f591435fee912689.png"},50659:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/vue-demo-f7efdc8c961fd0a77f2d1ebf36558380.gif"}}]);