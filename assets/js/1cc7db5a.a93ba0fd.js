"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[4012],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=l(t),c=a,h=d["".concat(i,".").concat(c)]||d[c]||m[c]||o;return t?r.createElement(h,s(s({ref:n},u),{},{components:t})):r.createElement(h,s({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=c;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p[d]="string"==typeof e?e:a,s[1]=p;for(var l=2;l<o;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},55685:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=t(87462),a=(t(67294),t(3905));const o={},s="How to use Express with Deno",p={unversionedId:"manual/node/how_to_with_npm/express",id:"manual/node/how_to_with_npm/express",title:"How to use Express with Deno",description:"Express is a popular web framework known for being",source:"@site/runtime/manual/node/how_to_with_npm/express.md",sourceDirName:"manual/node/how_to_with_npm",slug:"/manual/node/how_to_with_npm/express",permalink:"/runtime/manual/node/how_to_with_npm/express",draft:!1,tags:[],version:"current",frontMatter:{}},i={},l=[{value:"Create <code>main.ts</code>",id:"create-maints",level:2},{value:"Add data and routes",id:"add-data-and-routes",level:2}],u={toc:l},d="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-use-express-with-deno"},"How to use Express with Deno"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://expressjs.com/"},"Express")," is a popular web framework known for being\nsimple and unopinionated with a large ecosystem of middleware."),(0,a.kt)("p",null,"This How To guide will show you how to create a simple API using Express and\nDeno."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/denoland/examples/tree/main/with-express"},"View source here.")),(0,a.kt)("h2",{id:"create-maints"},"Create ",(0,a.kt)("inlineCode",{parentName:"h2"},"main.ts")),(0,a.kt)("p",null,"Let's create ",(0,a.kt)("inlineCode",{parentName:"p"},"main.ts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"touch main.ts\n")),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"main.ts"),", let's create a simple server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'// @deno-types="npm:@types/express@4.17.15"\nimport express from "npm:express@4.18.2";\n\nconst app = express();\n\napp.get("/", (req, res) => {\n  res.send("Welcome to the Dinosaur API!");\n});\n\napp.listen(8000);\n')),(0,a.kt)("p",null,"Let's run this server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"deno run -A main.ts\n")),(0,a.kt)("p",null,"And point our browser to ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost:8000"),". You should see:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Welcome to the Dinosaur API!\n")),(0,a.kt)("h2",{id:"add-data-and-routes"},"Add data and routes"),(0,a.kt)("p",null,"The next step here is to add some data. We'll use this Dinosaur data that we\nfound from ",(0,a.kt)("a",{parentName:"p",href:"https://www.thoughtco.com/dinosaurs-a-to-z-1093748"},"this article"),".\nFeel free to\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/denoland/examples/blob/main/with-express/data.json"},"copy it from here"),"."),(0,a.kt)("p",null,"Let's create ",(0,a.kt)("inlineCode",{parentName:"p"},"data.json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"touch data.json\n")),(0,a.kt)("p",null,"And paste in the dinosaur data."),(0,a.kt)("p",null,"Next, let's import that data into ",(0,a.kt)("inlineCode",{parentName:"p"},"main.ts"),". Let's add this line at the top of\nthe file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'import data from "./data.json" assert { type: "json" };\n')),(0,a.kt)("p",null,"Then, we can create the routes to access that data. To keep it simple, let's\njust define ",(0,a.kt)("inlineCode",{parentName:"p"},"GET")," handlers for ",(0,a.kt)("inlineCode",{parentName:"p"},"/api/")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"/api/:dinosaur"),". Add the below after\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"const app = express();")," line:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'app.get("/", (req, res) => {\n  res.send("Welcome to the Dinosaur API!");\n});\n\napp.get("/api", (req, res) => {\n  res.send(data);\n});\n\napp.get("/api/:dinosaur", (req, res) => {\n  if (req?.params?.dinosaur) {\n    const found = data.find(item => item.name.toLowerCase() === req.params.dinosaur.toLowerCase());\n    if (found) {\n      res.send(found)\n    } else {\n      res.send("No dinosaurs found.");\n    }\n  }\n});\n\napp.listen(8000);\n')),(0,a.kt)("p",null,"Let's run the server with ",(0,a.kt)("inlineCode",{parentName:"p"},"deno run -A main.ts")," and check out\n",(0,a.kt)("inlineCode",{parentName:"p"},"localhost:8000/api"),". You should see a list of dinosaurs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json,",metastring:"ignore",ignore:!0},'[\n  {\n    "name": "Aardonyx",\n    "description": "An early stage in the evolution of sauropods."\n  },\n  {\n    "name": "Abelisaurus",\n    "description": "\\"Abel\'s lizard\\" has been reconstructed from a single skull."\n  },\n  {\n    "name": "Abrictosaurus",\n    "description": "An early relative of Heterodontosaurus."\n  },\n...\n')),(0,a.kt)("p",null,"And when we go to ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost:8000/api/aardonyx"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json,",metastring:"ignore",ignore:!0},'{\n  "name": "Aardonyx",\n  "description": "An early stage in the evolution of sauropods."\n}\n')),(0,a.kt)("p",null,"Great!"))}m.isMDXComponent=!0}}]);