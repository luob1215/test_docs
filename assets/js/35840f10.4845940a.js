"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[7405],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),p=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(i.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(t),g=a,m=c["".concat(i,".").concat(g)]||c[g]||d[g]||o;return t?r.createElement(m,s(s({ref:n},u),{},{components:t})):r.createElement(m,s({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=g;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[c]="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},65594:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const o={},s="Handle OS Signals",l={unversionedId:"tutorials/os_signals",id:"tutorials/os_signals",title:"Handle OS Signals",description:"\u26a0\ufe0f Windows only supports listening for SIGINT and SIGBREAK as of Deno v1.23.",source:"@site/runtime/tutorials/os_signals.md",sourceDirName:"tutorials",slug:"/tutorials/os_signals",permalink:"/runtime/tutorials/os_signals",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeTutorialsHome",previous:{title:"Creating a Subprocess",permalink:"/runtime/tutorials/subprocess"},next:{title:"File System Events",permalink:"/runtime/tutorials/file_system_events"}},i={},p=[{value:"Concepts",id:"concepts",level:2},{value:"Set up an OS signal listener",id:"set-up-an-os-signal-listener",level:2},{value:"Async iterator example",id:"async-iterator-example",level:2}],u={toc:p},c="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"handle-os-signals"},"Handle OS Signals"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f Windows only supports listening for SIGINT and SIGBREAK as of Deno v1.23.")),(0,a.kt)("h2",{id:"concepts"},"Concepts"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://deno.land/api?s=Deno.addSignalListener"},"Deno.addSignalListener()")," can\nbe used to capture and monitor OS signals."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://deno.land/api?s=Deno.removeSignalListener"},"Deno.removeSignalListener()"),"\ncan be used to stop watching the signal.")),(0,a.kt)("h2",{id:"set-up-an-os-signal-listener"},"Set up an OS signal listener"),(0,a.kt)("p",null,"APIs for handling OS signals are modelled after already familiar\n",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"},(0,a.kt)("inlineCode",{parentName:"a"},"addEventListener")),"\nand\n",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener"},(0,a.kt)("inlineCode",{parentName:"a"},"removeEventListener")),"\nAPIs."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f Note that listening for OS signals doesn't prevent event loop from\nfinishing, ie. if there are no more pending async operations the process will\nexit.")),(0,a.kt)("p",null,"You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"Deno.addSignalListener()")," function for handling OS signals:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * add_signal_listener.ts\n */\nconsole.log("Press Ctrl-C to trigger a SIGINT signal");\n\nDeno.addSignalListener("SIGINT", () => {\n  console.log("interrupted!");\n  Deno.exit();\n});\n\n// Add a timeout to prevent process exiting immediately.\nsetTimeout(() => {}, 5000);\n')),(0,a.kt)("p",null,"Run with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"deno run add_signal_listener.ts\n")),(0,a.kt)("p",null,"You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"Deno.removeSignalListener()")," function to unregister previously\nadded signal handler."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * signal_listeners.ts\n */\nconsole.log("Press Ctrl-C to trigger a SIGINT signal");\n\nconst sigIntHandler = () => {\n  console.log("interrupted!");\n  Deno.exit();\n};\nDeno.addSignalListener("SIGINT", sigIntHandler);\n\n// Add a timeout to prevent process existing immediately.\nsetTimeout(() => {}, 5000);\n\n// Stop listening for a signal after 1s.\nsetTimeout(() => {\n  Deno.removeSignalListener("SIGINT", sigIntHandler);\n}, 1000);\n')),(0,a.kt)("p",null,"Run with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"deno run signal_listeners.ts\n")),(0,a.kt)("h2",{id:"async-iterator-example"},"Async iterator example"),(0,a.kt)("p",null,"If you prefer to handle signals using an async iterator, you can use\n",(0,a.kt)("a",{parentName:"p",href:"https://deno.land/std/signal/mod.ts"},(0,a.kt)("inlineCode",{parentName:"a"},"signal()"))," API available in ",(0,a.kt)("inlineCode",{parentName:"p"},"deno_std"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * async_iterator_signal.ts\n */\nimport { signal } from "https://deno.land/std/signal/mod.ts";\n\nconst sig = signal("SIGUSR1", "SIGINT");\n\n// Add a timeout to prevent process exiting immediately.\nsetTimeout(() => {}, 5000);\n\nfor await (const _ of sig) {\n  console.log("interrupt or usr1 signal received");\n}\n')),(0,a.kt)("p",null,"Run with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"deno run async_iterator_signal.ts\n")))}d.isMDXComponent=!0}}]);