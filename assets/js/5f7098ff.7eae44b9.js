"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[9099],{3905:(e,n,r)=>{r.d(n,{Zo:()=>m,kt:()=>d});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),p=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},m=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(r),c=a,d=u["".concat(l,".").concat(c)]||u[c]||k[c]||o;return r?t.createElement(d,s(s({ref:n},m),{},{components:r})):t.createElement(d,s({ref:n},m))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=c;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}c.displayName="MDXCreateElement"},51989:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>k,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var t=r(87462),a=(r(67294),r(3905));const o={},s="Workers",i={unversionedId:"manual/runtime/workers",id:"manual/runtime/workers",title:"Workers",description:"Deno supports",source:"@site/runtime/manual/runtime/workers.md",sourceDirName:"manual/runtime",slug:"/manual/runtime/workers",permalink:"/runtime/manual/runtime/workers",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Web Storage API",permalink:"/runtime/manual/runtime/web_storage_api"},next:{title:"Node and npm modules",permalink:"/runtime/manual/node/"}},l={},p=[{value:"Instantiation permissions",id:"instantiation-permissions",level:2},{value:"Using Deno in worker",id:"using-deno-in-worker",level:2},{value:"Specifying worker permissions",id:"specifying-worker-permissions",level:2}],m={toc:p},u="wrapper";function k(e){let{components:n,...r}=e;return(0,a.kt)(u,(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"workers"},"Workers"),(0,a.kt)("p",null,"Deno supports\n",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker"},(0,a.kt)("inlineCode",{parentName:"a"},"Web Worker API")),"."),(0,a.kt)("p",null,"Workers can be used to run code on multiple threads. Each instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"Worker"),"\nis run on a separate thread, dedicated only to that worker."),(0,a.kt)("p",null,"Currently Deno supports only ",(0,a.kt)("inlineCode",{parentName:"p"},"module")," type workers; thus it's essential to pass\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},'type: "module"')," option when creating a new worker."),(0,a.kt)("p",null,"Use of relative module specifiers in the main worker are only supported with\n",(0,a.kt)("inlineCode",{parentName:"p"},"--location <href>")," passed on the CLI. This is not recommended for portability.\nYou can instead use the ",(0,a.kt)("inlineCode",{parentName:"p"},"URL")," constructor and ",(0,a.kt)("inlineCode",{parentName:"p"},"import.meta.url")," to easily create\na specifier for some nearby script. Dedicated workers, however, have a location\nand this capability by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// Good\nnew Worker(new URL("./worker.js", import.meta.url).href, { type: "module" });\n\n// Bad\nnew Worker(new URL("./worker.js", import.meta.url).href);\nnew Worker(new URL("./worker.js", import.meta.url).href, { type: "classic" });\nnew Worker("./worker.js", { type: "module" });\n')),(0,a.kt)("p",null,"As with regular modules, you can use top-level ",(0,a.kt)("inlineCode",{parentName:"p"},"await")," in worker modules.\nHowever, you should be careful to always register the message handler before the\nfirst ",(0,a.kt)("inlineCode",{parentName:"p"},"await"),", since messages can be lost otherwise. This is not a bug in Deno,\nit's just an unfortunate interaction of features, and it also happens in all\nbrowsers that support module workers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'import { delay } from "https://deno.land/std@0.208.0/async/delay.ts";\n\n// First await: waits for a second, then continues running the module.\nawait delay(1000);\n\n// The message handler is only set after that 1s delay, so some of the messages\n// that reached the worker during that second might have been fired when no\n// handler was registered.\nself.onmessage = (evt) => {\n  console.log(evt.data);\n};\n')),(0,a.kt)("h2",{id:"instantiation-permissions"},"Instantiation permissions"),(0,a.kt)("p",null,"Creating a new ",(0,a.kt)("inlineCode",{parentName:"p"},"Worker")," instance is similar to a dynamic import; therefore Deno\nrequires appropriate permission for this action."),(0,a.kt)("p",null,"For workers using local modules; ",(0,a.kt)("inlineCode",{parentName:"p"},"--allow-read")," permission is required:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"main.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'new Worker(new URL("./worker.ts", import.meta.url).href, { type: "module" });\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"worker.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'console.log("hello world");\nself.close();\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'$ deno run main.ts\nerror: Uncaught PermissionDenied: read access to "./worker.ts", run again with the --allow-read flag\n\n$ deno run --allow-read main.ts\nhello world\n')),(0,a.kt)("p",null,"For workers using remote modules; ",(0,a.kt)("inlineCode",{parentName:"p"},"--allow-net")," permission is required:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"main.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'new Worker("https://example.com/worker.ts", { type: "module" });\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"worker.ts")," (at ",(0,a.kt)("a",{parentName:"p",href:"https://example.com/worker.ts"},"https://example.com/worker.ts"),")"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'console.log("hello world");\nself.close();\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'$ deno run main.ts\nerror: Uncaught PermissionDenied: net access to "https://example.com/worker.ts", run again with the --allow-net flag\n\n$ deno run --allow-net main.ts\nhello world\n')),(0,a.kt)("h2",{id:"using-deno-in-worker"},"Using Deno in worker"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Starting in v1.22 the ",(0,a.kt)("inlineCode",{parentName:"p"},"Deno")," namespace is available in worker scope by\ndefault. To enable the namespace in earlier versions pass\n",(0,a.kt)("inlineCode",{parentName:"p"},"deno: { namespace: true }")," when creating a new worker.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"main.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const worker = new Worker(new URL("./worker.js", import.meta.url).href, {\n  type: "module",\n});\n\nworker.postMessage({ filename: "./log.txt" });\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"worker.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js,",metastring:"ignore",ignore:!0},"self.onmessage = async (e) => {\n  const { filename } = e.data;\n  const text = await Deno.readTextFile(filename);\n  console.log(text);\n  self.close();\n};\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"log.txt")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"hello world\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ deno run --allow-read main.js\nhello world\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Starting in v1.23 ",(0,a.kt)("inlineCode",{parentName:"p"},"Deno.exit()")," no longer exits the process with the provided\nexit code. Instead is an alias to ",(0,a.kt)("inlineCode",{parentName:"p"},"self.close()"),", which causes only the worker\nto shutdown. This better aligns with the Web platform, as there is no way in\nthe browser for a worker to close the page.")),(0,a.kt)("h2",{id:"specifying-worker-permissions"},"Specifying worker permissions"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This is an unstable Deno feature. Learn more about\n",(0,a.kt)("a",{parentName:"p",href:"/runtime/manual/runtime/stability"},"unstable features"),".")),(0,a.kt)("p",null,"The permissions available for the worker are analogous to the CLI permission\nflags, meaning every permission enabled there can be disabled at the level of\nthe Worker API. You can find a more detailed description of each of the\npermission options ",(0,a.kt)("a",{parentName:"p",href:"/runtime/manual/basics/permissions"},"here"),"."),(0,a.kt)("p",null,"By default a worker will inherit permissions from the thread it was created in,\nhowever in order to allow users to limit the access of this worker we provide\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"deno.permissions")," option in the worker API."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"For permissions that support granular access you can pass in a list of the\ndesired resources the worker will have access to, and for those who only have\nthe on/off option you can pass true/false respectively."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const worker = new Worker(new URL("./worker.js", import.meta.url).href, {\n  type: "module",\n  deno: {\n    permissions: {\n      net: [\n        "deno.land",\n      ],\n      read: [\n        new URL("./file_1.txt", import.meta.url),\n        new URL("./file_2.txt", import.meta.url),\n      ],\n      write: false,\n    },\n  },\n});\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Granular access permissions receive both absolute and relative routes as\narguments, however take into account that relative routes will be resolved\nrelative to the file the worker is instantiated in, not the path the worker\nfile is currently in"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const worker = new Worker(\n  new URL("./worker/worker.js", import.meta.url).href,\n  {\n    type: "module",\n    deno: {\n      permissions: {\n        read: [\n          "/home/user/Documents/deno/worker/file_1.txt",\n          "./worker/file_2.txt",\n        ],\n      },\n    },\n  },\n);\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Both ",(0,a.kt)("inlineCode",{parentName:"p"},"deno.permissions")," and its children support the option ",(0,a.kt)("inlineCode",{parentName:"p"},'"inherit"'),", which\nimplies it will borrow its parent permissions."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// This worker will inherit its parent permissions\nconst worker = new Worker(new URL("./worker.js", import.meta.url).href, {\n  type: "module",\n  deno: {\n    permissions: "inherit",\n  },\n});\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// This worker will inherit only the net permissions of its parent\nconst worker = new Worker(new URL("./worker.js", import.meta.url).href, {\n  type: "module",\n  deno: {\n    permissions: {\n      env: false,\n      hrtime: false,\n      net: "inherit",\n      ffi: false,\n      read: false,\n      run: false,\n      write: false,\n    },\n  },\n});\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Not specifying the ",(0,a.kt)("inlineCode",{parentName:"p"},"deno.permissions")," option or one of its children will cause\nthe worker to inherit by default."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// This worker will inherit its parent permissions\nconst worker = new Worker(new URL("./worker.js", import.meta.url).href, {\n  type: "module",\n});\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// This worker will inherit all the permissions of its parent BUT net\nconst worker = new Worker(new URL("./worker.js", import.meta.url).href, {\n  type: "module",\n  deno: {\n    permissions: {\n      net: false,\n    },\n  },\n});\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"You can disable the permissions of the worker all together by passing ",(0,a.kt)("inlineCode",{parentName:"p"},'"none"'),"\nto the ",(0,a.kt)("inlineCode",{parentName:"p"},"deno.permissions")," option."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// This worker will not have any permissions enabled\nconst worker = new Worker(new URL("./worker.js", import.meta.url).href, {\n  type: "module",\n  deno: {\n    permissions: "none",\n  },\n});\n')))))}k.isMDXComponent=!0}}]);