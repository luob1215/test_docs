"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[2146],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>f});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var u=n.createContext({}),l=function(e){var t=n.useContext(u),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},p=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=l(o),d=r,f=c["".concat(u,".").concat(d)]||c[d]||h[d]||a;return o?n.createElement(f,i(i({ref:t},p),{},{components:o})):n.createElement(f,i({ref:t},p))}));function f(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=o[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},76897:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=o(87462),r=(o(67294),o(3905));const a={},i="Offload webhook processing to a queue",s={unversionedId:"tutorials/webhook_processor",id:"tutorials/webhook_processor",title:"Offload webhook processing to a queue",description:"In a web application, it is often desirable to offload processing of async tasks",source:"@site/kv/tutorials/webhook_processor.md",sourceDirName:"tutorials",slug:"/tutorials/webhook_processor",permalink:"/kv/tutorials/webhook_processor",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"kvTutorialsHome",previous:{title:"Schedule a notification for a future date",permalink:"/kv/tutorials/schedule_notification"}},u={},l=[{value:"Try in a playground",id:"try-in-a-playground",level:2},{value:"Configuring GitHub webhooks for a repository",id:"configuring-github-webhooks-for-a-repository",level:2},{value:"Code walkthrough",id:"code-walkthrough",level:2}],p={toc:l},c="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"offload-webhook-processing-to-a-queue"},"Offload webhook processing to a queue"),(0,r.kt)("p",null,"In a web application, it is often desirable to offload processing of async tasks\nfor which a client doesn't need an immediate response to a queue. Doing so can\nkeep your web app fast and responsive, instead of taking up valuable resources\nwaiting for long-running processes to complete."),(0,r.kt)("p",null,"One instance where you might want to deploy this technique is when\n",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Webhook"},"handling webhooks"),". Immediately upon\nreceiving the webhook request from a non-human client that doesn't need a\nresponse, you can offload that work to a queue where it can be handled more\nefficiently."),(0,r.kt)("p",null,"In this tutorial, we'll show you how to execute this technique when\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/webhooks/about-webhooks-for-repositories"},"handling webhook requests for a GitHub repo"),"."),(0,r.kt)("h2",{id:"try-in-a-playground"},"Try in a playground"),(0,r.kt)("p",null,"\u270f\ufe0f\n",(0,r.kt)("a",{parentName:"p",href:"https://dash.deno.com/playground/github-webhook-example"},(0,r.kt)("strong",{parentName:"a"},"Check out the this playground, which implements a GitHub repo webhook handler")),"."),(0,r.kt)("p",null,"Using Deno Deploy ",(0,r.kt)("a",{parentName:"p",href:"/deploy/manual/playgrounds"},"playgrounds"),", you can instantly\ndeploy your own GitHub webhook handler that uses both queues and Deno KV. We'll\nwalk through what this code does in a moment."),(0,r.kt)("h2",{id:"configuring-github-webhooks-for-a-repository"},"Configuring GitHub webhooks for a repository"),(0,r.kt)("p",null,'To try out the webhook you just launched in a playground, set up a new webhook\nconfiguration for a GitHub repository you control. You can find webhook\nconfiguration under "Settings" for your repository.'),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"configure a github webhook",src:o(40549).Z,width:"2236",height:"1632"})),(0,r.kt)("h2",{id:"code-walkthrough"},"Code walkthrough"),(0,r.kt)("p",null,"Our webhook handler function is relatively simple - without comments, it's only\n23 lines of code total. It connects to a Deno KV database, sets up a queue\nlistener to process incoming messages, and sets up a simple server with\n",(0,r.kt)("a",{parentName:"p",href:"https://deno.land/api?s=Deno.serve"},(0,r.kt)("inlineCode",{parentName:"a"},"Deno.serve"))," which responds to incoming\nwebhook requests."),(0,r.kt)("p",null,"Read along with the comments below to see what's happening at each step."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server.ts"',title:'"server.ts"'},'// Get a handle for a Deno KV database instance. KV is built in to the Deno\n// runtime, and is available with zero config both locally and on Deno Deploy\nconst kv = await Deno.openKv();\n\n// Set up a listener that will handle work that is offloaded from our server.\n// In this case, it\'s just going to add incoming webhook payloads to a KV\n// database, with a timestamp.\nkv.listenQueue(async (message) => {\n  await kv.set(["github", Date.now()], message);\n});\n\n// This is a simple HTTP server that will handle incoming POST requests from\n// GitHub webhooks.\nDeno.serve(async (req: Request) => {\n  if (req.method === "POST") {\n    // GitHub sends webhook requests as POST requests to your server. You can\n    // configure GitHub to send JSON in the POST body, which you can then parse\n    // from the request object.\n    const payload = await req.json();\n    await kv.enqueue(payload);\n    return new Response("", { status: 200 });\n  } else {\n    // If the server is handling a GET request, this will just list out all the\n    // webhook events that have been recorded in our KV database.\n    const iter = kv.list<string>({ prefix: ["github"] });\n    const github = [];\n    for await (const res of iter) {\n      github.push({\n        timestamp: res.key[1],\n        payload: res.value,\n      });\n    }\n    return new Response(JSON.stringify(github, null, 2));\n  }\n});\n')))}h.isMDXComponent=!0},40549:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/github_webhook-1cb9bf1ac45df20570c527d70a841bb3.png"}}]);