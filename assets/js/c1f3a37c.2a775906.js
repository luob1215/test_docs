"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[8425],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),c=r,h=d["".concat(l,".").concat(c)]||d[c]||m[c]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},50170:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={},i="How to create a RESTful API with Prisma and Oak",s={unversionedId:"tutorials/how_to_with_npm/prisma",id:"tutorials/how_to_with_npm/prisma",title:"How to create a RESTful API with Prisma and Oak",description:"Prisma has been one of our top requested modules to work",source:"@site/runtime/tutorials/how_to_with_npm/prisma.md",sourceDirName:"tutorials/how_to_with_npm",slug:"/tutorials/how_to_with_npm/prisma",permalink:"/runtime/tutorials/how_to_with_npm/prisma",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeTutorialsHome",previous:{title:"How to use Planetscale with Deno",permalink:"/runtime/tutorials/how_to_with_npm/planetscale"},next:{title:"How to use React with Deno",permalink:"/runtime/tutorials/how_to_with_npm/react"}},l={},p=[{value:"Setup the application",id:"setup-the-application",level:2},{value:"Setup Accelerate in the Prisma Data Platform",id:"setup-accelerate-in-the-prisma-data-platform",level:2},{value:"Seed your Database",id:"seed-your-database",level:2},{value:"Create your API routes",id:"create-your-api-routes",level:2},{value:"What&#39;s next?",id:"whats-next",level:2}],u={toc:p},d="wrapper";function m(e){let{components:t,...o}=e;return(0,r.kt)(d,(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-create-a-restful-api-with-prisma-and-oak"},"How to create a RESTful API with Prisma and Oak"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://prisma.io"},"Prisma")," has been one of our top requested modules to work\nwith in Deno. The demand is understandable, given that Prisma's developer\nexperience is top notch and plays well with so many persistent data storage\ntechnologies."),(0,r.kt)("p",null,"We're excited to show you how to use Prisma with Deno."),(0,r.kt)("p",null,"In this How To guide, we'll setup a simple RESTful API in Deno using Oak and\nPrisma."),(0,r.kt)("p",null,"Let's get started."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/denoland/examples/tree/main/with-prisma"},"View source")," or\n",(0,r.kt)("a",{parentName:"p",href:"https://youtu.be/P8VzA_XSF8w"},"check out the video guide"),"."),(0,r.kt)("h2",{id:"setup-the-application"},"Setup the application"),(0,r.kt)("p",null,"Let's create the folder ",(0,r.kt)("inlineCode",{parentName:"p"},"rest-api-with-prisma-oak")," and navigate there:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"mkdir rest-api-with-prisma-oak\ncd rest-api-with-prisma-oak\n")),(0,r.kt)("p",null,"Then, let's run ",(0,r.kt)("inlineCode",{parentName:"p"},"prisma init")," with Deno:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"deno run --allow-read --allow-env --allow-write npm:prisma@latest init\n")),(0,r.kt)("p",null,"This will generate\n",(0,r.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/concepts/components/prisma-schema"},(0,r.kt)("inlineCode",{parentName:"a"},"prisma/schema.prisma")),".\nLet's update it with the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'generator client {\n  provider = "prisma-client-js"\n  previewFeatures = ["deno"]\n  output = "../generated/client"\n}\n\ndatasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\nmodel Dinosaur {\n  id          Int     @id @default(autoincrement())\n  name        String  @unique\n  description String\n}\n')),(0,r.kt)("p",null,"Prisma also generates a ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file with a ",(0,r.kt)("inlineCode",{parentName:"p"},"DATABASE_URL")," environment variable. Let's\nassign ",(0,r.kt)("inlineCode",{parentName:"p"},"DATABASE_URL")," to a PostgreSQL connection string. In this example, we'll\nuse a free ",(0,r.kt)("a",{parentName:"p",href:"https://supabase.com/database"},"PostgreSQL database from Supabase"),"."),(0,r.kt)("p",null,"Next, let's create the database schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"deno run -A npm:prisma@latest db push\n")),(0,r.kt)("p",null,"After that's complete, we'll need to generate a Prisma Client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"deno run -A --unstable npm:prisma@latest generate --no-engine\n")),(0,r.kt)("h2",{id:"setup-accelerate-in-the-prisma-data-platform"},"Setup Accelerate in the Prisma Data Platform"),(0,r.kt)("p",null,"To get started with the Prisma Data Platform:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Sign up for a free ",(0,r.kt)("a",{parentName:"li",href:"https://console.prisma.io"},"Prisma Data Platform account"),"."),(0,r.kt)("li",{parentName:"ol"},"Create a project."),(0,r.kt)("li",{parentName:"ol"},"Navigate to the project you created."),(0,r.kt)("li",{parentName:"ol"},"Enable Accelerate by providing your database's connection string."),(0,r.kt)("li",{parentName:"ol"},"Generate an Accelerate connection string and copy it to your clipboard.")),(0,r.kt)("p",null,"Assign the Accelerate connection string, that begins with ",(0,r.kt)("inlineCode",{parentName:"p"},"prisma://"),", to ",(0,r.kt)("inlineCode",{parentName:"p"},"DATABASE_URL")," in your ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file replacing your existing connection string."),(0,r.kt)("p",null,"Next, let's create a seed script to seed the database."),(0,r.kt)("h2",{id:"seed-your-database"},"Seed your Database"),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"./prisma/seed.ts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"touch prisma/seed.ts\n")),(0,r.kt)("p",null,"And in ",(0,r.kt)("inlineCode",{parentName:"p"},"./prisma/seed.ts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'import { Prisma, PrismaClient } from "../generated/client/deno/edge.ts";\nimport { load } from "https://deno.land/std@0.208.0/dotenv/mod.ts";\n\nconst envVars = await load();\n\nconst prisma = new PrismaClient({\n  datasourceUrl: envVars.DATABASE_URL,\n});\n\nconst dinosaurData: Prisma.DinosaurCreateInput[] = [\n  {\n    name: "Aardonyx",\n    description: "An early stage in the evolution of sauropods.",\n  },\n  {\n    name: "Abelisaurus",\n    description: "Abel\'s lizard has been reconstructed from a single skull.",\n  },\n  {\n    name: "Acanthopholis",\n    description: "No, it\'s not a city in Greece.",\n  },\n];\n\n/**\n * Seed the database.\n */\n\nfor (const u of dinosaurData) {\n  const dinosaur = await prisma.dinosaur.create({\n    data: u,\n  });\n  console.log(`Created dinosaur with id: ${dinosaur.id}`);\n}\nconsole.log(`Seeding finished.`);\n\nawait prisma.$disconnect();\n')),(0,r.kt)("p",null,"We can now run ",(0,r.kt)("inlineCode",{parentName:"p"},"seed.ts")," with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"deno run -A prisma/seed.ts\n")),(0,r.kt)("p",null,"After doing so, you should be able to see your data on Prisma Studio by running the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash,",metastring:"ignore",ignore:!0},"deno run -A npm:prisma studio\n")),(0,r.kt)("p",null,"You should see something similar to the following screenshot:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"New dinosaurs are in Prisma dashboard",src:n(24891).Z,width:"1072",height:"745"})),(0,r.kt)("h2",{id:"create-your-api-routes"},"Create your API routes"),(0,r.kt)("p",null,"We'll use ",(0,r.kt)("a",{parentName:"p",href:"https://deno.land/x/oak"},(0,r.kt)("inlineCode",{parentName:"a"},"oak"))," to create the API routes. Let's keep\nthem simple for now."),(0,r.kt)("p",null,"Let's create a ",(0,r.kt)("inlineCode",{parentName:"p"},"main.ts")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"touch main.ts\n")),(0,r.kt)("p",null,"Then, in your ",(0,r.kt)("inlineCode",{parentName:"p"},"main.ts")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'import { PrismaClient } from "./generated/client/deno/edge.ts";\nimport { Application, Router } from "https://deno.land/x/oak@v11.1.0/mod.ts";\nimport { load } from "https://deno.land/std@0.208.0/dotenv/mod.ts";\n\nconst envVars = await load();\n\n/**\n * Initialize.\n */\n\nconst prisma = new PrismaClient({\n  datasources: {\n    db: {\n      url: envVars.DATABASE_URL,\n    },\n  },\n});\nconst app = new Application();\nconst router = new Router();\n\n/**\n * Setup routes.\n */\n\nrouter\n  .get("/", (context) => {\n    context.response.body = "Welcome to the Dinosaur API!";\n  })\n  .get("/dinosaur", async (context) => {\n    // Get all dinosaurs.\n    const dinosaurs = await prisma.dinosaur.findMany();\n    context.response.body = dinosaurs;\n  })\n  .get("/dinosaur/:id", async (context) => {\n    // Get one dinosaur by id.\n    const { id } = context.params;\n    const dinosaur = await prisma.dinosaur.findUnique({\n      where: {\n        id: Number(id),\n      },\n    });\n    context.response.body = dinosaur;\n  })\n  .post("/dinosaur", async (context) => {\n    // Create a new dinosaur.\n    const { name, description } = await context.request.body("json").value;\n    const result = await prisma.dinosaur.create({\n      data: {\n        name,\n        description,\n      },\n    });\n    context.response.body = result;\n  })\n  .delete("/dinosaur/:id", async (context) => {\n    // Delete a dinosaur by id.\n    const { id } = context.params;\n    const dinosaur = await prisma.dinosaur.delete({\n      where: {\n        id: Number(id),\n      },\n    });\n    context.response.body = dinosaur;\n  });\n\n/**\n * Setup middleware.\n */\n\napp.use(router.routes());\napp.use(router.allowedMethods());\n\n/**\n * Start server.\n */\n\nawait app.listen({ port: 8000 });\n')),(0,r.kt)("p",null,"Now, let's run it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"deno run -A main.ts\n")),(0,r.kt)("p",null,"Let's visit ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost:8000/dinosaurs"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"List of all dinosaurs from REST API",src:n(48382).Z,width:"1072",height:"745"})),(0,r.kt)("p",null,"Next, let's ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," a new user with this ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},'curl -X POST http://localhost:8000/dinosaur -H "Content-Type: application/json" -d \'{"name": "Deno", "description":"The fastest, most secure, easiest to use Dinosaur ever to walk the Earth."}\'\n')),(0,r.kt)("p",null,"You should now see a new row on Prisma Studio:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"New dinosaur Deno in Prisma",src:n(98735).Z,width:"1072",height:"745"})),(0,r.kt)("p",null,"Nice!"),(0,r.kt)("h2",{id:"whats-next"},"What's next?"),(0,r.kt)("p",null,"Building your next app will be more productive and fun with Deno and Prisma,\nsince both technologies deliver an intuitive developer experience with data\nmodeling, type-safety, and robust IDE support."),(0,r.kt)("p",null,"If you're interested in connecting Prisma to Deno Deploy,\n",(0,r.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/guides/deployment/deployment-guides/deploying-to-deno-deploy"},"check out this awesome guide"),"."))}m.isMDXComponent=!0},24891:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/1-dinosaurs-in-prisma-825f3e2dafb04cb0c73f26cdf535e450.png"},48382:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/2-dinosaurs-from-api-0d0ab9ee1a88f4be4739dbeb4876afbf.png"},98735:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/3-new-dinosaur-in-prisma-fa50b01627f33bac17bcc79b551da043.png"}}]);