"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[9826],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(n),d=o,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},98021:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const a={},i="Test Coverage",c={unversionedId:"manual/basics/testing/coverage",id:"manual/basics/testing/coverage",title:"Test Coverage",description:"Deno will collect test coverage into a directory for your code if you specify",source:"@site/runtime/manual/basics/testing/coverage.md",sourceDirName:"manual/basics/testing",slug:"/manual/basics/testing/coverage",permalink:"/runtime/manual/basics/testing/coverage",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Assertions",permalink:"/runtime/manual/basics/testing/assertions"},next:{title:"Mocking",permalink:"/runtime/manual/basics/testing/mocking"}},l={},s=[],p={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"test-coverage"},"Test Coverage"),(0,o.kt)("p",null,"Deno will collect test coverage into a directory for your code if you specify\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"--coverage")," flag when starting ",(0,o.kt)("inlineCode",{parentName:"p"},"deno test"),"."),(0,o.kt)("p",null,"This coverage information is acquired directly from the JavaScript engine (V8)\nwhich is very accurate."),(0,o.kt)("p",null,"This can then be further processed from the internal format into well known\nformats by the ",(0,o.kt)("inlineCode",{parentName:"p"},"deno coverage")," tool."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f To ensure consistent coverage results, make sure to process coverage data\nimmediately after running tests. Otherwise source code and collected coverage\ndata might get out of sync and unexpectedly show uncovered lines.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Go into your project's working directory\ngit clone https://github.com/oakserver/oak && cd oak\n\n# Collect your coverage profile with deno test --coverage=<output_directory>\ndeno test --coverage=cov_profile\n\n# From this you can get a pretty printed diff of uncovered lines\ndeno coverage cov_profile\n\n# Or generate an lcov report\ndeno coverage cov_profile --lcov --output=cov_profile.lcov\n\n# Which can then be further processed by tools like genhtml\ngenhtml -o cov_profile/html cov_profile.lcov\n")),(0,o.kt)("p",null,"By default, ",(0,o.kt)("inlineCode",{parentName:"p"},"deno coverage")," will exclude any files matching the regular\nexpression ",(0,o.kt)("inlineCode",{parentName:"p"},"test\\.(ts|tsx|mts|js|mjs|jsx|cjs|cts)")," and only consider including\nspecifiers matching the regular expression ",(0,o.kt)("inlineCode",{parentName:"p"},"^file:")," - ie. remote files will be\nexcluded from coverage report."),(0,o.kt)("p",null,"These filters can be overridden using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--exclude")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"--include")," flags. A\nmodule specifier must ",(0,o.kt)("em",{parentName:"p"},"match")," the include",(0,o.kt)("em",{parentName:"p"},"regular expression and _not match")," the\nexclude_ expression for it to be a part of the report."))}m.isMDXComponent=!0}}]);