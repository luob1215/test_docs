"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[3857],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),h=o,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||i;return t?a.createElement(m,r(r({ref:n},u),{},{components:t})):a.createElement(m,r({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:o,r[1]=s;for(var c=2;c<i;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},1045:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));const i={},r="Continuous Integration",s={unversionedId:"manual/advanced/continuous_integration",id:"manual/advanced/continuous_integration",title:"Continuous Integration",description:"Deno's built-in tools make it easy to set up Continuous Integration (CI)",source:"@site/runtime/manual/advanced/continuous_integration.md",sourceDirName:"manual/advanced",slug:"/manual/advanced/continuous_integration",permalink:"/runtime/manual/advanced/continuous_integration",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"How to Deploy Deno on Kinsta",permalink:"/runtime/manual/advanced/deploying_deno/kinsta"},next:{title:"Embedding Deno",permalink:"/runtime/manual/advanced/embedding_deno"}},l={},c=[{value:"Setting up a basic pipeline",id:"setting-up-a-basic-pipeline",level:2},{value:"Cross-platform workflows",id:"cross-platform-workflows",level:2},{value:"Speeding up Deno pipelines",id:"speeding-up-deno-pipelines",level:2},{value:"Reducing repetition",id:"reducing-repetition",level:3},{value:"Caching dependencies",id:"caching-dependencies",level:3},{value:"Clearing the cache",id:"clearing-the-cache",level:4}],u={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"continuous-integration"},"Continuous Integration"),(0,o.kt)("p",null,"Deno's built-in tools make it easy to set up Continuous Integration (CI)\npipelines for your projects. Testing, linting and formatting of code can all be\ndone with the corresponding commands ",(0,o.kt)("inlineCode",{parentName:"p"},"deno test"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"deno lint")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"deno fmt"),". In\naddition, you can generate code coverage reports from test results with\n",(0,o.kt)("inlineCode",{parentName:"p"},"deno coverage")," in pipelines."),(0,o.kt)("p",null,"On this page we will discuss:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#setting-up-a-basic-pipeline"},"Setting up a basic pipeline")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#cross-platform-workflows"},"Cross-platform workflows")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#speeding-up-deno-pipelines"},"Speeding up Deno pipelines"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#reducing-repetition"},"Reducing repetition")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#caching-dependencies"},"Caching dependencies"))))),(0,o.kt)("h2",{id:"setting-up-a-basic-pipeline"},"Setting up a basic pipeline"),(0,o.kt)("p",null,"This page will show you how to set up basic pipelines for Deno projects in\nGitHub Actions. The concepts explained on this page largely apply to other CI\nproviders as well, such as Azure Pipelines, CircleCI or GitLab."),(0,o.kt)("p",null,"Building a pipeline for Deno generally starts with checking out the repository\nand installing Deno:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"name: Build\n\non: push\n\njobs:\n  build:\n    runs-on: ubuntu-22.04\n    steps:\n      - uses: actions/checkout@v3\n      - uses: denoland/setup-deno@v1\n        with:\n          deno-version: v1.x # Run with latest stable Deno.\n")),(0,o.kt)("p",null,"To expand the workflow just add any of the ",(0,o.kt)("inlineCode",{parentName:"p"},"deno")," subcommands that you might\nneed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"      # Check if the code is formatted according to Deno's default\n      # formatting conventions.\n      - run: deno fmt --check\n\n      # Scan the code for syntax errors and style issues. If\n      # you want to use a custom linter configuration you can add a configuration file with --config <myconfig>\n      - run: deno lint\n\n      # Run all test files in the repository and collect code coverage. The example\n      # runs with all permissions, but it is recommended to run with the minimal permissions your program needs (for example --allow-read).\n      - run: deno test --allow-all --coverage=cov/\n\n      # This generates a report from the collected coverage in `deno test --coverage`. It is\n      # stored as a .lcov file which integrates well with services such as Codecov, Coveralls and Travis CI.\n      - run: deno coverage --lcov cov/ > cov.lcov\n")),(0,o.kt)("h2",{id:"cross-platform-workflows"},"Cross-platform workflows"),(0,o.kt)("p",null,"As a Deno module maintainer, you probably want to know that your code works on\nall of the major operating systems in use today: Linux, MacOS and Windows. A\ncross-platform workflow can be achieved by running a matrix of parallel jobs,\neach one running the build on a different OS:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ ubuntu-22.04, macos-12, windows-2022 ]\n    steps:\n      - run: deno test --allow-all --coverage cov/\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: GitHub Actions has a known\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/actions/checkout/issues/135"},"issue")," with handling\nWindows-style line endings (CRLF). This may cause issues when running\n",(0,o.kt)("inlineCode",{parentName:"p"},"deno fmt")," in a pipeline with jobs that run on ",(0,o.kt)("inlineCode",{parentName:"p"},"windows"),". To prevent this,\nconfigure the Actions runner to use Linux-style line endings before running\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"actions/checkout@v3")," step:"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre"},"git config --system core.autocrlf false\ngit config --system core.eol lf\n"))),(0,o.kt)("p",null,"If you are working with experimental or unstable Deno APIs, you can include a\nmatrix job running the canary version of Deno. This can help to spot breaking\nchanges early on:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    continue-on-error: ${{ matrix.canary }} # Continue in case the canary run does not succeed\n    strategy:\n      matrix:\n        os: [ ubuntu-22.04, macos-12, windows-2022 ]\n        deno-version: [ v1.x ]\n        canary: [ false ]\n        include: \n          - deno-version: canary\n            os: ubuntu-22.04\n            canary: true\n")),(0,o.kt)("h2",{id:"speeding-up-deno-pipelines"},"Speeding up Deno pipelines"),(0,o.kt)("h3",{id:"reducing-repetition"},"Reducing repetition"),(0,o.kt)("p",null,"In cross-platform runs, certain steps of a pipeline do not need to run for each\nOS necessarily. For example, generating the same test coverage report on Linux,\nMacOS and Windows is a bit redundant. You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," conditional keyword\nof GitHub Actions in these cases. The example below shows how to run code\ncoverage generation and upload steps only on the ",(0,o.kt)("inlineCode",{parentName:"p"},"ubuntu")," (Linux) runner:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: Generate coverage report\n  if: matrix.os == 'ubuntu-22.04'\n  run: deno coverage --lcov cov > cov.lcov\n\n- name: Upload coverage to Coveralls.io\n  if: matrix.os == 'ubuntu-22.04'\n  # Any code coverage service can be used, Coveralls.io is used here as an example.\n  uses: coverallsapp/github-action@master\n  with:\n    github-token: ${{ secrets.GITHUB_TOKEN }} # Generated by GitHub.\n    path-to-lcov: cov.lcov\n")),(0,o.kt)("h3",{id:"caching-dependencies"},"Caching dependencies"),(0,o.kt)("p",null,"As a project grows in size, more and more dependencies tend to be included. Deno\nwill download these dependencies during testing and if a workflow is run many\ntimes a day, this can become a time-consuming process. A common solution to\nspeed things up is to cache dependencies so that they do not need to be\ndownloaded anew."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://deno.land/manual/linking_to_external_code"},"Deno stores dependencies locally in a cache directory"),".\nIn a pipeline the cache can be preserved between workflows by setting the\n",(0,o.kt)("inlineCode",{parentName:"p"},"DENO_DIR")," environment variable and adding a caching step to the workflow:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# Set DENO_DIR to an absolute or relative path on the runner.\nenv:\n  DENO_DIR: my_cache_directory\n\nsteps:\n  - name: Cache Deno dependencies \n    uses: actions/cache@v2\n    with:\n      path: ${{ env.DENO_DIR }}\n      key: my_cache_key\n")),(0,o.kt)("p",null,"At first, when this workflow runs the cache is still empty and commands like\n",(0,o.kt)("inlineCode",{parentName:"p"},"deno test")," will still have to download dependencies, but when the job succeeds\nthe contents of ",(0,o.kt)("inlineCode",{parentName:"p"},"DENO_DIR")," are saved and any subsequent runs can restore them\nfrom cache instead of re-downloading."),(0,o.kt)("p",null,"There is still an issue in the workflow above: at the moment the name of the\ncache key is hardcoded to ",(0,o.kt)("inlineCode",{parentName:"p"},"my_cache_key"),", which is going to restore the same\ncache every time, even if one or more dependencies are updated. This can lead to\nolder versions being used in the pipeline even though you have updated some\ndependencies. The solution is to generate a different key each time the cache\nneeds to be updated, which can be achieved by using a lockfile and by using the\n",(0,o.kt)("inlineCode",{parentName:"p"},"hashFiles")," function provided by GitHub Actions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"key: ${{ hashFiles('deno.lock') }}\n")),(0,o.kt)("p",null,"To make this work you will also need a have a lockfile in your Deno project,\nwhich is discussed in detail ",(0,o.kt)("a",{parentName:"p",href:"/runtime/manual/basics/modules/integrity_checking"},"here"),".\nNow, if the contents of ",(0,o.kt)("inlineCode",{parentName:"p"},"deno.lock")," are changed, a new cache will be made and\nused in subsequent pipeline runs thereafter."),(0,o.kt)("p",null,"To demonstrate, let's say you have a project that uses the logger from\n",(0,o.kt)("inlineCode",{parentName:"p"},"deno.land/std"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import * as log from "https://deno.land/std@0.208.0/log/mod.ts";\n')),(0,o.kt)("p",null,"In order to increment this version, you can update the ",(0,o.kt)("inlineCode",{parentName:"p"},"import")," statement and\nthen reload the cache and update the lockfile locally:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"deno cache --reload --lock=deno.lock --lock-write deps.ts\n")),(0,o.kt)("p",null,"You should see changes in the lockfile's contents after running this. When this\nis committed and run through the pipeline, you should then see the ",(0,o.kt)("inlineCode",{parentName:"p"},"hashFiles"),"\nfunction saving a new cache and using it in any runs that follow."),(0,o.kt)("h4",{id:"clearing-the-cache"},"Clearing the cache"),(0,o.kt)("p",null,"Occasionally you may run into a cache that has been corrupted or malformed,\nwhich can happen for various reasons. It is possible to clear a cache from the\nGitHub Actions UI, or you can simply change the name of the cache key. A\npractical way of doing so without having to forcefully change your lockfile is\nto add a variable to the cache key name, which can be stored as a GitHub secret\nand can be changed if a new cache is needed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"key: ${{ secrets.CACHE_VERSION }}-${{ hashFiles('deno.lock') }}\n")))}d.isMDXComponent=!0}}]);