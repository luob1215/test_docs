"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[5460],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=o,m=c["".concat(s,".").concat(d)]||c[d]||f[d]||l;return n?a.createElement(m,r(r({ref:t},u),{},{components:n})):a.createElement(m,r({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:o,r[1]=i;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},25746:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>f,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const l={},r="Profiling",i={unversionedId:"manual/references/contributing/profiling",id:"manual/references/contributing/profiling",title:"Profiling",description:"Perf profiling:",source:"@site/runtime/manual/references/contributing/profiling.md",sourceDirName:"manual/references/contributing",slug:"/manual/references/contributing/profiling",permalink:"/runtime/manual/references/contributing/profiling",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Building deno from Source",permalink:"/runtime/manual/references/contributing/building_from_source"},next:{title:"Release Schedule",permalink:"/runtime/manual/references/contributing/release_schedule"}},s={},p=[{value:"Perf profiling:",id:"perf-profiling",level:2},{value:"v8 profiling:",id:"v8-profiling",level:2},{value:"Debugging with LLDB",id:"debugging-with-lldb",level:2},{value:"V8 flags",id:"v8-flags",level:2}],u={toc:p},c="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"profiling"},"Profiling"),(0,o.kt)("h2",{id:"perf-profiling"},"Perf profiling:"),(0,o.kt)("p",null,"Tools that can be used to generate/ visualise perf results:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"flamegraph-rs (",(0,o.kt)("a",{parentName:"li",href:"https://github.com/flamegraph-rs/flamegraph"},"https://github.com/flamegraph-rs/flamegraph"),")"),(0,o.kt)("li",{parentName:"ul"},"flamescope (",(0,o.kt)("a",{parentName:"li",href:"https://github.com/Netflix/flamescope"},"https://github.com/Netflix/flamescope"),")")),(0,o.kt)("p",null,"Example using perf on ",(0,o.kt)("inlineCode",{parentName:"p"},"micro_bench_ops")," and visualising using flamescope:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"# build `examples/micro_bench_ops`\ncargo build --release --example micro_bench_ops\n\n# run `examples/micro_bench_ops` using perf\nsudo perf record -F 49 -a -g -- ./target/release/examples/micro_bench_ops\nsudo perf script --header > micro_bench_ops_perf\n\n# now open the file using flamescope\n")),(0,o.kt)("p",null,"Example running ",(0,o.kt)("inlineCode",{parentName:"p"},"deno_tcp.ts")," in combination with flamegraph (",(0,o.kt)("inlineCode",{parentName:"p"},"script.sh"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"sudo flamegraph -o flamegraph.svg target/debug/deno run --allow-net cli/bench/deno_tcp.ts &\nsleep 1\n./third_party/prebuilt/linux64/wrk http://localhost:4500/\nsleep 1\nkill `pgrep perf`\n")),(0,o.kt)("h2",{id:"v8-profiling"},"v8 profiling:"),(0,o.kt)("p",null,"Example using v8 profiling on ",(0,o.kt)("inlineCode",{parentName:"p"},"micro_bench_ops"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"# build `examples/micro_bench_ops`\ncargo build --release --example micro_bench_ops\n\n# run `examples/micro_bench_ops`\n./target/release/examples/micro_bench_ops --prof\n")),(0,o.kt)("p",null,"Example using v8 profiling on ",(0,o.kt)("inlineCode",{parentName:"p"},"deno_tcp.ts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"# build `deno`\ncargo build --release\n\n# run `deno_tcp.ts`\n./target/release/deno --v8-flags=--prof --allow-net cli/bench/deno_tcp.ts &\nsleep 1\n./third_party/prebuilt/linux64/wrk http://localhost:4500/\nsleep 1\nkill `pgrep deno`\n")),(0,o.kt)("p",null,"V8 will write a file in the current directory that looks like this:\n",(0,o.kt)("inlineCode",{parentName:"p"},"isolate-0x7fad98242400-v8.log"),". To examine this file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"node --prof-process isolate-0x7fad98242400-v8.log > prof.log\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"prof.log")," will contain information about tick distribution of different calls."),(0,o.kt)("p",null,"To view the log with Web UI, generate JSON file of the log:"),(0,o.kt)("p",null,"Open ",(0,o.kt)("inlineCode",{parentName:"p"},"rusty_v8/v8/tools/profview/index.html")," in your browser, and select\n",(0,o.kt)("inlineCode",{parentName:"p"},"prof.json")," to view the distribution graphically."),(0,o.kt)("p",null,"Useful V8 flags during profiling:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"--prof"),(0,o.kt)("li",{parentName:"ul"},"--log-internal-timer-events"),(0,o.kt)("li",{parentName:"ul"},"--log-timer-events"),(0,o.kt)("li",{parentName:"ul"},"--track-gc"),(0,o.kt)("li",{parentName:"ul"},"--log-source-code"),(0,o.kt)("li",{parentName:"ul"},"--track-gc-object-stats")),(0,o.kt)("p",null,"To learn more about profiling, check out the following links:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://v8.dev/docs/profile"},"https://v8.dev/docs/profile"))),(0,o.kt)("h2",{id:"debugging-with-lldb"},"Debugging with LLDB"),(0,o.kt)("p",null,"To debug the deno binary, we can use ",(0,o.kt)("inlineCode",{parentName:"p"},"rust-lldb"),". It should come with ",(0,o.kt)("inlineCode",{parentName:"p"},"rustc"),"\nand is a wrapper around LLDB."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'$ rust-lldb -- ./target/debug/deno run --allow-net tests/http_bench.ts\n# On macOS, you might get warnings like\n# `ImportError: cannot import name _remove_dead_weakref`\n# In that case, use system python by setting PATH, e.g.\n# PATH=/System/Library/Frameworks/Python.framework/Versions/2.7/bin:$PATH\n(lldb) command script import "/Users/kevinqian/.rustup/toolchains/1.36.0-x86_64-apple-darwin/lib/rustlib/etc/lldb_rust_formatters.py"\n(lldb) type summary add --no-value --python-function lldb_rust_formatters.print_val -x ".*" --category Rust\n(lldb) type category enable Rust\n(lldb) target create "../deno/target/debug/deno"\nCurrent executable set to \'../deno/target/debug/deno\' (x86_64).\n(lldb) settings set -- target.run-args  "tests/http_bench.ts" "--allow-net"\n(lldb) b op_start\n(lldb) r\n')),(0,o.kt)("h2",{id:"v8-flags"},"V8 flags"),(0,o.kt)("p",null,"V8 has many many internal command-line flags:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'$ deno run --v8-flags=--help _\nSSE3=1 SSSE3=1 SSE4_1=1 SSE4_2=1 SAHF=1 AVX=1 FMA3=1 BMI1=1 BMI2=1 LZCNT=1 POPCNT=1 ATOM=0\nSynopsis:\n  shell [options] [--shell] [<file>...]\n  d8 [options] [-e <string>] [--shell] [[--module] <file>...]\n\n  -e        execute a string in V8\n  --shell   run an interactive JavaScript shell\n  --module  execute a file as a JavaScript module\n\nNote: the --module option is implicitly enabled for *.mjs files.\n\nThe following syntax for options is accepted (both \'-\' and \'--\' are ok):\n  --flag        (bool flags only)\n  --no-flag     (bool flags only)\n  --flag=value  (non-bool flags only, no spaces around \'=\')\n  --flag value  (non-bool flags only)\n  --            (captures all remaining args in JavaScript)\n\nOptions:\n  --use-strict (enforce strict mode)\n        type: bool  default: false\n  --es-staging (enable test-worthy harmony features (for internal use only))\n        type: bool  default: false\n  --harmony (enable all completed harmony features)\n        type: bool  default: false\n  --harmony-shipping (enable all shipped harmony features)\n        type: bool  default: true\n  --harmony-regexp-sequence (enable "RegExp Unicode sequence properties" (in progress))\n        type: bool  default: false\n  --harmony-weak-refs-with-cleanup-some (enable "harmony weak references with FinalizationRegistry.prototype.cleanupSome" (in progress))\n        type: bool  default: false\n  --harmony-regexp-match-indices (enable "harmony regexp match indices" (in progress))\n        type: bool  default: false\n  --harmony-top-level-await (enable "harmony top level await")\n        type: bool  default: false\n  --harmony-namespace-exports (enable "harmony namespace exports (export * as foo from \'bar\')")\n        type: bool  default: true\n  --harmony-sharedarraybuffer (enable "harmony sharedarraybuffer")\n        type: bool  default: true\n  --harmony-import-meta (enable "harmony import.meta property")\n        type: bool  default: true\n  --harmony-dynamic-import (enable "harmony dynamic import")\n        type: bool  default: true\n  --harmony-promise-all-settled (enable "harmony Promise.allSettled")\n        type: bool  default: true\n  --harmony-promise-any (enable "harmony Promise.any")\n        type: bool  default: true\n  --harmony-private-methods (enable "harmony private methods in class literals")\n        type: bool  default: true\n  --harmony-weak-refs (enable "harmony weak references")\n        type: bool  default: true\n  --harmony-string-replaceall (enable "harmony String.prototype.replaceAll")\n        type: bool  default: true\n  --harmony-logical-assignment (enable "harmony logical assignment")\n        type: bool  default: true\n  --lite-mode (enables trade-off of performance for memory savings)\n        type: bool  default: false\n  --future (Implies all staged features that we want to ship in the not-too-far future)\n        type: bool  default: false\n  --assert-types (generate runtime type assertions to test the typer)\n        type: bool  default: false\n  --allocation-site-pretenuring (pretenure with allocation sites)\n        type: bool  default: true\n  --page-promotion (promote pages based on utilization)\n        type: bool  default: true\n  --always-promote-young-mc (always promote young objects during mark-compact)\n        type: bool  default: true\n  --page-promotion-threshold (min percentage of live bytes on a page to enable fast evacuation)\n        type: int  default: 70\n  --trace-pretenuring (trace pretenuring decisions of HAllocate instructions)\n        type: bool  default: false\n  --trace-pretenuring-statistics (trace allocation site pretenuring statistics)\n        type: bool  default: false\n  --track-fields (track fields with only smi values)\n        type: bool  default: true\n  --track-double-fields (track fields with double values)\n        type: bool  default: true\n  --track-heap-object-fields (track fields with heap values)\n        type: bool  default: true\n  --track-computed-fields (track computed boilerplate fields)\n        type: bool  default: true\n  --track-field-types (track field types)\n        type: bool  default: true\n  --trace-block-coverage (trace collected block coverage information)\n        type: bool  default: false\n  --trace-protector-invalidation (trace protector cell invalidations)\n        type: bool  default: false\n  --feedback-normalization (feed back normalization to constructors)\n        type: bool  default: false\n  --enable-one-shot-optimization (Enable size optimizations for the code that will only be executed once)\n        type: bool  default: false\n  --unbox-double-arrays (automatically unbox arrays of doubles)\n        type: bool  default: true\n  --interrupt-budget (interrupt budget which should be used for the profiler counter)\n        type: int  default: 147456\n  --jitless (Disable runtime allocation of executable memory.)\n        type: bool  default: false\n  --use-ic (use inline caching)\n        type: bool  default: true\n  --budget-for-feedback-vector-allocation (The budget in amount of bytecode executed by a function before we decide to allocate feedback vectors)\n        type: int  default: 1024\n  --lazy-feedback-allocation (Allocate feedback vectors lazily)\n        type: bool  default: true\n  --ignition-elide-noneffectful-bytecodes (elide bytecodes which won\'t have any external effect)\n        type: bool  default: true\n  --ignition-reo (use ignition register equivalence optimizer)\n        type: bool  default: true\n  --ignition-filter-expression-positions (filter expression positions before the bytecode pipeline)\n        type: bool  default: true\n  --ignition-share-named-property-feedback (share feedback slots when loading the same named property from the same object)\n        type: bool  default: true\n  --print-bytecode (print bytecode generated by ignition interpreter)\n        type: bool  default: false\n  --enable-lazy-source-positions (skip generating source positions during initial compile but regenerate when actually required)\n        type: bool  default: true\n  --stress-lazy-source-positions (collect lazy source positions immediately after lazy compile)\n        type: bool  default: false\n  --print-bytecode-filter (filter for selecting which functions to print bytecode)\n        type: string  default: *\n  --trace-ignition-codegen (trace the codegen of ignition interpreter bytecode handlers)\n        type: bool  default: false\n  --trace-ignition-dispatches (traces the dispatches to bytecode handlers by the ignition interpreter)\n        type: bool  default: false\n  --trace-ignition-dispatches-output-file (the file to which the bytecode handler dispatch table is written (by default, the table is not written to a file))\n        type: string  default: nullptr\n  --fast-math (faster (but maybe less accurate) math functions)\n        type: bool  default: true\n  --trace-track-allocation-sites (trace the tracking of allocation sites)\n        type: bool  default: false\n  --trace-migration (trace object migration)\n        type: bool  default: false\n  --trace-generalization (trace map generalization)\n        type: bool  default: false\n  --turboprop (enable experimental turboprop mid-tier compiler.)\n        type: bool  default: false\n  --concurrent-recompilation (optimizing hot functions asynchronously on a separate thread)\n        type: bool  default: true\n  --trace-concurrent-recompilation (track concurrent recompilation)\n        type: bool  default: false\n  --concurrent-recompilation-queue-length (the length of the concurrent compilation queue)\n        type: int  default: 8\n  --concurrent-recompilation-delay (artificial compilation delay in ms)\n        type: int  default: 0\n  --block-concurrent-recompilation (block queued jobs until released)\n        type: bool  default: false\n  --concurrent-inlining (run optimizing compiler\'s inlining phase on a separate thread)\n        type: bool  default: false\n  --max-serializer-nesting (maximum levels for nesting child serializers)\n        type: int  default: 25\n  --trace-heap-broker-verbose (trace the heap broker verbosely (all reports))\n        type: bool  default: false\n  --trace-heap-broker-memory (trace the heap broker memory (refs analysis and zone numbers))\n        type: bool  default: false\n  --trace-heap-broker (trace the heap broker (reports on missing data only))\n        type: bool  default: false\n  --stress-runs (number of stress runs)\n        type: int  default: 0\n  --deopt-every-n-times (deoptimize every n times a deopt point is passed)\n        type: int  default: 0\n  --print-deopt-stress (print number of possible deopt points)\n        type: bool  default: false\n  --opt (use adaptive optimizations)\n        type: bool  default: true\n  --turbo-sp-frame-access (use stack pointer-relative access to frame wherever possible)\n        type: bool  default: false\n  --turbo-control-flow-aware-allocation (consider control flow while allocating registers)\n        type: bool  default: true\n  --turbo-filter (optimization filter for TurboFan compiler)\n        type: string  default: *\n  --trace-turbo (trace generated TurboFan IR)\n        type: bool  default: false\n  --trace-turbo-path (directory to dump generated TurboFan IR to)\n        type: string  default: nullptr\n  --trace-turbo-filter (filter for tracing turbofan compilation)\n        type: string  default: *\n  --trace-turbo-graph (trace generated TurboFan graphs)\n        type: bool  default: false\n  --trace-turbo-scheduled (trace TurboFan IR with schedule)\n        type: bool  default: false\n  --trace-turbo-cfg-file (trace turbo cfg graph (for C1 visualizer) to a given file name)\n        type: string  default: nullptr\n  --trace-turbo-types (trace TurboFan\'s types)\n        type: bool  default: true\n  --trace-turbo-scheduler (trace TurboFan\'s scheduler)\n        type: bool  default: false\n  --trace-turbo-reduction (trace TurboFan\'s various reducers)\n        type: bool  default: false\n  --trace-turbo-trimming (trace TurboFan\'s graph trimmer)\n        type: bool  default: false\n  --trace-turbo-jt (trace TurboFan\'s jump threading)\n        type: bool  default: false\n  --trace-turbo-ceq (trace TurboFan\'s control equivalence)\n        type: bool  default: false\n  --trace-turbo-loop (trace TurboFan\'s loop optimizations)\n        type: bool  default: false\n  --trace-turbo-alloc (trace TurboFan\'s register allocator)\n        type: bool  default: false\n  --trace-all-uses (trace all use positions)\n        type: bool  default: false\n  --trace-representation (trace representation types)\n        type: bool  default: false\n  --turbo-verify (verify TurboFan graphs at each phase)\n        type: bool  default: false\n  --turbo-verify-machine-graph (verify TurboFan machine graph before instruction selection)\n        type: string  default: nullptr\n  --trace-verify-csa (trace code stubs verification)\n        type: bool  default: false\n  --csa-trap-on-node (trigger break point when a Node.js with given id is created in given stub. The format is: StubName,NodeId)\n        type: string  default: nullptr\n  --turbo-stats (print TurboFan statistics)\n        type: bool  default: false\n  --turbo-stats-nvp (print TurboFan statistics in machine-readable format)\n        type: bool  default: false\n  --turbo-stats-wasm (print TurboFan statistics of wasm compilations)\n        type: bool  default: false\n  --turbo-splitting (split nodes during scheduling in TurboFan)\n        type: bool  default: true\n  --function-context-specialization (enable function context specialization in TurboFan)\n        type: bool  default: false\n  --turbo-inlining (enable inlining in TurboFan)\n        type: bool  default: true\n  --max-inlined-bytecode-size (maximum size of bytecode for a single inlining)\n        type: int  default: 500\n  --max-inlined-bytecode-size-cumulative (maximum cumulative size of bytecode considered for inlining)\n        type: int  default: 1000\n  --max-inlined-bytecode-size-absolute (maximum cumulative size of bytecode considered for inlining)\n        type: int  default: 5000\n  --reserve-inline-budget-scale-factor (maximum cumulative size of bytecode considered for inlining)\n        type: float  default: 1.2\n  --max-inlined-bytecode-size-small (maximum size of bytecode considered for small function inlining)\n        type: int  default: 30\n  --max-optimized-bytecode-size (maximum bytecode size to be considered for optimization; too high values may cause the compiler to hit (release) assertions)\n        type: int  default: 61440\n  --min-inlining-frequency (minimum frequency for inlining)\n        type: float  default: 0.15\n  --polymorphic-inlining (polymorphic inlining)\n        type: bool  default: true\n  --stress-inline (set high thresholds for inlining to inline as much as possible)\n        type: bool  default: false\n  --trace-turbo-inlining (trace TurboFan inlining)\n        type: bool  default: false\n  --turbo-inline-array-builtins (inline array builtins in TurboFan code)\n        type: bool  default: true\n  --use-osr (use on-stack replacement)\n        type: bool  default: true\n  --trace-osr (trace on-stack replacement)\n        type: bool  default: false\n  --analyze-environment-liveness (analyze liveness of environment slots and zap dead values)\n        type: bool  default: true\n  --trace-environment-liveness (trace liveness of local variable slots)\n        type: bool  default: false\n  --turbo-load-elimination (enable load elimination in TurboFan)\n        type: bool  default: true\n  --trace-turbo-load-elimination (trace TurboFan load elimination)\n        type: bool  default: false\n  --turbo-profiling (enable basic block profiling in TurboFan)\n        type: bool  default: false\n  --turbo-profiling-verbose (enable basic block profiling in TurboFan, and include each function\'s schedule and disassembly in the output)\n        type: bool  default: false\n  --turbo-verify-allocation (verify register allocation in TurboFan)\n        type: bool  default: false\n  --turbo-move-optimization (optimize gap moves in TurboFan)\n        type: bool  default: true\n  --turbo-jt (enable jump threading in TurboFan)\n        type: bool  default: true\n  --turbo-loop-peeling (Turbofan loop peeling)\n        type: bool  default: true\n  --turbo-loop-variable (Turbofan loop variable optimization)\n        type: bool  default: true\n  --turbo-loop-rotation (Turbofan loop rotation)\n        type: bool  default: true\n  --turbo-cf-optimization (optimize control flow in TurboFan)\n        type: bool  default: true\n  --turbo-escape (enable escape analysis)\n        type: bool  default: true\n  --turbo-allocation-folding (Turbofan allocation folding)\n        type: bool  default: true\n  --turbo-instruction-scheduling (enable instruction scheduling in TurboFan)\n        type: bool  default: false\n  --turbo-stress-instruction-scheduling (randomly schedule instructions to stress dependency tracking)\n        type: bool  default: false\n  --turbo-store-elimination (enable store-store elimination in TurboFan)\n        type: bool  default: true\n  --trace-store-elimination (trace store elimination)\n        type: bool  default: false\n  --turbo-rewrite-far-jumps (rewrite far to near jumps (ia32,x64))\n        type: bool  default: true\n  --stress-gc-during-compilation (simulate GC/compiler thread race related to https://crbug.com/v8/8520)\n        type: bool  default: false\n  --turbo-fast-api-calls (enable fast API calls from TurboFan)\n        type: bool  default: false\n  --reuse-opt-code-count (don\'t discard optimized code for the specified number of deopts.)\n        type: int  default: 0\n  --turbo-nci (enable experimental native context independent code.)\n        type: bool  default: false\n  --turbo-nci-as-highest-tier (replace default TF with NCI code as the highest tier for testing purposes.)\n        type: bool  default: false\n  --print-nci-code (print native context independent code.)\n        type: bool  default: false\n  --trace-turbo-nci (trace native context independent code.)\n        type: bool  default: false\n  --turbo-collect-feedback-in-generic-lowering (enable experimental feedback collection in generic lowering.)\n        type: bool  default: false\n  --optimize-for-size (Enables optimizations which favor memory size over execution speed)\n        type: bool  default: false\n  --untrusted-code-mitigations (Enable mitigations for executing untrusted code)\n        type: bool  default: false\n  --expose-wasm (expose wasm interface to JavaScript)\n        type: bool  default: true\n  --assume-asmjs-origin (force wasm decoder to assume input is internal asm-wasm format)\n        type: bool  default: false\n  --wasm-num-compilation-tasks (maximum number of parallel compilation tasks for wasm)\n        type: int  default: 128\n  --wasm-write-protect-code-memory (write protect code memory on the wasm native heap)\n        type: bool  default: false\n  --wasm-async-compilation (enable actual asynchronous compilation for WebAssembly.compile)\n        type: bool  default: true\n  --wasm-test-streaming (use streaming compilation instead of async compilation for tests)\n        type: bool  default: false\n  --wasm-max-mem-pages (maximum initial number of 64KiB memory pages of a wasm instance)\n        type: uint  default: 32767\n  --wasm-max-mem-pages-growth (maximum number of 64KiB pages a Wasm memory can grow to)\n        type: uint  default: 65536\n  --wasm-max-table-size (maximum table size of a wasm instance)\n        type: uint  default: 10000000\n  --wasm-max-code-space (maximum committed code space for wasm (in MB))\n        type: uint  default: 1024\n  --wasm-tier-up (enable tier up to the optimizing compiler (requires --liftoff to have an effect))\n        type: bool  default: true\n  --trace-wasm-ast-start (start function for wasm AST trace (inclusive))\n        type: int  default: 0\n  --trace-wasm-ast-end (end function for wasm AST trace (exclusive))\n        type: int  default: 0\n  --liftoff (enable Liftoff, the baseline compiler for WebAssembly)\n        type: bool  default: true\n  --trace-wasm-memory (print all memory updates performed in wasm code)\n        type: bool  default: false\n  --wasm-tier-mask-for-testing (bitmask of functions to compile with TurboFan instead of Liftoff)\n        type: int  default: 0\n  --wasm-expose-debug-eval (Expose wasm evaluator support on the CDP)\n        type: bool  default: false\n  --validate-asm (validate asm.js modules before compiling)\n        type: bool  default: true\n  --suppress-asm-messages (don\'t emit asm.js related messages (for golden file testing))\n        type: bool  default: false\n  --trace-asm-time (log asm.js timing info to the console)\n        type: bool  default: false\n  --trace-asm-scanner (log tokens encountered by asm.js scanner)\n        type: bool  default: false\n  --trace-asm-parser (verbose logging of asm.js parse failures)\n        type: bool  default: false\n  --stress-validate-asm (try to validate everything as asm.js)\n        type: bool  default: false\n  --dump-wasm-module-path (directory to dump wasm modules to)\n        type: string  default: nullptr\n  --experimental-wasm-eh (enable prototype exception handling opcodes for wasm)\n        type: bool  default: false\n  --experimental-wasm-simd (enable prototype SIMD opcodes for wasm)\n        type: bool  default: false\n  --experimental-wasm-return-call (enable prototype return call opcodes for wasm)\n        type: bool  default: false\n  --experimental-wasm-compilation-hints (enable prototype compilation hints section for wasm)\n        type: bool  default: false\n  --experimental-wasm-gc (enable prototype garbage collection for wasm)\n        type: bool  default: false\n  --experimental-wasm-typed-funcref (enable prototype typed function references for wasm)\n        type: bool  default: false\n  --experimental-wasm-reftypes (enable prototype reference type opcodes for wasm)\n        type: bool  default: false\n  --experimental-wasm-threads (enable prototype thread opcodes for wasm)\n        type: bool  default: false\n  --experimental-wasm-type-reflection (enable prototype wasm type reflection in JS for wasm)\n        type: bool  default: false\n  --experimental-wasm-bigint (enable prototype JS BigInt support for wasm)\n        type: bool  default: true\n  --experimental-wasm-bulk-memory (enable prototype bulk memory opcodes for wasm)\n        type: bool  default: true\n  --experimental-wasm-mv (enable prototype multi-value support for wasm)\n        type: bool  default: true\n  --wasm-staging (enable staged wasm features)\n        type: bool  default: false\n  --wasm-opt (enable wasm optimization)\n        type: bool  default: false\n  --wasm-bounds-checks (enable bounds checks (disable for performance testing only))\n        type: bool  default: true\n  --wasm-stack-checks (enable stack checks (disable for performance testing only))\n        type: bool  default: true\n  --wasm-math-intrinsics (intrinsify some Math imports into wasm)\n        type: bool  default: true\n  --wasm-trap-handler (use signal handlers to catch out of bounds memory access in wasm (currently Linux x86_64 only))\n        type: bool  default: true\n  --wasm-fuzzer-gen-test (generate a test case when running a wasm fuzzer)\n        type: bool  default: false\n  --print-wasm-code (Print WebAssembly code)\n        type: bool  default: false\n  --print-wasm-stub-code (Print WebAssembly stub code)\n        type: bool  default: false\n  --asm-wasm-lazy-compilation (enable lazy compilation for asm-wasm modules)\n        type: bool  default: false\n  --wasm-lazy-compilation (enable lazy compilation for all wasm modules)\n        type: bool  default: false\n  --wasm-lazy-validation (enable lazy validation for lazily compiled wasm functions)\n        type: bool  default: false\n  --wasm-atomics-on-non-shared-memory (allow atomic operations on non-shared WebAssembly memory)\n        type: bool  default: true\n  --wasm-grow-shared-memory (allow growing shared WebAssembly memory objects)\n        type: bool  default: true\n  --wasm-simd-post-mvp (allow experimental SIMD operations for prototyping that are not included in the current proposal)\n        type: bool  default: false\n  --wasm-code-gc (enable garbage collection of wasm code)\n        type: bool  default: true\n  --trace-wasm-code-gc (trace garbage collection of wasm code)\n        type: bool  default: false\n  --stress-wasm-code-gc (stress test garbage collection of wasm code)\n        type: bool  default: false\n  --wasm-max-initial-code-space-reservation (maximum size of the initial wasm code space reservation (in MB))\n        type: int  default: 0\n  --frame-count (number of stack frames inspected by the profiler)\n        type: int  default: 1\n  --stress-sampling-allocation-profiler (Enables sampling allocation profiler with X as a sample interval)\n        type: int  default: 0\n  --lazy-new-space-shrinking (Enables the lazy new space shrinking strategy)\n        type: bool  default: false\n  --min-semi-space-size (min size of a semi-space (in MBytes), the new space consists of two semi-spaces)\n        type: size_t  default: 0\n  --max-semi-space-size (max size of a semi-space (in MBytes), the new space consists of two semi-spaces)\n        type: size_t  default: 0\n  --semi-space-growth-factor (factor by which to grow the new space)\n        type: int  default: 2\n  --max-old-space-size (max size of the old space (in Mbytes))\n        type: size_t  default: 0\n  --max-heap-size (max size of the heap (in Mbytes) both max_semi_space_size and max_old_space_size take precedence. All three flags cannot be specified at the same time.)\n        type: size_t  default: 0\n  --initial-heap-size (initial size of the heap (in Mbytes))\n        type: size_t  default: 0\n  --huge-max-old-generation-size (Increase max size of the old space to 4 GB for x64 systems withthe physical memory bigger than 16 GB)\n        type: bool  default: true\n  --initial-old-space-size (initial old space size (in Mbytes))\n        type: size_t  default: 0\n  --global-gc-scheduling (enable GC scheduling based on global memory)\n        type: bool  default: true\n  --gc-global (always perform global GCs)\n        type: bool  default: false\n  --random-gc-interval (Collect garbage after random(0, X) allocations. It overrides gc_interval.)\n        type: int  default: 0\n  --gc-interval (garbage collect after <n> allocations)\n        type: int  default: -1\n  --retain-maps-for-n-gc (keeps maps alive for <n> old space garbage collections)\n        type: int  default: 2\n  --trace-gc (print one trace line following each garbage collection)\n        type: bool  default: false\n  --trace-gc-nvp (print one detailed trace line in name=value format after each garbage collection)\n        type: bool  default: false\n  --trace-gc-ignore-scavenger (do not print trace line after scavenger collection)\n        type: bool  default: false\n  --trace-idle-notification (print one trace line following each idle notification)\n        type: bool  default: false\n  --trace-idle-notification-verbose (prints the heap state used by the idle notification)\n        type: bool  default: false\n  --trace-gc-verbose (print more details following each garbage collection)\n        type: bool  default: false\n  --trace-gc-freelists (prints details of each freelist before and after each major garbage collection)\n        type: bool  default: false\n  --trace-gc-freelists-verbose (prints details of freelists of each page before and after each major garbage collection)\n        type: bool  default: false\n  --trace-evacuation-candidates (Show statistics about the pages evacuation by the compaction)\n        type: bool  default: false\n  --trace-allocations-origins (Show statistics about the origins of allocations. Combine with --no-inline-new to track allocations from generated code)\n        type: bool  default: false\n  --trace-allocation-stack-interval (print stack trace after <n> free-list allocations)\n        type: int  default: -1\n  --trace-duplicate-threshold-kb (print duplicate objects in the heap if their size is more than given threshold)\n        type: int  default: 0\n  --trace-fragmentation (report fragmentation for old space)\n        type: bool  default: false\n  --trace-fragmentation-verbose (report fragmentation for old space (detailed))\n        type: bool  default: false\n  --minor-mc-trace-fragmentation (trace fragmentation after marking)\n        type: bool  default: false\n  --trace-evacuation (report evacuation statistics)\n        type: bool  default: false\n  --trace-mutator-utilization (print mutator utilization, allocation speed, gc speed)\n        type: bool  default: false\n  --incremental-marking (use incremental marking)\n        type: bool  default: true\n  --incremental-marking-wrappers (use incremental marking for marking wrappers)\n        type: bool  default: true\n  --incremental-marking-task (use tasks for incremental marking)\n        type: bool  default: true\n  --incremental-marking-soft-trigger (threshold for starting incremental marking via a task in percent of available space: limit - size)\n        type: int  default: 0\n  --incremental-marking-hard-trigger (threshold for starting incremental marking immediately in percent of available space: limit - size)\n        type: int  default: 0\n  --trace-unmapper (Trace the unmapping)\n        type: bool  default: false\n  --parallel-scavenge (parallel scavenge)\n        type: bool  default: true\n  --scavenge-task (schedule scavenge tasks)\n        type: bool  default: true\n  --scavenge-task-trigger (scavenge task trigger in percent of the current heap limit)\n        type: int  default: 80\n  --scavenge-separate-stack-scanning (use a separate phase for stack scanning in scavenge)\n        type: bool  default: false\n  --trace-parallel-scavenge (trace parallel scavenge)\n        type: bool  default: false\n  --write-protect-code-memory (write protect code memory)\n        type: bool  default: true\n  --concurrent-marking (use concurrent marking)\n        type: bool  default: true\n  --concurrent-array-buffer-sweeping (concurrently sweep array buffers)\n        type: bool  default: true\n  --concurrent-allocation (concurrently allocate in old space)\n        type: bool  default: false\n  --local-heaps (allow heap access from background tasks)\n        type: bool  default: false\n  --stress-concurrent-allocation (start background threads that allocate memory)\n        type: bool  default: false\n  --parallel-marking (use parallel marking in atomic pause)\n        type: bool  default: true\n  --ephemeron-fixpoint-iterations (number of fixpoint iterations it takes to switch to linear ephemeron algorithm)\n        type: int  default: 10\n  --trace-concurrent-marking (trace concurrent marking)\n        type: bool  default: false\n  --concurrent-store-buffer (use concurrent store buffer processing)\n        type: bool  default: true\n  --concurrent-sweeping (use concurrent sweeping)\n        type: bool  default: true\n  --parallel-compaction (use parallel compaction)\n        type: bool  default: true\n  --parallel-pointer-update (use parallel pointer update during compaction)\n        type: bool  default: true\n  --detect-ineffective-gcs-near-heap-limit (trigger out-of-memory failure to avoid GC storm near heap limit)\n        type: bool  default: true\n  --trace-incremental-marking (trace progress of the incremental marking)\n        type: bool  default: false\n  --trace-stress-marking (trace stress marking progress)\n        type: bool  default: false\n  --trace-stress-scavenge (trace stress scavenge progress)\n        type: bool  default: false\n  --track-gc-object-stats (track object counts and memory usage)\n        type: bool  default: false\n  --trace-gc-object-stats (trace object counts and memory usage)\n        type: bool  default: false\n  --trace-zone-stats (trace zone memory usage)\n        type: bool  default: false\n  --zone-stats-tolerance (report a tick only when allocated zone memory changes by this amount)\n        type: size_t  default: 1048576\n  --track-retaining-path (enable support for tracking retaining path)\n        type: bool  default: false\n  --concurrent-array-buffer-freeing (free array buffer allocations on a background thread)\n        type: bool  default: true\n  --gc-stats (Used by tracing internally to enable gc statistics)\n        type: int  default: 0\n  --track-detached-contexts (track native contexts that are expected to be garbage collected)\n        type: bool  default: true\n  --trace-detached-contexts (trace native contexts that are expected to be garbage collected)\n        type: bool  default: false\n  --move-object-start (enable moving of object starts)\n        type: bool  default: true\n  --memory-reducer (use memory reducer)\n        type: bool  default: true\n  --memory-reducer-for-small-heaps (use memory reducer for small heaps)\n        type: bool  default: true\n  --heap-growing-percent (specifies heap growing factor as (1 + heap_growing_percent/100))\n        type: int  default: 0\n  --v8-os-page-size (override OS page size (in KBytes))\n        type: int  default: 0\n  --always-compact (Perform compaction on every full GC)\n        type: bool  default: false\n  --never-compact (Never perform compaction on full GC - testing only)\n        type: bool  default: false\n  --compact-code-space (Compact code space on full collections)\n        type: bool  default: true\n  --flush-bytecode (flush of bytecode when it has not been executed recently)\n        type: bool  default: true\n  --stress-flush-bytecode (stress bytecode flushing)\n        type: bool  default: false\n  --use-marking-progress-bar (Use a progress bar to scan large objects in increments when incremental marking is active.)\n        type: bool  default: true\n  --stress-per-context-marking-worklist (Use per-context worklist for marking)\n        type: bool  default: false\n  --force-marking-deque-overflows (force overflows of marking deque by reducing it\'s size to 64 words)\n        type: bool  default: false\n  --stress-compaction (stress the GC compactor to flush out bugs (implies --force_marking_deque_overflows))\n        type: bool  default: false\n  --stress-compaction-random (Stress GC compaction by selecting random percent of pages as evacuation candidates. It overrides stress_compaction.)\n        type: bool  default: false\n  --stress-incremental-marking (force incremental marking for small heaps and run it more often)\n        type: bool  default: false\n  --fuzzer-gc-analysis (prints number of allocations and enables analysis mode for gc fuzz testing, e.g. --stress-marking, --stress-scavenge)\n        type: bool  default: false\n  --stress-marking (force marking at random points between 0 and X (inclusive) percent of the regular marking start limit)\n        type: int  default: 0\n  --stress-scavenge (force scavenge at random points between 0 and X (inclusive) percent of the new space capacity)\n        type: int  default: 0\n  --gc-experiment-background-schedule (new background GC schedule heuristics)\n        type: bool  default: false\n  --gc-experiment-less-compaction (less compaction in non-memory reducing mode)\n        type: bool  default: false\n  --disable-abortjs (disables AbortJS runtime function)\n        type: bool  default: false\n  --randomize-all-allocations (randomize virtual memory reservations by ignoring any hints passed when allocating pages)\n        type: bool  default: false\n  --manual-evacuation-candidates-selection (Test mode only flag. It allows an unit test to select evacuation candidates pages (requires --stress_compaction).)\n        type: bool  default: false\n  --fast-promotion-new-space (fast promote new space on high survival rates)\n        type: bool  default: false\n  --clear-free-memory (initialize free memory with 0)\n        type: bool  default: false\n  --young-generation-large-objects (allocates large objects by default in the young generation large object space)\n        type: bool  default: true\n  --debug-code (generate extra code (assertions) for debugging)\n        type: bool  default: false\n  --code-comments (emit comments in code disassembly; for more readable source positions you should add --no-concurrent_recompilation)\n        type: bool  default: false\n  --enable-sse3 (enable use of SSE3 instructions if available)\n        type: bool  default: true\n  --enable-ssse3 (enable use of SSSE3 instructions if available)\n        type: bool  default: true\n  --enable-sse4-1 (enable use of SSE4.1 instructions if available)\n        type: bool  default: true\n  --enable-sse4-2 (enable use of SSE4.2 instructions if available)\n        type: bool  default: true\n  --enable-sahf (enable use of SAHF instruction if available (X64 only))\n        type: bool  default: true\n  --enable-avx (enable use of AVX instructions if available)\n        type: bool  default: true\n  --enable-fma3 (enable use of FMA3 instructions if available)\n        type: bool  default: true\n  --enable-bmi1 (enable use of BMI1 instructions if available)\n        type: bool  default: true\n  --enable-bmi2 (enable use of BMI2 instructions if available)\n        type: bool  default: true\n  --enable-lzcnt (enable use of LZCNT instruction if available)\n        type: bool  default: true\n  --enable-popcnt (enable use of POPCNT instruction if available)\n        type: bool  default: true\n  --arm-arch (generate instructions for the selected ARM architecture if available: armv6, armv7, armv7+sudiv or armv8)\n        type: string  default: armv8\n  --force-long-branches (force all emitted branches to be in long mode (MIPS/PPC only))\n        type: bool  default: false\n  --mcpu (enable optimization for specific cpu)\n        type: string  default: auto\n  --partial-constant-pool (enable use of partial constant pools (X64 only))\n        type: bool  default: true\n  --sim-arm64-optional-features (enable optional features on the simulator for testing: none or all)\n        type: string  default: none\n  --enable-source-at-csa-bind (Include source information in the binary at CSA bind locations.)\n        type: bool  default: false\n  --enable-armv7 (deprecated (use --arm_arch instead))\n        type: maybe_bool  default: unset\n  --enable-vfp3 (deprecated (use --arm_arch instead))\n        type: maybe_bool  default: unset\n  --enable-32dregs (deprecated (use --arm_arch instead))\n        type: maybe_bool  default: unset\n  --enable-neon (deprecated (use --arm_arch instead))\n        type: maybe_bool  default: unset\n  --enable-sudiv (deprecated (use --arm_arch instead))\n        type: maybe_bool  default: unset\n  --enable-armv8 (deprecated (use --arm_arch instead))\n        type: maybe_bool  default: unset\n  --enable-regexp-unaligned-accesses (enable unaligned accesses for the regexp engine)\n        type: bool  default: true\n  --script-streaming (enable parsing on background)\n        type: bool  default: true\n  --stress-background-compile (stress test parsing on background)\n        type: bool  default: false\n  --finalize-streaming-on-background (perform the script streaming finalization on the background thread)\n        type: bool  default: false\n  --disable-old-api-accessors (Disable old-style API accessors whose setters trigger through the prototype chain)\n        type: bool  default: false\n  --expose-gc (expose gc extension)\n        type: bool  default: false\n  --expose-gc-as (expose gc extension under the specified name)\n        type: string  default: nullptr\n  --expose-externalize-string (expose externalize string extension)\n        type: bool  default: false\n  --expose-trigger-failure (expose trigger-failure extension)\n        type: bool  default: false\n  --stack-trace-limit (number of stack frames to capture)\n        type: int  default: 10\n  --builtins-in-stack-traces (show built-in functions in stack traces)\n        type: bool  default: false\n  --experimental-stack-trace-frames (enable experimental frames (API/Builtins) and stack trace layout)\n        type: bool  default: false\n  --disallow-code-generation-from-strings (disallow eval and friends)\n        type: bool  default: false\n  --expose-async-hooks (expose async_hooks object)\n        type: bool  default: false\n  --expose-cputracemark-as (expose cputracemark extension under the specified name)\n        type: string  default: nullptr\n  --allow-unsafe-function-constructor (allow invoking the function constructor without security checks)\n        type: bool  default: false\n  --force-slow-path (always take the slow path for builtins)\n        type: bool  default: false\n  --test-small-max-function-context-stub-size (enable testing the function context size overflow path by making the maximum size smaller)\n        type: bool  default: false\n  --inline-new (use fast inline allocation)\n        type: bool  default: true\n  --trace (trace javascript function calls)\n        type: bool  default: false\n  --trace-wasm (trace wasm function calls)\n        type: bool  default: false\n  --lazy (use lazy compilation)\n        type: bool  default: true\n  --max-lazy (ignore eager compilation hints)\n        type: bool  default: false\n  --trace-opt (trace lazy optimization)\n        type: bool  default: false\n  --trace-opt-verbose (extra verbose compilation tracing)\n        type: bool  default: false\n  --trace-opt-stats (trace lazy optimization statistics)\n        type: bool  default: false\n  --trace-deopt (trace optimize function deoptimization)\n        type: bool  default: false\n  --trace-file-names (include file names in trace-opt/trace-deopt output)\n        type: bool  default: false\n  --always-opt (always try to optimize functions)\n        type: bool  default: false\n  --always-osr (always try to OSR functions)\n        type: bool  default: false\n  --prepare-always-opt (prepare for turning on always opt)\n        type: bool  default: false\n  --trace-serializer (print code serializer trace)\n        type: bool  default: false\n  --compilation-cache (enable compilation cache)\n        type: bool  default: true\n  --cache-prototype-transitions (cache prototype transitions)\n        type: bool  default: true\n  --parallel-compile-tasks (enable parallel compile tasks)\n        type: bool  default: false\n  --compiler-dispatcher (enable compiler dispatcher)\n        type: bool  default: false\n  --trace-compiler-dispatcher (trace compiler dispatcher activity)\n        type: bool  default: false\n  --cpu-profiler-sampling-interval (CPU profiler sampling interval in microseconds)\n        type: int  default: 1000\n  --trace-side-effect-free-debug-evaluate (print debug messages for side-effect-free debug-evaluate for testing)\n        type: bool  default: false\n  --hard-abort (abort by crashing)\n        type: bool  default: true\n  --expose-inspector-scripts (expose injected-script-source.js for debugging)\n        type: bool  default: false\n  --stack-size (default size of stack region v8 is allowed to use (in kBytes))\n        type: int  default: 984\n  --max-stack-trace-source-length (maximum length of function source code printed in a stack trace.)\n        type: int  default: 300\n  --clear-exceptions-on-js-entry (clear pending exceptions when entering JavaScript)\n        type: bool  default: false\n  --histogram-interval (time interval in ms for aggregating memory histograms)\n        type: int  default: 600000\n  --heap-profiler-trace-objects (Dump heap object allocations/movements/size_updates)\n        type: bool  default: false\n  --heap-profiler-use-embedder-graph (Use the new EmbedderGraph API to get embedder nodes)\n        type: bool  default: true\n  --heap-snapshot-string-limit (truncate strings to this length in the heap snapshot)\n        type: int  default: 1024\n  --sampling-heap-profiler-suppress-randomness (Use constant sample intervals to eliminate test flakiness)\n        type: bool  default: false\n  --use-idle-notification (Use idle notification to reduce memory footprint.)\n        type: bool  default: true\n  --trace-ic (trace inline cache state transitions for tools/ic-processor)\n        type: bool  default: false\n  --modify-field-representation-inplace (enable in-place field representation updates)\n        type: bool  default: true\n  --max-polymorphic-map-count (maximum number of maps to track in POLYMORPHIC state)\n        type: int  default: 4\n  --native-code-counters (generate extra code for manipulating stats counters)\n        type: bool  default: false\n  --thin-strings (Enable ThinString support)\n        type: bool  default: true\n  --trace-prototype-users (Trace updates to prototype user tracking)\n        type: bool  default: false\n  --trace-for-in-enumerate (Trace for-in enumerate slow-paths)\n        type: bool  default: false\n  --trace-maps (trace map creation)\n        type: bool  default: false\n  --trace-maps-details (also log map details)\n        type: bool  default: true\n  --allow-natives-syntax (allow natives syntax)\n        type: bool  default: false\n  --allow-natives-for-differential-fuzzing (allow only natives explicitly allowlisted for differential fuzzers)\n        type: bool  default: false\n  --parse-only (only parse the sources)\n        type: bool  default: false\n  --trace-sim (Trace simulator execution)\n        type: bool  default: false\n  --debug-sim (Enable debugging the simulator)\n        type: bool  default: false\n  --check-icache (Check icache flushes in ARM and MIPS simulator)\n        type: bool  default: false\n  --stop-sim-at (Simulator stop after x number of instructions)\n        type: int  default: 0\n  --sim-stack-alignment (Stack alignment in bytes in simulator (4 or 8, 8 is default))\n        type: int  default: 8\n  --sim-stack-size (Stack size of the ARM64, MIPS64 and PPC64 simulator in kBytes (default is 2 MB))\n        type: int  default: 2048\n  --log-colour (When logging, try to use coloured output.)\n        type: bool  default: true\n  --trace-sim-messages (Trace simulator debug messages. Implied by --trace-sim.)\n        type: bool  default: false\n  --async-stack-traces (include async stack traces in Error.stack)\n        type: bool  default: true\n  --stack-trace-on-illegal (print stack trace when an illegal exception is thrown)\n        type: bool  default: false\n  --abort-on-uncaught-exception (abort program (dump core) when an uncaught exception is thrown)\n        type: bool  default: false\n  --correctness-fuzzer-suppressions (Suppress certain unspecified behaviors to ease correctness fuzzing: Abort program when the stack overflows or a string exceeds maximum length (as opposed to throwing RangeError). Use a fixed suppression string for error messages.)\n        type: bool  default: false\n  --randomize-hashes (randomize hashes to avoid predictable hash collisions (with snapshots this option cannot override the baked-in seed))\n        type: bool  default: true\n  --rehash-snapshot (rehash strings from the snapshot to override the baked-in seed)\n        type: bool  default: true\n  --hash-seed (Fixed seed to use to hash property keys (0 means random)(with snapshots this option cannot override the baked-in seed))\n        type: uint64  default: 0\n  --random-seed (Default seed for initializing random generator (0, the default, means to use system random).)\n        type: int  default: 0\n  --fuzzer-random-seed (Default seed for initializing fuzzer random generator (0, the default, means to use v8\'s random number generator seed).)\n        type: int  default: 0\n  --trace-rail (trace RAIL mode)\n        type: bool  default: false\n  --print-all-exceptions (print exception object and stack trace on each thrown exception)\n        type: bool  default: false\n  --detailed-error-stack-trace (includes arguments for each function call in the error stack frames array)\n        type: bool  default: false\n  --adjust-os-scheduling-parameters (adjust OS specific scheduling params for the isolate)\n        type: bool  default: true\n  --runtime-call-stats (report runtime call counts and times)\n        type: bool  default: false\n  --rcs (report runtime call counts and times)\n        type: bool  default: false\n  --rcs-cpu-time (report runtime times in cpu time (the default is wall time))\n        type: bool  default: false\n  --profile-deserialization (Print the time it takes to deserialize the snapshot.)\n        type: bool  default: false\n  --serialization-statistics (Collect statistics on serialized objects.)\n        type: bool  default: false\n  --serialization-chunk-size (Custom size for serialization chunks)\n        type: uint  default: 4096\n  --regexp-optimization (generate optimized regexp code)\n        type: bool  default: true\n  --regexp-mode-modifiers (enable inline flags in regexp.)\n        type: bool  default: false\n  --regexp-interpret-all (interpret all regexp code)\n        type: bool  default: false\n  --regexp-tier-up (enable regexp interpreter and tier up to the compiler after the number of executions set by the tier up ticks flag)\n        type: bool  default: true\n  --regexp-tier-up-ticks (set the number of executions for the regexp interpreter before tiering-up to the compiler)\n        type: int  default: 1\n  --regexp-peephole-optimization (enable peephole optimization for regexp bytecode)\n        type: bool  default: true\n  --trace-regexp-peephole-optimization (trace regexp bytecode peephole optimization)\n        type: bool  default: false\n  --trace-regexp-bytecodes (trace regexp bytecode execution)\n        type: bool  default: false\n  --trace-regexp-assembler (trace regexp macro assembler calls.)\n        type: bool  default: false\n  --trace-regexp-parser (trace regexp parsing)\n        type: bool  default: false\n  --trace-regexp-tier-up (trace regexp tiering up execution)\n        type: bool  default: false\n  --testing-bool-flag (testing_bool_flag)\n        type: bool  default: true\n  --testing-maybe-bool-flag (testing_maybe_bool_flag)\n        type: maybe_bool  default: unset\n  --testing-int-flag (testing_int_flag)\n        type: int  default: 13\n  --testing-float-flag (float-flag)\n        type: float  default: 2.5\n  --testing-string-flag (string-flag)\n        type: string  default: Hello, world!\n  --testing-prng-seed (Seed used for threading test randomness)\n        type: int  default: 42\n  --testing-d8-test-runner (test runner turns on this flag to enable a check that the function was prepared for optimization before marking it for optimization)\n        type: bool  default: false\n  --fuzzing (Fuzzers use this flag to signal that they are ... fuzzing. This causes intrinsics to fail silently (e.g. return undefined) on invalid usage.)\n        type: bool  default: false\n  --embedded-src (Path for the generated embedded data file. (mksnapshot only))\n        type: string  default: nullptr\n  --embedded-variant (Label to disambiguate symbols in embedded data file. (mksnapshot only))\n        type: string  default: nullptr\n  --startup-src (Write V8 startup as C++ src. (mksnapshot only))\n        type: string  default: nullptr\n  --startup-blob (Write V8 startup blob file. (mksnapshot only))\n        type: string  default: nullptr\n  --target-arch (The mksnapshot target arch. (mksnapshot only))\n        type: string  default: nullptr\n  --target-os (The mksnapshot target os. (mksnapshot only))\n        type: string  default: nullptr\n  --target-is-simulator (Instruct mksnapshot that the target is meant to run in the simulator and it can generate simulator-specific instructions. (mksnapshot only))\n        type: bool  default: false\n  --minor-mc-parallel-marking (use parallel marking for the young generation)\n        type: bool  default: true\n  --trace-minor-mc-parallel-marking (trace parallel marking for the young generation)\n        type: bool  default: false\n  --minor-mc (perform young generation mark compact GCs)\n        type: bool  default: false\n  --help (Print usage message, including flags, on console)\n        type: bool  default: true\n  --dump-counters (Dump counters on exit)\n        type: bool  default: false\n  --dump-counters-nvp (Dump counters as name-value pairs on exit)\n        type: bool  default: false\n  --use-external-strings (Use external strings for source code)\n        type: bool  default: false\n  --map-counters (Map counters to a file)\n        type: string  default:\n  --mock-arraybuffer-allocator (Use a mock ArrayBuffer allocator for testing.)\n        type: bool  default: false\n  --mock-arraybuffer-allocator-limit (Memory limit for mock ArrayBuffer allocator used to simulate OOM for testing.)\n        type: size_t  default: 0\n  --gdbjit (enable GDBJIT interface)\n        type: bool  default: false\n  --gdbjit-full (enable GDBJIT interface for all code objects)\n        type: bool  default: false\n  --gdbjit-dump (dump elf objects with debug info to disk)\n        type: bool  default: false\n  --gdbjit-dump-filter (dump only objects containing this substring)\n        type: string  default:\n  --log (Minimal logging (no API, code, GC, suspect, or handles samples).)\n        type: bool  default: false\n  --log-all (Log all events to the log file.)\n        type: bool  default: false\n  --log-api (Log API events to the log file.)\n        type: bool  default: false\n  --log-code (Log code events to the log file without profiling.)\n        type: bool  default: false\n  --log-handles (Log global handle events.)\n        type: bool  default: false\n  --log-suspect (Log suspect operations.)\n        type: bool  default: false\n  --log-source-code (Log source code.)\n        type: bool  default: false\n  --log-function-events (Log function events (parse, compile, execute) separately.)\n        type: bool  default: false\n  --prof (Log statistical profiling information (implies --log-code).)\n        type: bool  default: false\n  --detailed-line-info (Always generate detailed line information for CPU profiling.)\n        type: bool  default: false\n  --prof-sampling-interval (Interval for --prof samples (in microseconds).)\n        type: int  default: 1000\n  --prof-cpp (Like --prof, but ignore generated code.)\n        type: bool  default: false\n  --prof-browser-mode (Used with --prof, turns on browser-compatible mode for profiling.)\n        type: bool  default: true\n  --logfile (Specify the name of the log file.)\n        type: string  default: v8.log\n  --logfile-per-isolate (Separate log files for each isolate.)\n        type: bool  default: true\n  --ll-prof (Enable low-level linux profiler.)\n        type: bool  default: false\n  --gc-fake-mmap (Specify the name of the file for fake gc mmap used in ll_prof)\n        type: string  default: /tmp/__v8_gc__\n  --log-internal-timer-events (Time internal events.)\n        type: bool  default: false\n  --redirect-code-traces (output deopt information and disassembly into file code-<pid>-<isolate id>.asm)\n        type: bool  default: false\n  --redirect-code-traces-to (output deopt information and disassembly into the given file)\n        type: string  default: nullptr\n  --print-opt-source (print source code of optimized and inlined functions)\n        type: bool  default: false\n  --vtune-prof-annotate-wasm (Used when v8_enable_vtunejit is enabled, load wasm source map and provide annotate support (experimental).)\n        type: bool  default: false\n  --win64-unwinding-info (Enable unwinding info for Windows/x64)\n        type: bool  default: true\n  --interpreted-frames-native-stack (Show interpreted frames on the native stack (useful for external profilers).)\n        type: bool  default: false\n  --predictable (enable predictable mode)\n        type: bool  default: false\n  --predictable-gc-schedule (Predictable garbage collection schedule. Fixes heap growing, idle, and memory reducing behavior.)\n        type: bool  default: false\n  --single-threaded (disable the use of background tasks)\n        type: bool  default: false\n  --single-threaded-gc (disable the use of background gc tasks)\n        type: bool  default: false\n')),(0,o.kt)("p",null,"Particularly useful ones:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"--async-stack-traces\n")))}f.isMDXComponent=!0}}]);