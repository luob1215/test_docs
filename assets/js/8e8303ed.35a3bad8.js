"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[6657],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=p(n),d=l,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||r;return n?a.createElement(f,i(i({ref:t},s),{},{components:n})):a.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[u]="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},58470:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(87462),l=(n(67294),n(3905));const r={},i="Compiling Executables",o={unversionedId:"manual/tools/compiler",id:"manual/tools/compiler",title:"Compiling Executables",description:"deno compile [--output ]  will compile the script into a",source:"@site/runtime/manual/tools/compiler.md",sourceDirName:"manual/tools",slug:"/manual/tools/compiler",permalink:"/runtime/manual/tools/compiler",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Benchmarking Tool",permalink:"/runtime/manual/tools/benchmarker"},next:{title:"Dependency Inspector",permalink:"/runtime/manual/tools/dependency_inspector"}},c={},p=[{value:"Flags",id:"flags",level:2},{value:"Dynamic Imports",id:"dynamic-imports",level:2},{value:"Workers",id:"workers",level:2},{value:"Cross Compilation",id:"cross-compilation",level:2},{value:"Unavailable in executables",id:"unavailable-in-executables",level:2}],s={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"compiling-executables"},"Compiling Executables"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"deno compile [--output <OUT>] <SRC>")," will compile the script into a\nself-contained executable."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"> deno compile https://deno.land/std/examples/welcome.ts\n")),(0,l.kt)("p",null,"If you omit the ",(0,l.kt)("inlineCode",{parentName:"p"},"OUT")," parameter, the name of the executable file will be\ninferred."),(0,l.kt)("h2",{id:"flags"},"Flags"),(0,l.kt)("p",null,"As with ",(0,l.kt)("a",{parentName:"p",href:"/runtime/manual/tools/script_installer"},(0,l.kt)("inlineCode",{parentName:"a"},"deno install")),", the runtime flags used to\nexecute the script must be specified at compilation time. This includes\npermission flags."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"> deno compile --allow-read --allow-net https://deno.land/std/http/file_server.ts\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/runtime/manual/getting_started/command_line_interface#script-arguments"},"Script arguments"),"\ncan be partially embedded."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"> deno compile --allow-read --allow-net https://deno.land/std/http/file_server.ts -p 8080\n> ./file_server --help\n")),(0,l.kt)("h2",{id:"dynamic-imports"},"Dynamic Imports"),(0,l.kt)("p",null,"By default, statically analyzable dynamic imports (imports that have the string\nliteral within the ",(0,l.kt)("inlineCode",{parentName:"p"},'import("...")')," call expression) will be included in the\noutput."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'// calculator.ts and its dependencies will be included in the binary\nconst calculator = await import("./calculator.ts");\n')),(0,l.kt)("p",null,"But non-statically analyzable dynamic imports won't:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'const specifier = condition ? "./calc.ts" : "./better_calc.ts";\nconst calculator = await import(specifier);\n')),(0,l.kt)("p",null,"To include non-statically analyzable dynamic imports, specify an\n",(0,l.kt)("inlineCode",{parentName:"p"},"--include <path>")," flag."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"deno compile --include calc.ts --include better_calc.ts main.ts\n")),(0,l.kt)("h2",{id:"workers"},"Workers"),(0,l.kt)("p",null,"Similarly to non-statically analyzable dynamic imports, code for\n",(0,l.kt)("a",{parentName:"p",href:"/runtime/manual/runtime/workers"},"workers")," is not included in the compiled executable by\ndefault. You must use the ",(0,l.kt)("inlineCode",{parentName:"p"},"--include <path>")," flag to include the worker code."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"deno compile --include worker.ts main.ts\n")),(0,l.kt)("h2",{id:"cross-compilation"},"Cross Compilation"),(0,l.kt)("p",null,"You can compile binaries for other platforms by adding the ",(0,l.kt)("inlineCode",{parentName:"p"},"--target")," CLI flag.\nDeno currently supports compiling to Windows x64, macOS x64, macOS ARM and Linux\nx64. Use ",(0,l.kt)("inlineCode",{parentName:"p"},"deno compile --help")," to list the full values for each compilation\ntarget."),(0,l.kt)("h2",{id:"unavailable-in-executables"},"Unavailable in executables"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/runtime/manual/runtime/web_storage_api"},"Web Storage API"))))}m.isMDXComponent=!0}}]);