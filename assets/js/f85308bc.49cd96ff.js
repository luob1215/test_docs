"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[2954],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>y});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,y=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return t?a.createElement(y,s(s({ref:n},d),{},{components:t})):a.createElement(y,s({ref:n},d))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},22605:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const o={},s="Parsing and Stringifying CSS",i={unversionedId:"manual/advanced/jsx_dom/css",id:"manual/advanced/jsx_dom/css",title:"Parsing and Stringifying CSS",description:"If you want to parse CSS to a abstract syntax tree (AST) then there are two",source:"@site/runtime/manual/advanced/jsx_dom/css.md",sourceDirName:"manual/advanced/jsx_dom",slug:"/manual/advanced/jsx_dom/css",permalink:"/runtime/manual/advanced/jsx_dom/css",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Configuring JSX in Deno",permalink:"/runtime/manual/advanced/jsx_dom/jsx"},next:{title:"Using Twind with Deno",permalink:"/runtime/manual/advanced/jsx_dom/twind"}},l={},c=[{value:"Basic example with <code>reworkcss/css</code>",id:"basic-example-with-reworkcsscss",level:2},{value:"A basic example with <code>deno_css</code>",id:"a-basic-example-with-deno_css",level:2}],d={toc:c},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"parsing-and-stringifying-css"},"Parsing and Stringifying CSS"),(0,r.kt)("p",null,"If you want to parse CSS to a abstract syntax tree (AST) then there are two\nsolutions you might want to consider:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/reworkcss/css"},"reworkcss/css")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://deno.land/x/css"},"deno_css"))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"reworkcss/css")," was written originally for Node.js but work well when consumed\nfrom a CDN. Importing from ",(0,r.kt)("inlineCode",{parentName:"p"},"esm.sh")," also automatically combines the type\ndefinitions from DefinitelyTyped. It should be noted though that types on\nDefinitelyTyped are not ",(0,r.kt)("em",{parentName:"p"},"very good")," as many union types that should be tagged\nunion types are just union types which leave the types very ambiguous and\nrequire a lot of type casting."),(0,r.kt)("p",null,"Also, if you want to take an AST and generate CSS, ",(0,r.kt)("inlineCode",{parentName:"p"},"reworkcss/css")," also provides\ncapability to stringify the AST it generates."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"deno_css")," is authored in TypeScript specifically for Deno and is available on\n",(0,r.kt)("inlineCode",{parentName:"p"},"deno.land/x"),"."),(0,r.kt)("h2",{id:"basic-example-with-reworkcsscss"},"Basic example with ",(0,r.kt)("inlineCode",{parentName:"h2"},"reworkcss/css")),(0,r.kt)("p",null,"In this example, we will parse some CSS into an AST and make a modification to\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"background")," declaration of the ",(0,r.kt)("inlineCode",{parentName:"p"},"body")," rule, to change the color to ",(0,r.kt)("inlineCode",{parentName:"p"},"white"),".\nThen we will stringify the modified CSS AST and output it to the console:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'import * as css from "https://esm.sh/css@3.0.0";\nimport { assert } from "https://deno.land/std@0.208.0/assert/mod.ts";\n\ndeclare global {\n  interface AbortSignal {\n    reason: unknown;\n  }\n}\n\nconst ast = css.parse(`\nbody {\n  background: #eee;\n  color: #888;\n}\n`);\n\nassert(ast.stylesheet);\nconst body = ast.stylesheet.rules[0] as css.Rule;\nassert(body.declarations);\nconst background = body.declarations[0] as css.Declaration;\nbackground.value = "white";\n\nconsole.log(css.stringify(ast));\n')),(0,r.kt)("h2",{id:"a-basic-example-with-deno_css"},"A basic example with ",(0,r.kt)("inlineCode",{parentName:"h2"},"deno_css")),(0,r.kt)("p",null,"In this example, we will parse some CSS into an AST and log out the ",(0,r.kt)("inlineCode",{parentName:"p"},"background"),"\ndeclaration of the ",(0,r.kt)("inlineCode",{parentName:"p"},"body")," rule to the console."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import * as css from "https://deno.land/x/css@0.3.0/mod.ts";\n\nconst ast = css.parse(`\nbody {\n  background: #eee;\n  color: #888;\n}\n`);\n\nconst [body] = ast.stylesheet.rules;\nconst [background] = body.declarations;\n\nconsole.log(JSON.stringify(background, undefined, "  "));\n')))}u.isMDXComponent=!0}}]);