"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[3379],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=d(n),c=i,k=m["".concat(p,".").concat(c)]||m[c]||u[c]||r;return n?a.createElement(k,l(l({ref:t},s),{},{components:n})):a.createElement(k,l({ref:t},s))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},21828:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));const r={},l="Configuring TypeScript in Deno",o={unversionedId:"manual/advanced/typescript/configuration",id:"manual/advanced/typescript/configuration",title:"Configuring TypeScript in Deno",description:"TypeScript comes with a lot of different options that can be configured, but",source:"@site/runtime/manual/advanced/typescript/configuration.md",sourceDirName:"manual/advanced/typescript",slug:"/manual/advanced/typescript/configuration",permalink:"/runtime/manual/advanced/typescript/configuration",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Types and Type Declarations",permalink:"/runtime/manual/advanced/typescript/types"},next:{title:"Migrating to and from JavaScript",permalink:"/runtime/manual/advanced/typescript/migration"}},p={},d=[{value:"How Deno uses a configuration file",id:"how-deno-uses-a-configuration-file",level:2},{value:"What an implied tsconfig.json looks like",id:"what-an-implied-tsconfigjson-looks-like",level:2},{value:"Using the &quot;lib&quot; property",id:"using-the-lib-property",level:2},{value:"Targeting Deno and the Browser",id:"targeting-deno-and-the-browser",level:3},{value:"Using the &quot;types&quot; property",id:"using-the-types-property",level:2}],s={toc:d},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"configuring-typescript-in-deno"},"Configuring TypeScript in Deno"),(0,i.kt)("p",null,'TypeScript comes with a lot of different options that can be configured, but\nDeno strives to make it easy to use TypeScript with Deno. Lots of different\noptions frustrates that goal. To make things easier, Deno configures TypeScript\nto "just work" and shouldn\'t require additional configuration.'),(0,i.kt)("p",null,"That being said, Deno does support using a TypeScript configuration file. To use\na TypeScript configuration file with Deno, you may provide a path on the command\nline, or use the default. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"> deno run --config ./deno.json main.ts\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f Do consider though that if you are creating libraries that require a\nconfiguration file, all of the consumers of your modules will require that\nconfiguration file too if you distribute your modules as TypeScript. In\naddition, there could be settings you do in the configuration file that make\nother TypeScript modules incompatible. Honestly it is best to use the Deno\ndefaults and to think long and hard about using a configuration file.")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f Deno v1.14 started supporting a more general configuration file that is no\nlonger confined to specifying TypeScript compiler settings. Using\n",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," as a file name will still work, but we recommend to use\n",(0,i.kt)("inlineCode",{parentName:"p"},"deno.json")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"deno.jsonc"),", as an automatic lookup of this file is planned\nfor an upcoming release.")),(0,i.kt)("h2",{id:"how-deno-uses-a-configuration-file"},"How Deno uses a configuration file"),(0,i.kt)("p",null,"Deno does not process a TypeScript configuration file like ",(0,i.kt)("inlineCode",{parentName:"p"},"tsc")," does, as there\nare lots of parts of a TypeScript configuration file that are meaningless in a\nDeno context or would cause Deno to not function properly if they were applied."),(0,i.kt)("p",null,"Deno only looks at the ",(0,i.kt)("inlineCode",{parentName:"p"},"compilerOptions")," section of a configuration file, and\neven then it only considers certain compiler options, with the rest being\nignored."),(0,i.kt)("p",null,"Here is a table of compiler options that can be changed, their default in Deno\nand any other notes about that option:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Option"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"allowJs")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null},"This almost never needs to be changed")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"allowUnreachableCode")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"allowUnusedLabels")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"checkJs")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true")," causes TypeScript to type check JavaScript")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"jsx")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"react"')),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"jsxFactory")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"React.createElement"')),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"jsxFragmentFactory")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"React.Fragment"')),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"keyofStringsOnly")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"lib")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'[ "deno.window" ]')),(0,i.kt)("td",{parentName:"tr",align:null},"The default for this varies based on other settings in Deno. If it is supplied, it overrides the default. See below for more information.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"noErrorTruncation")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"noFallthroughCasesInSwitch")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"noImplicitAny")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"noImplicitReturns")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"noImplicitThis")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"noImplicitUseStrict")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"noStrictGenericChecks")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"noUnusedLocals")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"noUnusedParameters")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"noUncheckedIndexedAccess")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"reactNamespace")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"React")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"strict")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"strictBindCallApply")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"strictFunctionTypes")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"strictPropertyInitialization")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"strictNullChecks")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"suppressExcessPropertyErrors")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"suppressImplicitAnyIndexErrors")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"useUnknownInCatchVariables")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("p",null,"For a full list of compiler options and how they affect TypeScript, please refer\nto the\n",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/compiler-options.html"},"TypeScript Handbook"),"."),(0,i.kt)("h2",{id:"what-an-implied-tsconfigjson-looks-like"},"What an implied tsconfig.json looks like"),(0,i.kt)("p",null,"It is impossible to get ",(0,i.kt)("inlineCode",{parentName:"p"},"tsc")," to behave like Deno. It is also difficult to get\nthe TypeScript language service to behave like Deno. This is why we have built a\nlanguage service directly into Deno. That being said, it can be useful to\nunderstand what is implied."),(0,i.kt)("p",null,"If you were to write a ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," for Deno, it would look something like\nthis:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "allowJs": true,\n    "esModuleInterop": true,\n    "experimentalDecorators": true,\n    "inlineSourceMap": true,\n    "isolatedModules": true,\n    "jsx": "react",\n    "lib": ["deno.window"],\n    "module": "esnext",\n    "moduleDetection": "force",\n    "strict": true,\n    "target": "esnext",\n    "useDefineForClassFields": true\n  }\n}\n')),(0,i.kt)("p",null,"You can't copy paste this into a configuration file and get it to work,\nspecifically because of the built-in type libraries that are custom to Deno\nwhich are provided to the TypeScript compiler. This can somewhat be mocked by\nrunning ",(0,i.kt)("inlineCode",{parentName:"p"},"deno types")," on the command line and piping the output to a file and\nincluding that in the files as part of the program, removing the ",(0,i.kt)("inlineCode",{parentName:"p"},'"lib"')," option,\nand setting the ",(0,i.kt)("inlineCode",{parentName:"p"},'"noLib"')," option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,"If you use the ",(0,i.kt)("inlineCode",{parentName:"p"},"--unstable")," flag, Deno will change the ",(0,i.kt)("inlineCode",{parentName:"p"},'"lib"')," option to\n",(0,i.kt)("inlineCode",{parentName:"p"},'[ "deno.window", "deno.unstable" ]'),". If you are trying to load a worker, that\nis type checked with ",(0,i.kt)("inlineCode",{parentName:"p"},'"deno.worker"')," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},'"deno.window"'),". See\n",(0,i.kt)("a",{parentName:"p",href:"/runtime/manual/advanced/typescript/types#type-checking-web-workers"},"Type Checking Web Workers")," for more\ninformation on this."),(0,i.kt)("h2",{id:"using-the-lib-property"},'Using the "lib" property'),(0,i.kt)("p",null,"Deno has several libraries built into it that are not present in other\nplatforms, like ",(0,i.kt)("inlineCode",{parentName:"p"},"tsc"),". This is what enables Deno to properly check code written\nfor Deno. In some situations though, this automatic behavior can cause\nchallenges, for example like writing code that is intended to also run in a\nbrowser. In these situations the ",(0,i.kt)("inlineCode",{parentName:"p"},'"lib"')," property of a ",(0,i.kt)("inlineCode",{parentName:"p"},"compilerOptions")," can be\nused to modify the behavior of Deno when type checking code."),(0,i.kt)("p",null,"The built-in libraries that are of interest to users:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"deno.ns"')," - This includes all the custom ",(0,i.kt)("inlineCode",{parentName:"li"},"Deno")," global namespace APIs plus\nthe Deno additions to ",(0,i.kt)("inlineCode",{parentName:"li"},"import.meta"),". This should generally not conflict with\nother libraries or global types."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"deno.unstable"')," - This includes the addition unstable ",(0,i.kt)("inlineCode",{parentName:"li"},"Deno")," global\nnamespace APIs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"deno.window"'),' - This is the "default" library used when checking Deno main\nruntime scripts. It includes the ',(0,i.kt)("inlineCode",{parentName:"li"},'"deno.ns"')," as well as other type libraries\nfor the extensions that are built into Deno. This library will conflict with\nlibraries like ",(0,i.kt)("inlineCode",{parentName:"li"},'"dom"')," and ",(0,i.kt)("inlineCode",{parentName:"li"},'"dom.iterable"')," that are standard TypeScript\nlibraries."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"deno.worker"')," - This is the library used when checking a Deno web worker\nscript. For more information about web workers, check out\n",(0,i.kt)("a",{parentName:"li",href:"/runtime/manual/advanced/typescript/types#type-checking-web-workers"},"Type Checking Web Workers"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"dom.asynciterable"')," - TypeScript currently does not include the DOM async\niterables that Deno implements (plus several browsers), so we have implemented\nit ourselves until it becomes available in TypeScript.")),(0,i.kt)("p",null,"These are common libraries that Deno doesn't use, but are useful when writing\ncode that is intended to also work in another runtime:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"dom"')," - The main browser global library that ships with TypeScript. The type\ndefinitions conflict in many ways with ",(0,i.kt)("inlineCode",{parentName:"li"},'"deno.window"')," and so if ",(0,i.kt)("inlineCode",{parentName:"li"},'"dom"')," is\nused, then consider using just ",(0,i.kt)("inlineCode",{parentName:"li"},'"deno.ns"')," to expose the Deno specific APIs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"dom.iterable"')," - The iterable extensions to the browser global library."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"scripthost"')," - The library for the Microsoft Windows Script Host."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"webworker"')," - The main library for web workers in the browser. Like ",(0,i.kt)("inlineCode",{parentName:"li"},'"dom"'),"\nthis will conflict with ",(0,i.kt)("inlineCode",{parentName:"li"},'"deno.window"')," or ",(0,i.kt)("inlineCode",{parentName:"li"},'"deno.worker"'),", so consider using\njust ",(0,i.kt)("inlineCode",{parentName:"li"},'"deno.ns"')," to expose the Deno specific APIs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"webworker.importscripts"')," - The library that exposes the ",(0,i.kt)("inlineCode",{parentName:"li"},"importScripts()"),"\nAPI in the web worker."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"webworker.iterable"')," - The library that adds iterables to objects within a\nweb worker. Modern browsers support this.")),(0,i.kt)("h3",{id:"targeting-deno-and-the-browser"},"Targeting Deno and the Browser"),(0,i.kt)("p",null,"A common use case is writing code that works in Deno and the browser: using a\nconditional check to determine the environment in which the code is executing\nbefore using any APIs which are exclusive to one or the other. If that is the\ncase, a common configuration of a ",(0,i.kt)("inlineCode",{parentName:"p"},"compilerOptions")," would look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "target": "esnext",\n    "lib": ["dom", "dom.iterable", "dom.asynciterable", "deno.ns"]\n  }\n}\n')),(0,i.kt)("p",null,"This should allow most code to be type checked properly by Deno."),(0,i.kt)("p",null,"If you expect to run the code in Deno with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--unstable")," flag, then you will\nwant to add that library to the mix as well:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "target": "esnext",\n    "lib": [\n      "dom",\n      "dom.iterable",\n      "dom.asynciterable",\n      "deno.ns",\n      "deno.unstable"\n    ]\n  }\n}\n')),(0,i.kt)("p",null,"Typically when you use the ",(0,i.kt)("inlineCode",{parentName:"p"},'"lib"'),' option in TypeScript, you need to include an\n"es" library as well. In the case of ',(0,i.kt)("inlineCode",{parentName:"p"},'"deno.ns"')," and ",(0,i.kt)("inlineCode",{parentName:"p"},'"deno.unstable"'),", they\nautomatically include ",(0,i.kt)("inlineCode",{parentName:"p"},'"esnext"')," when you bring them in."),(0,i.kt)("p",null,'The biggest "danger" when doing something like this, is that the type checking\nis significantly looser, and there is no way to validate that you are doing\nsufficient and effective feature detection in your code, which may lead to what\ncould be trivial errors becoming runtime errors.'),(0,i.kt)("h2",{id:"using-the-types-property"},'Using the "types" property'),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},'"types"')," property in ",(0,i.kt)("inlineCode",{parentName:"p"},'"compilerOptions"')," can be used to specify arbitrary\ntype definitions to include when type checking a program. For more information\non this see\n",(0,i.kt)("a",{parentName:"p",href:"/runtime/manual/advanced/typescript/types#using-ambient-or-global-types"},"Using ambient or global types"),"."))}u.isMDXComponent=!0}}]);