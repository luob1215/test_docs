"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[4764],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return t?r.createElement(f,a(a({ref:n},c),{},{components:t})):r.createElement(f,a({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var p=2;p<s;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},39744:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=t(87462),o=(t(67294),t(3905));const s={},a="Creating a Subprocess",i={unversionedId:"tutorials/subprocess",id:"tutorials/subprocess",title:"Creating a Subprocess",description:"Concepts",source:"@site/runtime/tutorials/subprocess.md",sourceDirName:"tutorials",slug:"/tutorials/subprocess",permalink:"/runtime/tutorials/subprocess",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeTutorialsHome",previous:{title:"TCP echo Server",permalink:"/runtime/tutorials/tcp_echo"},next:{title:"Handle OS Signals",permalink:"/runtime/tutorials/os_signals"}},l={},p=[{value:"Concepts",id:"concepts",level:2},{value:"Simple example",id:"simple-example",level:2},{value:"Security",id:"security",level:2},{value:"Communicating with subprocesses",id:"communicating-with-subprocesses",level:2},{value:"Piping to files",id:"piping-to-files",level:2}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"creating-a-subprocess"},"Creating a Subprocess"),(0,o.kt)("h2",{id:"concepts"},"Concepts"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Deno is capable of spawning a subprocess via\n",(0,o.kt)("a",{parentName:"li",href:"https://deno.land/api?s=Deno.Command"},"Deno.Command"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--allow-run")," permission is required to spawn a subprocess."),(0,o.kt)("li",{parentName:"ul"},"Spawned subprocesses do not run in a security sandbox."),(0,o.kt)("li",{parentName:"ul"},"Communicate with the subprocess via the\n",(0,o.kt)("a",{parentName:"li",href:"https://deno.land/api?s=Deno.stdin"},"stdin"),",\n",(0,o.kt)("a",{parentName:"li",href:"https://deno.land/api?s=Deno.stdout"},"stdout")," and\n",(0,o.kt)("a",{parentName:"li",href:"https://deno.land/api?s=Deno.stderr"},"stderr")," streams.")),(0,o.kt)("h2",{id:"simple-example"},"Simple example"),(0,o.kt)("p",null,"This example is the equivalent of running ",(0,o.kt)("inlineCode",{parentName:"p"},"'echo hello'")," from the command line."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * subprocess_simple.ts\n */\n\n// define command used to create the subprocess\nconst command = new Deno.Command(Deno.execPath(), {\n  args: [\n    "eval",\n    "console.log(\'hello\'); console.error(\'world\')",\n  ],\n});\n\n// create subprocess and collect output\nconst { code, stdout, stderr } = await command.output();\n\nconsole.assert(code === 0);\nconsole.assert("world\\n" === new TextDecoder().decode(stderr));\nconsole.log(new TextDecoder().decode(stdout));\n')),(0,o.kt)("p",null,"Run it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ deno run --allow-run --allow-read ./subprocess_simple.ts\nhello\n")),(0,o.kt)("h2",{id:"security"},"Security"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"--allow-run")," permission is required for creation of a subprocess. Be aware\nthat subprocesses are not run in a Deno sandbox and therefore have the same\npermissions as if you were to run the command from the command line yourself."),(0,o.kt)("h2",{id:"communicating-with-subprocesses"},"Communicating with subprocesses"),(0,o.kt)("p",null,"By default when you use ",(0,o.kt)("inlineCode",{parentName:"p"},"Deno.Command()")," the subprocess inherits ",(0,o.kt)("inlineCode",{parentName:"p"},"stdin"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"stdout")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"stderr")," of the parent process. If you want to communicate with\nstarted a subprocess you must use the ",(0,o.kt)("inlineCode",{parentName:"p"},'"piped"')," option."),(0,o.kt)("h2",{id:"piping-to-files"},"Piping to files"),(0,o.kt)("p",null,"This example is the equivalent of running ",(0,o.kt)("inlineCode",{parentName:"p"},"yes &> ./process_output")," in bash."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * subprocess_piping_to_file.ts\n */\n\nimport {\n  mergeReadableStreams,\n} from "https://deno.land/std@0.208.0/streams/merge_readable_streams.ts";\n\n// create the file to attach the process to\nconst file = await Deno.open("./process_output.txt", {\n  read: true,\n  write: true,\n  create: true,\n});\n\n// start the process\nconst command = new Deno.Command("yes", {\n  stdout: "piped",\n  stderr: "piped",\n});\n\nconst process = command.spawn();\n\n// example of combining stdout and stderr while sending to a file\nconst joined = mergeReadableStreams(\n  process.stdout,\n  process.stderr,\n);\n\n// returns a promise that resolves when the process is killed/closed\njoined.pipeTo(file.writable).then(() => console.log("pipe join done"));\n\n// manually stop process "yes" will never end on its own\nsetTimeout(() => {\n  process.kill();\n}, 100);\n')),(0,o.kt)("p",null,"Run it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ deno run --allow-run --allow-read --allow-write ./subprocess_piping_to_file.ts\n")))}d.isMDXComponent=!0}}]);