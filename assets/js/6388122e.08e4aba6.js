"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[8204],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},54469:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={},i="Fetch Data",l={unversionedId:"tutorials/fetch_data",id:"tutorials/fetch_data",title:"Fetch Data",description:"Concepts",source:"@site/runtime/tutorials/fetch_data.md",sourceDirName:"tutorials",slug:"/tutorials/fetch_data",permalink:"/runtime/tutorials/fetch_data",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeTutorialsHome",previous:{title:"Managing Dependencies",permalink:"/runtime/tutorials/manage_dependencies"},next:{title:"Read and Write Files",permalink:"/runtime/tutorials/read_write_files"}},s={},p=[{value:"Concepts",id:"concepts",level:2},{value:"Overview",id:"overview",level:2},{value:"Example",id:"example",level:2},{value:"Files and Streams",id:"files-and-streams",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"fetch-data"},"Fetch Data"),(0,r.kt)("h2",{id:"concepts"},"Concepts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Like browsers, Deno implements web standard APIs such as\n",(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},"fetch"),"."),(0,r.kt)("li",{parentName:"ul"},"Deno is secure by default, meaning explicit permission must be granted to\naccess the network."),(0,r.kt)("li",{parentName:"ul"},"See also: Deno's ",(0,r.kt)("a",{parentName:"li",href:"/runtime/manual/basics/permissions"},"permissions")," model.")),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"When building any sort of web application developers will usually need to\nretrieve data from somewhere else on the web. This works no differently in Deno\nthan in any other JavaScript application, just call the ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch()")," method. For\nmore information on fetch read the\n",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},"MDN documentation"),"."),(0,r.kt)("p",null,"The exception with Deno occurs when running a script which makes a call over the\nweb. Deno is secure by default which means access to IO (Input / Output) is\nprohibited. To make a call over the web Deno must be explicitly told it is ok to\ndo so. This is achieved by adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"--allow-net")," flag to the ",(0,r.kt)("inlineCode",{parentName:"p"},"deno run"),"\ncommand."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Command:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"deno run --allow-net fetch.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * Output: JSON Data\n */\nconst jsonResponse = await fetch("https://api.github.com/users/denoland");\nconst jsonData = await jsonResponse.json();\nconsole.log(jsonData);\n\n/**\n * Output: HTML Data\n */\nconst textResponse = await fetch("https://deno.land/");\nconst textData = await textResponse.text();\nconsole.log(textData);\n\n/**\n * Output: Error Message\n */\ntry {\n  await fetch("https://does.not.exist/");\n} catch (error) {\n  console.log(error);\n}\n')),(0,r.kt)("h2",{id:"files-and-streams"},"Files and Streams"),(0,r.kt)("p",null,"Like in browsers, sending and receiving large files is possible thanks to the\n",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Streams_API"},"Streams API"),".\n",(0,r.kt)("a",{parentName:"p",href:"https://deno.land/api?s=Deno.FsFile"},(0,r.kt)("inlineCode",{parentName:"a"},"Deno.FsFile"))," API provides two\nproperties: ",(0,r.kt)("a",{parentName:"p",href:"https://deno.land/api?s=Deno.FsFile#prop_readable"},(0,r.kt)("inlineCode",{parentName:"a"},"readable"))," and\n",(0,r.kt)("a",{parentName:"p",href:"https://deno.land/api?s=Deno.FsFile#prop_writable"},(0,r.kt)("inlineCode",{parentName:"a"},"writable")),", which can be\nused to convert a Deno file into a writable or readable stream."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Command:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"deno run --allow-read --allow-write --allow-net fetch_file.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Receiving a file\n */\nconst fileResponse = await fetch("https://deno.land/logo.svg");\n\nif (fileResponse.body) {\n  const file = await Deno.open("./logo.svg", { write: true, create: true });\n  await fileResponse.body.pipeTo(file.writable);\n}\n\n/**\n * Sending a file\n */\nconst file = await Deno.open("./logo.svg", { read: true });\n\nawait fetch("https://example.com/", {\n  method: "POST",\n  body: file.readable,\n});\n')))}u.isMDXComponent=!0}}]);