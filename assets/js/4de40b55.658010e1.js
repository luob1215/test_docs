"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[4345],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(f,l(l({ref:t},p),{},{components:n})):a.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},58093:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const o={},l="Web Platform Test",i={unversionedId:"manual/references/contributing/web_platform_tests",id:"manual/references/contributing/web_platform_tests",title:"Web Platform Test",description:"Deno uses a custom test runner for Web Platform Tests. It can be found at",source:"@site/runtime/manual/references/contributing/web_platform_tests.md",sourceDirName:"manual/references/contributing",slug:"/manual/references/contributing/web_platform_tests",permalink:"/runtime/manual/references/contributing/web_platform_tests",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Deno Style Guide",permalink:"/runtime/manual/references/contributing/style_guide"},next:{title:"Where To Get Help",permalink:"/runtime/manual/help"}},s={},u=[{value:"Running tests",id:"running-tests",level:2},{value:"Updating enabled tests or expectations",id:"updating-enabled-tests-or-expectations",level:2},{value:"Subcommands",id:"subcommands",level:2},{value:"<code>setup</code>",id:"setup",level:3},{value:"<code>run</code>",id:"run",level:3},{value:"<code>update</code>",id:"update",level:3},{value:"FAQ",id:"faq",level:2},{value:"Upgrading the wpt submodule:",id:"upgrading-the-wpt-submodule",level:3}],p={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"web-platform-test"},"Web Platform Test"),(0,r.kt)("p",null,"Deno uses a custom test runner for Web Platform Tests. It can be found at\n",(0,r.kt)("inlineCode",{parentName:"p"},"./tools/wpt.ts"),"."),(0,r.kt)("h2",{id:"running-tests"},"Running tests"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If you are on Windows, or your system does not support hashbangs, prefix all\n",(0,r.kt)("inlineCode",{parentName:"p"},"./tools/wpt.ts")," commands with\n",(0,r.kt)("inlineCode",{parentName:"p"},"deno run --unstable --allow-write --allow-read --allow-net --allow-env --allow-run"),".")),(0,r.kt)("p",null,"Before attempting to run WPT tests for the first time, please run the WPT setup.\nYou must also run this command every time the ",(0,r.kt)("inlineCode",{parentName:"p"},"./test_util/wpt")," submodule is\nupdated:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"./tools/wpt.ts setup\n")),(0,r.kt)("p",null,"To run all available web platform tests, run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"./tools/wpt.ts run\n\n# You can also filter which test files to run by specifying filters:\n./tools/wpt.ts run -- streams/piping/general hr-time\n")),(0,r.kt)("p",null,"The test runner will run each web platform test and record its status (failed or\nok). It will then compare this output to the expected output of each test as\nspecified in the ",(0,r.kt)("inlineCode",{parentName:"p"},"./tools/wpt/expectation.json")," file. This file is a nested JSON\nstructure that mirrors the ",(0,r.kt)("inlineCode",{parentName:"p"},"./test_utils/wpt")," directory. It describes for each\ntest file, if it should pass as a whole (all tests pass, ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"), if it should\nfail as a whole (test runner encounters an exception outside of a test or all\ntests fail, ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"), or which tests it expects to fail (a string array of test\ncase names)."),(0,r.kt)("h2",{id:"updating-enabled-tests-or-expectations"},"Updating enabled tests or expectations"),(0,r.kt)("p",null,"You can update the ",(0,r.kt)("inlineCode",{parentName:"p"},"./tools/wpt/expectation.json")," file manually by changing the\nvalue of each of the test file entries in the JSON structure. The alternative\nand preferred option is to have the WPT runner run all, or a filtered subset of\ntests, and then automatically update the ",(0,r.kt)("inlineCode",{parentName:"p"},"expectation.json")," file to match the\ncurrent reality. You can do this with the ",(0,r.kt)("inlineCode",{parentName:"p"},"./wpt.ts update")," command. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"./tools/wpt.ts update -- hr-time\n")),(0,r.kt)("p",null,"After running this command the ",(0,r.kt)("inlineCode",{parentName:"p"},"expectation.json")," file will match the current\noutput of all the tests that were run. This means that running ",(0,r.kt)("inlineCode",{parentName:"p"},"wpt.ts run"),"\nright after a ",(0,r.kt)("inlineCode",{parentName:"p"},"wpt.ts update")," should always pass."),(0,r.kt)("h2",{id:"subcommands"},"Subcommands"),(0,r.kt)("h3",{id:"setup"},(0,r.kt)("inlineCode",{parentName:"h3"},"setup")),(0,r.kt)("p",null,"Validate that your environment is configured correctly, or help you configure\nit."),(0,r.kt)("p",null,"This will check that the python3 (or ",(0,r.kt)("inlineCode",{parentName:"p"},"python.exe")," on Windows) is actually\nPython 3."),(0,r.kt)("p",null,"You can specify the following flags to customize behaviour:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"--rebuild\n    Rebuild the manifest instead of downloading. This can take up to 3 minutes.\n\n--auto-config\n    Automatically configure /etc/hosts if it is not configured (no prompt will be shown).\n")),(0,r.kt)("h3",{id:"run"},(0,r.kt)("inlineCode",{parentName:"h3"},"run")),(0,r.kt)("p",null,"Run all tests like specified in ",(0,r.kt)("inlineCode",{parentName:"p"},"expectation.json"),"."),(0,r.kt)("p",null,"You can specify the following flags to customize behaviour:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"--release\n    Use the ./target/release/deno binary instead of ./target/debug/deno\n\n--quiet\n    Disable printing of `ok` test cases.\n\n--json=<file>\n    Output the test results as JSON to the file specified.\n")),(0,r.kt)("p",null,"You can also specify exactly which tests to run by specifying one of more\nfilters after a ",(0,r.kt)("inlineCode",{parentName:"p"},"--"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./tools/wpt.ts run -- hr-time streams/piping/general\n")),(0,r.kt)("h3",{id:"update"},(0,r.kt)("inlineCode",{parentName:"h3"},"update")),(0,r.kt)("p",null,"Update the ",(0,r.kt)("inlineCode",{parentName:"p"},"expectation.json")," to match the current reality."),(0,r.kt)("p",null,"You can specify the following flags to customize behaviour:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"--release\n    Use the ./target/release/deno binary instead of ./target/debug/deno\n\n--quiet\n    Disable printing of `ok` test cases.\n\n--json=<file>\n    Output the test results as JSON to the file specified.\n")),(0,r.kt)("p",null,"You can also specify exactly which tests to run by specifying one of more\nfilters after a ",(0,r.kt)("inlineCode",{parentName:"p"},"--"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./tools/wpt.ts update -- hr-time streams/piping/general\n")),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("h3",{id:"upgrading-the-wpt-submodule"},"Upgrading the wpt submodule:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cd test_util/wpt/\ngit fetch origin\ngit checkout origin/epochs/daily\ncd ../../\ngit add ./test_util/wpt\n")),(0,r.kt)("p",null,"All contributors will need to rerun ",(0,r.kt)("inlineCode",{parentName:"p"},"./tools/wpt.ts setup")," after this."),(0,r.kt)("p",null,"Since upgrading WPT usually requires updating the expectations to cover all\nsorts of upstream changes, it's best to do that as a separate PR, rather than as\npart of a PR that implements a fix or feature."))}d.isMDXComponent=!0}}]);