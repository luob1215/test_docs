"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[6341],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,y=d["".concat(l,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(y,i(i({ref:t},p),{},{components:n})):a.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},20647:(e,t,n)=>{n.d(t,{ZP:()=>s});var a=n(87462),o=(n(67294),n(3905));const r={toc:[]},i="wrapper";function s(e){let{components:t,...n}=e;return(0,o.kt)(i,(0,a.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"Deno KV is currently in beta",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Deno KV and related cloud primitive APIs like queues and cron are currently\n",(0,o.kt)("strong",{parentName:"p"},"experimental")," and ",(0,o.kt)("strong",{parentName:"p"},"subject to change"),". While we do our best to ensure data\ndurability, data loss is possible, especially around Deno updates."),(0,o.kt)("p",{parentName:"admonition"},"Deno programs that use KV require the ",(0,o.kt)("inlineCode",{parentName:"p"},"--unstable")," flag when launching the\nprogram, as shown below:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"deno run -A --unstable my_kv_code.ts\n"))))}s.isMDXComponent=!0},41250:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),o=(n(67294),n(3905)),r=n(20647);const i={},s="KV on Deno Deploy",l={unversionedId:"manual/on_deploy",id:"manual/on_deploy",title:"KV on Deno Deploy",description:"Deno Deploy now offers a built-in serverless key-value database called Deno KV.",source:"@site/kv/manual/on_deploy.mdx",sourceDirName:"manual",slug:"/manual/on_deploy",permalink:"/kv/manual/on_deploy",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"kvGuideHome",previous:{title:"Data Modeling in TypeScript",permalink:"/kv/manual/data_modeling_typescript"},next:{title:"Backups",permalink:"/kv/manual/backup"}},u={},p=[{value:"Consistency",id:"consistency",level:2},{value:"Distributed queues",id:"distributed-queues",level:2},{value:"Connect to managed databases from outside of Deno Deploy",id:"connect-to-managed-databases-from-outside-of-deno-deploy",level:2},{value:"Data distribution",id:"data-distribution",level:2}],d={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"kv-on-deno-deploy"},"KV on Deno Deploy"),(0,o.kt)(r.ZP,{mdxType:"Admonition"}),(0,o.kt)("p",null,"Deno Deploy now offers a built-in serverless key-value database called Deno KV."),(0,o.kt)("p",null,"Additionally, Deno KV is available within Deno itself, utilizing SQLite as its\nbackend. This feature has been accessible since Deno v1.32 with the ",(0,o.kt)("inlineCode",{parentName:"p"},"--unstable"),"\nflag. Learn more about ",(0,o.kt)("a",{parentName:"p",href:"/kv/manual"},"Deno KV"),"."),(0,o.kt)("h2",{id:"consistency"},"Consistency"),(0,o.kt)("p",null,"Deno KV, by default, is a strongly-consistent database. It provides the\nstrictest form of strong consistency called ",(0,o.kt)("em",{parentName:"p"},"external consistency"),", which\nimplies:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Serializability"),": This is the highest level of isolation for transactions.\nIt ensures that the concurrent execution of multiple transactions results in a\nsystem state that would be the same as if the transactions were executed\nsequentially, one after another. In other words, the end result of\nserializable transactions is equivalent to some sequential order of these\ntransactions."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Linearizability"),": This consistency model guarantees that operations, such\nas read and write, appear to be instantaneous and occur in real-time. Once a\nwrite operation completes, all subsequent read operations will immediately\nreturn the updated value. Linearizability ensures a strong real-time ordering\nof operations, making the system more predictable and easier to reason about.")),(0,o.kt)("p",null,"Meanwhile, you can choose to relax consistency constraints by setting the\n",(0,o.kt)("inlineCode",{parentName:"p"},'consistency: "eventual"')," option on individual read operations. This option\nallows the system to serve the read from global replicas and caches for minimal\nlatency."),(0,o.kt)("p",null,"Below are the latency figures observed in our top regions:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Region"),(0,o.kt)("th",{parentName:"tr",align:null},"Latency (Eventual Consistency)"),(0,o.kt)("th",{parentName:"tr",align:null},"Latency (Strong Consistency)"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"North Virginia (us-east4)"),(0,o.kt)("td",{parentName:"tr",align:null},"7ms"),(0,o.kt)("td",{parentName:"tr",align:null},"7ms")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Frankfurt (europe-west3)"),(0,o.kt)("td",{parentName:"tr",align:null},"7ms"),(0,o.kt)("td",{parentName:"tr",align:null},"94ms")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Netherlands (europe-west4)"),(0,o.kt)("td",{parentName:"tr",align:null},"13ms"),(0,o.kt)("td",{parentName:"tr",align:null},"95ms")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"California (us-west2)"),(0,o.kt)("td",{parentName:"tr",align:null},"72ms"),(0,o.kt)("td",{parentName:"tr",align:null},"72ms")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Hong Kong (asia-east2)"),(0,o.kt)("td",{parentName:"tr",align:null},"42ms"),(0,o.kt)("td",{parentName:"tr",align:null},"194ms")))),(0,o.kt)("h2",{id:"distributed-queues"},"Distributed queues"),(0,o.kt)("p",null,"Serverless distributed queues are available on Deno Deploy. See\n",(0,o.kt)("a",{parentName:"p",href:"/kv/manual/queue_overview#queues-on-deno-deploy"},"Queues on Deno Deploy")," for\nmore details."),(0,o.kt)("h2",{id:"connect-to-managed-databases-from-outside-of-deno-deploy"},"Connect to managed databases from outside of Deno Deploy"),(0,o.kt)("p",null,"You can connect to your Deno Deploy KV database from your Deno application\noutside of Deno Deploy. To open a managed database, set the\n",(0,o.kt)("inlineCode",{parentName:"p"},"DENO_KV_ACCESS_TOKEN")," environment variable to a Deno Deploy personal access\ntoken and provide the URL of the database to ",(0,o.kt)("inlineCode",{parentName:"p"},"Deno.openKv"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const kv = await Deno.openKv(\n  "https://api.deno.com/databases/<database-id>/connect",\n);\n')),(0,o.kt)("p",null,"Please check the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/denoland/deno/tree/main/ext/kv#kv-connect"},"docs")," for the\nspecification of the protocol for connecting to a remote KV database"),(0,o.kt)("h2",{id:"data-distribution"},"Data distribution"),(0,o.kt)("p",null,"Deno KV databases are replicated across at least 6 data centers, spanning 3\nregions (US, Europe, and Asia). Once a write operation is committed, its\nmutations are persistently stored in a minimum of two data centers within the\nprimary region. Asynchronous replication typically transfers these mutations to\nthe other two regions in under 10 seconds."),(0,o.kt)("p",null,"The system is designed to tolerate most data center-level failures without\nexperiencing downtime or data loss. Recovery Point Objectives (RPO) and Recovery\nTime Objectives (RTO) help quantify the system's resilience under various\nfailure modes. RPO represents the maximum acceptable amount of data loss\nmeasured in time, whereas RTO signifies the maximum acceptable time required to\nrestore the system to normal operations after a failure."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Loss of one data center in the primary region: RPO=0 (no data loss), RTO<5s\n(system restoration in under 5 seconds)"),(0,o.kt)("li",{parentName:"ul"},"Loss of any number of data centers in a replica region: RPO=0, RTO<5s"),(0,o.kt)("li",{parentName:"ul"},"Loss of two or more data centers in the primary region: RPO<60s (under 60\nseconds of data loss)")))}m.isMDXComponent=!0}}]);