"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[5889],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),c=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(i.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,h=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return t?a.createElement(h,l(l({ref:n},u),{},{components:t})):a.createElement(h,l({ref:n},u))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[p]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},79622:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const o={},l="How to use Planetscale with Deno",s={unversionedId:"manual/node/how_to_with_npm/planetscale",id:"manual/node/how_to_with_npm/planetscale",title:"How to use Planetscale with Deno",description:"Planetscale is a MySQL-compatible serverless database that is designed with a",source:"@site/runtime/manual/node/how_to_with_npm/planetscale.md",sourceDirName:"manual/node/how_to_with_npm",slug:"/manual/node/how_to_with_npm/planetscale",permalink:"/runtime/manual/node/how_to_with_npm/planetscale",draft:!1,tags:[],version:"current",frontMatter:{}},i={},c=[{value:"Configuring our connection",id:"configuring-our-connection",level:2},{value:"Creating and populating our database table",id:"creating-and-populating-our-database-table",level:2},{value:"Querying Planetscale",id:"querying-planetscale",level:2}],u={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-use-planetscale-with-deno"},"How to use Planetscale with Deno"),(0,r.kt)("p",null,"Planetscale is a MySQL-compatible serverless database that is designed with a\ndeveloper workflow where developers can create, branch, and deploy databases\nfrom the command line."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/denoland/examples/tree/main/with-planetscale"},"View source here.")),(0,r.kt)("p",null,"We'll use the Planetscale serverless driver, ",(0,r.kt)("inlineCode",{parentName:"p"},"@planetscale/database"),", to work\nwith Deno. First we want to create ",(0,r.kt)("inlineCode",{parentName:"p"},"main.ts")," and import the connect method from\nthis package:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx,",metastring:"ignore",ignore:!0},'import { connect } from "npm:@planetscale/database@^1.4";\n')),(0,r.kt)("h2",{id:"configuring-our-connection"},"Configuring our connection"),(0,r.kt)("p",null,"The connection requires three credentials: host, username, and password. These\nare database-specific, so we first need to create a database in Planetscale. You\ncan do that by following the initial instructions\n",(0,r.kt)("a",{parentName:"p",href:"https://planetscale.com/docs/tutorials/planetscale-quick-start-guide"},"here"),".\nDon't worry about adding the schema\u2014we can do that through\n",(0,r.kt)("inlineCode",{parentName:"p"},"@planetscale/database"),"."),(0,r.kt)("p",null,'Once you have created the database, head to Overview, click "Connect", and\nchoose "Connect with ',(0,r.kt)("inlineCode",{parentName:"p"},"@planetscale/database"),'" to get the host and username. Then\nclick through to Passwords to create a new password for your database. Once you\nhave all three you can plug them in directly, or better, store them as\nenvironment variables:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export HOST=<host>\nexport USERNAME=<username>\nexport PASSWORD=<password>\n")),(0,r.kt)("p",null,"Then call them using ",(0,r.kt)("inlineCode",{parentName:"p"},"Deno.env"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx,",metastring:"ignore",ignore:!0},'const config = {\n  host: Deno.env.get("HOST"),\n  username: Deno.env.get("USERNAME"),\n  password: Deno.env.get("PASSWORD"),\n};\n\nconst conn = connect(config);\n')),(0,r.kt)("p",null,"This will also work on Deno Deploy if you set the environment variables in the\ndashboard. Run with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"deno run --allow-net --allow-env main.ts\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"conn")," object is now an open connection to our Planetscale database."),(0,r.kt)("h2",{id:"creating-and-populating-our-database-table"},"Creating and populating our database table"),(0,r.kt)("p",null,"Now that you have the connection running, you can\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"conn.execute()"),"\xa0with SQL\ncommands to create tables and insert the initial data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx,",metastring:"ignore",ignore:!0},"await conn.execute(\n  \"CREATE TABLE dinosaurs (id int NOT NULL AUTO_INCREMENT PRIMARY KEY, name varchar(255) NOT NULL, description varchar(255) NOT NULL);\",\n);\nawait conn.execute(\n  \"INSERT INTO `dinosaurs` (id, name, description) VALUES (1, 'Aardonyx', 'An early stage in the evolution of sauropods.'), (2, 'Abelisaurus', 'Abels lizard has been reconstructed from a single skull.'), (3, 'Deno', 'The fastest dinosaur that ever lived.')\",\n);\n")),(0,r.kt)("h2",{id:"querying-planetscale"},"Querying Planetscale"),(0,r.kt)("p",null,"We can use same ",(0,r.kt)("inlineCode",{parentName:"p"},"conn.execute()")," to also write our queries. Let's get a list of\nall our dinosaurs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx,",metastring:"ignore",ignore:!0},'const results = await conn.execute("SELECT * FROM `dinosaurs`");\nconsole.log(results.rows);\n')),(0,r.kt)("p",null,"The result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx,",metastring:"ignore",ignore:!0},'[\n  {\n    id: 1,\n    name: "Aardonyx",\n    description: "An early stage in the evolution of sauropods.",\n  },\n  {\n    id: 2,\n    name: "Abelisaurus",\n    description: "Abels lizard has been reconstructed from a single skull.",\n  },\n  { id: 3, name: "Deno", description: "The fastest dinosaur that ever lived." },\n];\n')),(0,r.kt)("p",null,"We can also get just a single row from the database by specifying a dinosaur\nname:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx,",metastring:"ignore",ignore:!0},"const result = await conn.execute(\n  \"SELECT * FROM `dinosaurs` WHERE `name` = 'Deno'\",\n);\nconsole.log(result.rows);\n")),(0,r.kt)("p",null,"Which gives us a single row result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx,",metastring:"ignore",ignore:!0},'[{ id: 3, name: "Deno", description: "The fastest dinosaur that ever lived." }];\n')),(0,r.kt)("p",null,"You can find out more about working with Planetscale in their\n",(0,r.kt)("a",{parentName:"p",href:"https://planetscale.com/docs"},"docs"),"."))}d.isMDXComponent=!0}}]);