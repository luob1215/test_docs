"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[5159],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(r),h=o,m=d["".concat(s,".").concat(h)]||d[h]||c[h]||a;return r?n.createElement(m,l(l({ref:t},u),{},{components:r})):n.createElement(m,l({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},18010:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var n=r(87462),o=(r(67294),r(3905));const a={},l="Simple HTTP server",i={unversionedId:"tutorials/tutorial-http-server",id:"tutorials/tutorial-http-server",title:"Simple HTTP server",description:"In this tutorial, let's build a HTTP server that responds to all incoming HTTP",source:"@site/deploy/tutorials/tutorial-http-server.md",sourceDirName:"tutorials",slug:"/tutorials/tutorial-http-server",permalink:"/deploy/tutorials/tutorial-http-server",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"deployTutorialsHome",previous:{title:"API server with Firestore (Firebase)",permalink:"/deploy/tutorials/tutorial-firebase"},next:{title:"Build a blog with Hugo",permalink:"/deploy/tutorials/tutorial-hugo-blog"}},s={},p=[{value:"<strong>Step 1:</strong> Write the HTTP server script",id:"step-1-write-the-http-server-script",level:2},{value:"<strong>Step 2:</strong> Deploy script to Deno Deploy",id:"step-2-deploy-script-to-deno-deploy",level:2}],u={toc:p},d="wrapper";function c(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"simple-http-server"},"Simple HTTP server"),(0,o.kt)("p",null,"In this tutorial, let's build a HTTP server that responds to all incoming HTTP\nrequests with ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello World")," and a ",(0,o.kt)("inlineCode",{parentName:"p"},"200 OK")," HTTP status. We will be using the\nDeno Deploy playground to deploy and edit this script."),(0,o.kt)("h2",{id:"step-1-write-the-http-server-script"},(0,o.kt)("strong",{parentName:"h2"},"Step 1:")," Write the HTTP server script"),(0,o.kt)("p",null,"Before we start writing the actual script, let's go over some basics: Deno\nDeploy lets you listen for incoming HTTP requests using the same\n",(0,o.kt)("a",{parentName:"p",href:"https://deno.land/manual@v1.15.1/runtime/http_server_apis"},"server side HTTP API")," as the Deno CLI. This API is rather low\nlevel though, so instead of using this API directly we'll use the high level\nHTTP API exposed by ",(0,o.kt)("a",{parentName:"p",href:"https://deno.land/std/http"},(0,o.kt)("inlineCode",{parentName:"a"},"std/http")),"."),(0,o.kt)("p",null,"This API revolves around the ",(0,o.kt)("a",{parentName:"p",href:"https://deno.land/std/http/server.ts"},(0,o.kt)("inlineCode",{parentName:"a"},"serve")),"\nfunction."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { serve } from "https://deno.land/std@0.208.0/http/server.ts";\n\nserve((_req) => {/* .. */});\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: the port number we listen on is not important, as Deno Deploy will\nautomatically route requests from the outside world to whatever port we listen\non.")),(0,o.kt)("p",null,"The handler function is called with two arguments: a ",(0,o.kt)("a",{parentName:"p",href:"../api/runtime-request"},(0,o.kt)("inlineCode",{parentName:"a"},"Request")),"\nobject, and a ",(0,o.kt)("a",{parentName:"p",href:"https://doc.deno.land/https/deno.land%2Fstd%2Fhttp%2Fserver.ts#ConnInfo"},(0,o.kt)("inlineCode",{parentName:"a"},"ConnInfo"))," object. The ",(0,o.kt)("inlineCode",{parentName:"p"},"Request")," object contains the\nrequest data, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"ConnInfo")," object contains information about the\nunderlying connection, such as the origin IP address. You must return a\n",(0,o.kt)("a",{parentName:"p",href:"../api/runtime-response"},(0,o.kt)("inlineCode",{parentName:"a"},"Response"))," object from the handler function."),(0,o.kt)("p",null,"Let's use this information to finish our hello world script:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { serve } from "https://deno.land/std@0.208.0/http/server.ts";\n\nserve((_req) => {\n  return new Response("Hello World!", {\n    headers: { "content-type": "text/plain" },\n  });\n});\n')),(0,o.kt)("h2",{id:"step-2-deploy-script-to-deno-deploy"},(0,o.kt)("strong",{parentName:"h2"},"Step 2:")," Deploy script to Deno Deploy"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a new playground project by visiting ",(0,o.kt)("a",{parentName:"li",href:"https://dash.deno.com/new"},"https://dash.deno.com/new"),", and\nclicking the ",(0,o.kt)("strong",{parentName:"li"},"Play")," button under the ",(0,o.kt)("strong",{parentName:"li"},"Playground")," card."),(0,o.kt)("li",{parentName:"ol"},"On the next screen, copy the code above into the editor on the left side of\nthe screen."),(0,o.kt)("li",{parentName:"ol"},"Press the ",(0,o.kt)("strong",{parentName:"li"},"Save & Deploy")," button on the right side of the top toolbar (or\npress ",(0,o.kt)("kbd",null,"Ctrl"),"+",(0,o.kt)("kbd",null,"S"),").")),(0,o.kt)("p",null,"You can preview the result on the right side of the playground editor, in the\npreview pane."),(0,o.kt)("p",null,"You will see that if you change the script (for example ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello, World!")," ->\n",(0,o.kt)("inlineCode",{parentName:"p"},"Hello, Galaxy!"),") and then re-deploy, the preview will automatically update. The\nURL shown at the top of the preview pane can be used to visit the deployed page\nfrom anywhere."),(0,o.kt)("p",null,"Even in the playground editor, scripts are deployed worldwide across our entire\nglobal network. This guarantees fast and reliable performance, no matter the\nlocation of your users."))}c.isMDXComponent=!0}}]);