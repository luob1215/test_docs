"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[6735],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),m=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=m(n),c=a,f=u["".concat(p,".").concat(c)]||u[c]||s[c]||o;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},27032:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var r=n(87462),a=(n(67294),n(3905));const o={},i="Code Formatter",l={unversionedId:"manual/tools/formatter",id:"manual/tools/formatter",title:"Code Formatter",description:"Deno ships with a built-in code formatter that will auto-format the following",source:"@site/runtime/manual/tools/formatter.md",sourceDirName:"manual/tools",slug:"/manual/tools/formatter",permalink:"/runtime/manual/tools/formatter",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Documentation Generator",permalink:"/runtime/manual/tools/documentation_generator"},next:{title:"Starting a new project",permalink:"/runtime/manual/tools/init"}},p={},m=[{value:"Ignoring Code",id:"ignoring-code",level:2},{value:"Configuration",id:"configuration",level:2}],d={toc:m},u="wrapper";function s(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"code-formatter"},"Code Formatter"),(0,a.kt)("p",null,"Deno ships with a built-in code formatter that will auto-format the following\nfiles:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"File Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Extension"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"JavaScript"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},".js"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TypeScript"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},".ts"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"JSX"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},".jsx"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TSX"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},".tsx"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Markdown"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},".md"),", ",(0,a.kt)("inlineCode",{parentName:"td"},".markdown"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"JSON"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},".json"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"JSONC"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},".jsonc"))))),(0,a.kt)("p",null,"In addition, ",(0,a.kt)("inlineCode",{parentName:"p"},"deno fmt")," can format code snippets in Markdown files. Snippets\nmust be enclosed in triple backticks and have a language attribute."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# format all supported files in the current directory and subdirectories\ndeno fmt\n# format specific files\ndeno fmt myfile1.ts myfile2.ts\n# format all supported files in specified directory and subdirectories\ndeno fmt src/\n# check if all the supported files in the current directory and subdirectories are formatted\ndeno fmt --check\n# format stdin and write to stdout\ncat file.ts | deno fmt -\n")),(0,a.kt)("h2",{id:"ignoring-code"},"Ignoring Code"),(0,a.kt)("p",null,"Ignore formatting code by preceding it with a ",(0,a.kt)("inlineCode",{parentName:"p"},"// deno-fmt-ignore")," comment in\nTS/JS/JSONC:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// deno-fmt-ignore\nexport const identity = [\n    1, 0, 0,\n    0, 1, 0,\n    0, 0, 1,\n];\n")),(0,a.kt)("p",null,"Or ignore an entire file by adding a ",(0,a.kt)("inlineCode",{parentName:"p"},"// deno-fmt-ignore-file")," comment at the\ntop of the file."),(0,a.kt)("p",null,"In markdown you may use a ",(0,a.kt)("inlineCode",{parentName:"p"},"\x3c!-- deno-fmt-ignore --\x3e")," comment or ignore a whole\nfile with a ",(0,a.kt)("inlineCode",{parentName:"p"},"\x3c!-- deno-fmt-ignore-file --\x3e")," comment. To ignore a section of\nmarkdown, surround the code with ",(0,a.kt)("inlineCode",{parentName:"p"},"\x3c!-- deno-fmt-ignore-start --\x3e")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"\x3c!-- deno-fmt-ignore-end --\x3e")," comments."),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u2139\ufe0f It is recommended to stick with default options.")),(0,a.kt)("p",null,"Starting with Deno v1.14 a formatter can be customized using either\n",(0,a.kt)("a",{parentName:"p",href:"/runtime/manual/getting_started/configuration_file"},"a configuration file")," or following\nCLI flags:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--use-tabs")," - Whether to use tabs. Defaults to false (using spaces).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--line-width")," - The width of a line the printer will try to stay under. Note\nthat the printer may exceed this width in certain cases. Defaults to 80.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--indent-width")," - The number of characters for an indent. Defaults to 2.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--no-semicolons")," - To not use semicolons except where necessary.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--single-quote")," - Whether to use single quote. Defaults to false (using\ndouble quote).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--prose-wrap={always,never,preserve}"),' - Define how prose should be wrapped in\nMarkdown files. Defaults to "always".'))),(0,a.kt)("p",null,"Note: In Deno versions < 1.31 you will have to prefix these flags with\n",(0,a.kt)("inlineCode",{parentName:"p"},"options-")," (ex. ",(0,a.kt)("inlineCode",{parentName:"p"},"--options-use-tabs"),")"))}s.isMDXComponent=!0}}]);