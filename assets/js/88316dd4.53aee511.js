"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[3336],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),u=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=u(e.components);return o.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),c=u(n),h=i,m=c["".concat(l,".").concat(h)]||c[h]||p[h]||s;return n?o.createElement(m,r(r({ref:t},d),{},{components:n})):o.createElement(m,r({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,r=new Array(s);r[0]=h;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[c]="string"==typeof e?e:i,r[1]=a;for(var u=2;u<s;u++)r[u]=n[u];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},11606:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var o=n(87462),i=(n(67294),n(3905));const s={},r="Testing API",a={unversionedId:"manual/references/vscode_deno/testing_api",id:"manual/references/vscode_deno/testing_api",title:"Testing API",description:"The vscode_deno extension implements a client for the vscode",source:"@site/runtime/manual/references/vscode_deno/testing_api.md",sourceDirName:"manual/references/vscode_deno",slug:"/manual/references/vscode_deno/testing_api",permalink:"/runtime/manual/references/vscode_deno/testing_api",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Using Visual Studio Code",permalink:"/runtime/manual/references/vscode_deno/"},next:{title:"Run Deno in the Cloud",permalink:"/runtime/manual/advanced/deploying_deno/"}},l={},u=[{value:"Test display",id:"test-display",level:2},{value:"Discovering tests",id:"discovering-tests",level:2},{value:"Running tests",id:"running-tests",level:2},{value:"Test output",id:"test-output",level:2},{value:"How tests are structured",id:"how-tests-are-structured",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Known limitations and caveats",id:"known-limitations-and-caveats",level:2}],d={toc:u},c="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"testing-api"},"Testing API"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"vscode_deno")," extension implements a client for the vscode\n",(0,i.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/api/extension-guides/testing"},"Testing API")," and\nwhen using a version of Deno that supports the testing API, tests in your\nproject will be displayed within your IDE for Deno enabled projects."),(0,i.kt)("h2",{id:"test-display"},"Test display"),(0,i.kt)("p",null,"When both the editor and the version of Deno support the testing API, the ",(0,i.kt)("em",{parentName:"p"},"Test\nExplorer")," view will activate represented by a beaker icon, which will provide\nyou with a side panel of tests that have been discovered in your project."),(0,i.kt)("p",null,"Also, next to tests identified in the code, there will be decorations which\nallow you to run and see the status of each test, as well as there will be\nentries in the command palette for tests."),(0,i.kt)("h2",{id:"discovering-tests"},"Discovering tests"),(0,i.kt)("p",null,'Currently, Deno will only discover tests that are part of the "known" modules\ninside a workspace. A module becomes "known" when it is opened in the editor, or\nanother module which imports that module is "known" inside the editor.'),(0,i.kt)("p",null,"In the future, tests will be discovered in a similar fashion to the way the\n",(0,i.kt)("inlineCode",{parentName:"p"},"deno test")," subcommand discovers tests as part of the root of the workspace."),(0,i.kt)("h2",{id:"running-tests"},"Running tests"),(0,i.kt)("p",null,"You can run tests from the Test Explorer view, from the decorations next to the\ntests when viewing the test code, or via the command palette. You can also use\nthe filter function in the Text Explorer view to exclude certain tests from a\ntest run."),(0,i.kt)("p",null,'Currently, Deno only supports the "run" test capability. We will be adding a\ndebug run mode as well as a coverage run mode in the future. We will also be\nintegrating the benchmarking tests as a ',(0,i.kt)("em",{parentName:"p"},"tag"),", so they can be run (or excluded)\nfrom your test runs."),(0,i.kt)("p",null,"The Deno language server does not spin up a new CLI subprocess. It instead\nspawns a new thread and JavaScript runtime per test module to execute the tests."),(0,i.kt)("h2",{id:"test-output"},"Test output"),(0,i.kt)("p",null,"Any ",(0,i.kt)("inlineCode",{parentName:"p"},"console.log()")," that occurs in your tests will be sent to the test output\nwindow within vscode."),(0,i.kt)("p",null,"When a test fails, the failure message, including the stack trace, will be\navailable when inspecting the test results in vscode."),(0,i.kt)("h2",{id:"how-tests-are-structured"},"How tests are structured"),(0,i.kt)("p",null,"Test will be displayed in the Test Explorer at the top level with the module\nthat contains the test. Inside the module will be all the tests that have been\ndiscovered, and if you are using test steps, they will be included under the\ntest."),(0,i.kt)("p",null,"In most cases, the Deno language server will be able to statically identify\ntests, but if you are generating tests dynamically, Deno may not be aware of\nthem until runtime. In these cases it may not be possible to filter these tests\nout of a run, but they will be added to the explorer view as they are\nencountered."),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"By default, tests are executed in a similar fashion to if you were to use\n",(0,i.kt)("inlineCode",{parentName:"p"},"deno test --allow-all")," on the command line. These default arguments can be\nchanged by setting the ",(0,i.kt)("em",{parentName:"p"},"Deno > Testing: Args")," option in your user or workspace\nsettings (or ",(0,i.kt)("inlineCode",{parentName:"p"},"deno.testing.args")," if you are configuring manually). Add\nindividual arguments here which you would have used with the ",(0,i.kt)("inlineCode",{parentName:"p"},"deno test"),"\nsubcommand."),(0,i.kt)("p",null,'Based on other settings that you have, those options will be automatically\nmerged into the "command line" used when running tests unless explicitly\nprovided in the ',(0,i.kt)("em",{parentName:"p"},"Deno > Testing: Args")," setting. For example if you have a ",(0,i.kt)("em",{parentName:"p"},"Deno:\nImport Map")," (",(0,i.kt)("inlineCode",{parentName:"p"},"deno.importMap"),") set, the value of that will be used unless you\nhave provided an explicit ",(0,i.kt)("inlineCode",{parentName:"p"},"--import-map")," value in the testing args setting."),(0,i.kt)("h2",{id:"known-limitations-and-caveats"},"Known limitations and caveats"),(0,i.kt)("p",null,"Because of the way the Deno test runner runs, it is not possible to exclude (or\nexplicitly include) a test step. While the vscode UI will allow you to do this,\nby for example, choosing to run a specific test step, all test steps in that\ntest will be run (but vscode will not update the results for them). So if there\nare other side effects in the test case, they may occur."))}p.isMDXComponent=!0}}]);