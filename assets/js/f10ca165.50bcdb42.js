"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[636],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=c(t),m=o,d=h["".concat(s,".").concat(m)]||h[m]||p[m]||i;return t?a.createElement(d,r(r({ref:n},u),{},{components:t})):a.createElement(d,r({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[h]="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},28765:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));const i={},r="Benchmarking Tool",l={unversionedId:"manual/tools/benchmarker",id:"manual/tools/benchmarker",title:"Benchmarking Tool",description:"Deno has a built-in benchmark runner that you can use for checking performance",source:"@site/runtime/manual/tools/benchmarker.md",sourceDirName:"manual/tools",slug:"/manual/tools/benchmarker",permalink:"/runtime/manual/tools/benchmarker",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Built-In Tooling",permalink:"/runtime/manual/tools/"},next:{title:"Compiling Executables",permalink:"/runtime/manual/tools/compiler"}},s={},c=[{value:"Quickstart",id:"quickstart",level:2},{value:"Writing benchmarks",id:"writing-benchmarks",level:2},{value:"Async functions",id:"async-functions",level:3},{value:"Critical sections",id:"critical-sections",level:3},{value:"Grouping and baselines",id:"grouping-and-baselines",level:2},{value:"Running benchmarks",id:"running-benchmarks",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Command line filtering",id:"command-line-filtering",level:3},{value:"Bench definition filtering",id:"bench-definition-filtering",level:3},{value:"Filtering out (ignoring these benches)",id:"filtering-out-ignoring-these-benches",level:4},{value:"Filtering in (only run these benches)",id:"filtering-in-only-run-these-benches",level:4},{value:"JSON output",id:"json-output",level:2}],u={toc:c},h="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(h,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"benchmarking-tool"},"Benchmarking Tool"),(0,o.kt)("p",null,"Deno has a built-in benchmark runner that you can use for checking performance\nof JavaScript or TypeScript code."),(0,o.kt)("h2",{id:"quickstart"},"Quickstart"),(0,o.kt)("p",null,"Firstly, let's create a file ",(0,o.kt)("inlineCode",{parentName:"p"},"url_bench.ts")," and register a bench using the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Deno.bench()")," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// url_bench.ts\nDeno.bench("URL parsing", () => {\n  new URL("https://deno.land");\n});\n')),(0,o.kt)("p",null,"Secondly, run the benchmark using the ",(0,o.kt)("inlineCode",{parentName:"p"},"deno bench")," subcommand."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"deno bench url_bench.ts\ncpu: Apple M1 Max\nruntime: deno 1.21.0 (aarch64-apple-darwin)\n\nfile:///dev/deno/url_bench.ts\nbenchmark        time (avg)             (min \u2026 max)       p75       p99      p995\n--------------------------------------------------- -----------------------------\nURL parsing   17.29 \xb5s/iter  (16.67 \xb5s \u2026 153.62 \xb5s)  17.25 \xb5s  18.92 \xb5s  22.25 \xb5s\n")),(0,o.kt)("h2",{id:"writing-benchmarks"},"Writing benchmarks"),(0,o.kt)("p",null,"To define a benchmark you need to register it with a call to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Deno.bench"),"\nAPI. There are multiple overloads of this API to allow for the greatest\nflexibility and easy switching between the forms (eg. when you need to quickly\nfocus a single bench for debugging, using the ",(0,o.kt)("inlineCode",{parentName:"p"},"only: true")," option):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// Compact form: name and function\nDeno.bench("hello world #1", () => {\n  new URL("https://deno.land");\n});\n\n// Compact form: named function.\nDeno.bench(function helloWorld3() {\n  new URL("https://deno.land");\n});\n\n// Longer form: bench definition.\nDeno.bench({\n  name: "hello world #2",\n  fn: () => {\n    new URL("https://deno.land");\n  },\n});\n\n// Similar to compact form, with additional configuration as a second argument.\nDeno.bench("hello world #4", { permissions: { read: true } }, () => {\n  new URL("https://deno.land");\n});\n\n// Similar to longer form, with bench function as a second argument.\nDeno.bench(\n  { name: "hello world #5", permissions: { read: true } },\n  () => {\n    new URL("https://deno.land");\n  },\n);\n\n// Similar to longer form, with a named bench function as a second argument.\nDeno.bench({ permissions: { read: true } }, function helloWorld6() {\n  new URL("https://deno.land");\n});\n')),(0,o.kt)("h3",{id:"async-functions"},"Async functions"),(0,o.kt)("p",null,"You can also bench asynchronous code by passing a bench function that returns a\npromise. For this you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"async")," keyword when defining a function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'Deno.bench("async hello world", async () => {\n  await 1;\n});\n')),(0,o.kt)("h3",{id:"critical-sections"},"Critical sections"),(0,o.kt)("p",null,"Sometimes the benchmark case needs to include setup and teardown code that would\ntaint the benchmark results. For example, if you want to measure how long it\ntakes to read a small file, you need to open the file, read it, and then close\nit. If the file is small enough the time it takes to open and close the file\nmight outweigh the time it takes to read the file itself."),(0,o.kt)("p",null,"To help with such situations you can ",(0,o.kt)("inlineCode",{parentName:"p"},"Deno.BenchContext.start")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"Deno.BenchContext.end")," to tell the benchmarking tool about the critical section\nyou want to measure. Everything outside of the section between these two calls\nwill be excluded from the measurement."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'import { readAll } from "https://deno.land/std@0.208.0/streams/mod.ts";\n\nDeno.bench("foo", async (b) => {\n  // Open a file that we will act upon.\n  const file = await Deno.open("a_big_data_file.txt");\n\n  // Tell the benchmarking tool that this is the only section you want\n  // to measure.\n  b.start();\n\n  // Now let\'s measure how long it takes to read all of the data from the file.\n  await readAll(file);\n\n  // End measurement here.\n  b.end();\n\n  // Now we can perform some potentially time-consuming teardown that will not\n  // taint out benchmark results.\n  file.close();\n});\n')),(0,o.kt)("h2",{id:"grouping-and-baselines"},"Grouping and baselines"),(0,o.kt)("p",null,"When registering a bench case, it can be assigned to a group, using\n",(0,o.kt)("inlineCode",{parentName:"p"},"Deno.BenchDefinition.group")," option:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'// url_bench.ts\nDeno.bench("url parse", { group: "url" }, () => {\n  new URL("https://deno.land");\n});\n')),(0,o.kt)("p",null,'It is useful to assign several cases to a single group and compare how they\nperform against a "baseline" case.'),(0,o.kt)("p",null,"In this example we'll check how performant is ",(0,o.kt)("inlineCode",{parentName:"p"},"Date.now()")," compared to\n",(0,o.kt)("inlineCode",{parentName:"p"},"performance.now()"),', to do that we\'ll mark the first case as a "baseline" using\n',(0,o.kt)("inlineCode",{parentName:"p"},"Deno.BenchDefinition.baseline")," option:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'// time_bench.ts\nDeno.bench("Date.now()", { group: "timing", baseline: true }, () => {\n  Date.now();\n});\n\nDeno.bench("performance.now()", { group: "timing" }, () => {\n  performance.now();\n});\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shellsesssion"},"$ deno bench time_bench.ts\ncpu: Apple M1 Max\nruntime: deno 1.21.0 (aarch64-apple-darwin)\n\nfile:///dev/deno/time_bench.ts\nbenchmark              time (avg)             (min \u2026 max)       p75       p99      p995\n--------------------------------------------------------- -----------------------------\nDate.now()         125.24 ns/iter (118.98 ns \u2026 559.95 ns) 123.62 ns 150.69 ns 156.63 ns\nperformance.now()    2.67 \xb5s/iter     (2.64 \xb5s \u2026 2.82 \xb5s)   2.67 \xb5s   2.82 \xb5s   2.82 \xb5s\n\nsummary\n  Date.now()\n   21.29x times faster than performance.now()\n")),(0,o.kt)("p",null,"You can specify multiple groups in the same file."),(0,o.kt)("h2",{id:"running-benchmarks"},"Running benchmarks"),(0,o.kt)("p",null,"To run a benchmark, call ",(0,o.kt)("inlineCode",{parentName:"p"},"deno bench")," with the file that contains your bench\nfunction. You can also omit the file name, in which case all benchmarks in the\ncurrent directory (recursively) that match the glob\n",(0,o.kt)("inlineCode",{parentName:"p"},"{*_,*.,}bench.{ts, tsx, mts, js, mjs, jsx}")," will be run. If you pass a\ndirectory, all files in the directory that match this glob will be run."),(0,o.kt)("p",null,"The glob expands to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"files named ",(0,o.kt)("inlineCode",{parentName:"li"},"bench.{ts, tsx, mts, js, mjs, jsx}"),","),(0,o.kt)("li",{parentName:"ul"},"or files ending with ",(0,o.kt)("inlineCode",{parentName:"li"},".bench.{ts, tsx, mts, js, mjs, jsx}"),","),(0,o.kt)("li",{parentName:"ul"},"or files ending with ",(0,o.kt)("inlineCode",{parentName:"li"},"_bench.{ts, tsx, mts, js, mjs, jsx}"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"# Run all benches in the current directory and all sub-directories\ndeno bench\n\n# Run all benches in the util directory\ndeno bench util/\n\n# Run just my_bench.ts\ndeno bench my_bench.ts\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f If you want to pass additional CLI arguments to the bench files use ",(0,o.kt)("inlineCode",{parentName:"p"},"--")," to\ninform Deno that remaining arguments are scripts arguments.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"# Pass additional arguments to the bench file\ndeno bench my_bench.ts -- -e --foo --bar\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"deno bench")," uses the same permission model as ",(0,o.kt)("inlineCode",{parentName:"p"},"deno run")," and therefore will\nrequire, for example, ",(0,o.kt)("inlineCode",{parentName:"p"},"--allow-write")," to write to the file system during\nbenching."),(0,o.kt)("p",null,"To see all runtime options with ",(0,o.kt)("inlineCode",{parentName:"p"},"deno bench"),", you can reference the command line\nhelp:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"deno help bench\n")),(0,o.kt)("h2",{id:"filtering"},"Filtering"),(0,o.kt)("p",null,"There are a number of options to filter the benches you are running."),(0,o.kt)("h3",{id:"command-line-filtering"},"Command line filtering"),(0,o.kt)("p",null,"Benches can be run individually or in groups using the command line ",(0,o.kt)("inlineCode",{parentName:"p"},"--filter"),"\noption."),(0,o.kt)("p",null,"The filter flags accept a string or a pattern as value."),(0,o.kt)("p",null,"Assuming the following benches:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'Deno.bench({\n  name: "my-bench",\n  fn: () => {/* bench function zero */},\n});\nDeno.bench({\n  name: "bench-1",\n  fn: () => {/* bench function one */},\n});\nDeno.bench({\n  name: "bench2",\n  fn: () => {/* bench function two */},\n});\n')),(0,o.kt)("p",null,'This command will run all of these benches because they all contain the word\n"bench".'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'deno bench --filter "bench" benchmarks/\n')),(0,o.kt)("p",null,"On the flip side, the following command uses a pattern and will run the second\nand third benchmarks."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'deno bench --filter "/bench-*\\d/" benchmarks/\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"To let Deno know that you want to use a pattern, wrap your filter with\nforward-slashes like the JavaScript syntactic sugar for a regex.")),(0,o.kt)("h3",{id:"bench-definition-filtering"},"Bench definition filtering"),(0,o.kt)("p",null,"Within the benches themselves, you have two options for filtering."),(0,o.kt)("h4",{id:"filtering-out-ignoring-these-benches"},"Filtering out (ignoring these benches)"),(0,o.kt)("p",null,"Sometimes you want to ignore benches based on some sort of condition (for\nexample you only want a benchmark to run on Windows). For this you can use the\n",(0,o.kt)("inlineCode",{parentName:"p"},"ignore")," boolean in the bench definition. If it is set to true the bench will be\nskipped."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'Deno.bench({\n  name: "bench windows feature",\n  ignore: Deno.build.os !== "windows",\n  fn() {\n    // do windows feature\n  },\n});\n')),(0,o.kt)("h4",{id:"filtering-in-only-run-these-benches"},"Filtering in (only run these benches)"),(0,o.kt)("p",null,"Sometimes you may be in the middle of a performance problem within a large bench\nclass and you would like to focus on just that single bench and ignore the rest\nfor now. For this you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"only")," option to tell the benchmark harness to\nonly run benches with this set to true. Multiple benches can set this option.\nWhile the benchmark run will report on the success or failure of each bench, the\noverall benchmark run will always fail if any bench is flagged with ",(0,o.kt)("inlineCode",{parentName:"p"},"only"),", as\nthis is a temporary measure only which disables nearly all of your benchmarks."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'Deno.bench({\n  name: "Focus on this bench only",\n  only: true,\n  fn() {\n    // bench complicated stuff\n  },\n});\n')),(0,o.kt)("h2",{id:"json-output"},"JSON output"),(0,o.kt)("p",null,"To retrieve the output as JSON, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"--json")," flag:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'$ deno bench --json bench_me.js\n{\n  "runtime": "Deno/1.31.0 x86_64-apple-darwin",\n  "cpu": "Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz",\n  "benches": [\n    "origin": "file:///dev/bench_me.js",\n    "group": null,\n    "name": "Deno.UnsafePointerView#getUint32",\n    "baseline": false,\n    "result": {\n      "ok": {\n        "n": 49,\n        "min": 1251.9348,\n        "max": 1441.2696,\n        "avg": 1308.7523755102038,\n        "p75": 1324.1055,\n        "p99": 1441.2696,\n        "p995": 1441.2696,\n        "p999": 1441.2696\n      }\n    }\n  ]\n}\n')))}p.isMDXComponent=!0}}]);