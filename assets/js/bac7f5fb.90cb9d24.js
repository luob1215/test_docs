"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[976],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),d=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=d(e.components);return o.createElement(c.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},k=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),u=d(t),k=a,m=u["".concat(c,".").concat(k)]||u[k]||p[k]||i;return t?o.createElement(m,l(l({ref:n},s),{},{components:t})):o.createElement(m,l({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=k;var r={};for(var c in n)hasOwnProperty.call(n,c)&&(r[c]=n[c]);r.originalType=e,r[u]="string"==typeof e?e:a,l[1]=r;for(var d=2;d<i;d++)l[d]=t[d];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}k.displayName="MDXCreateElement"},30651:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var o=t(87462),a=(t(67294),t(3905));const i={},l="Integrity Checking & Lock Files",r={unversionedId:"manual/basics/modules/integrity_checking",id:"manual/basics/modules/integrity_checking",title:"Integrity Checking & Lock Files",description:"Introduction",source:"@site/runtime/manual/basics/modules/integrity_checking.md",sourceDirName:"manual/basics/modules",slug:"/manual/basics/modules/integrity_checking",permalink:"/runtime/manual/basics/modules/integrity_checking",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Proxies",permalink:"/runtime/manual/basics/modules/proxies"},next:{title:"Publishing Modules",permalink:"/runtime/manual/advanced/publishing/"}},c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Caching and lock files",id:"caching-and-lock-files",level:2},{value:"Auto-generated lockfile",id:"auto-generated-lockfile",level:3},{value:"Using <code>--lock</code> and <code>--lock-write</code> flags",id:"using---lock-and---lock-write-flags",level:3},{value:"Runtime verification",id:"runtime-verification",level:2}],s={toc:d},u="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"integrity-checking--lock-files"},"Integrity Checking & Lock Files"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Let's say your module depends on remote module ",(0,a.kt)("inlineCode",{parentName:"p"},"https://some.url/a.ts"),". When you\ncompile your module for the first time ",(0,a.kt)("inlineCode",{parentName:"p"},"a.ts")," is retrieved, compiled and cached.\nIt will remain this way until you run your module on a new machine (say in\nproduction) or reload the cache (through ",(0,a.kt)("inlineCode",{parentName:"p"},"deno cache --reload")," for example). But\nwhat happens if the content in the remote url ",(0,a.kt)("inlineCode",{parentName:"p"},"https://some.url/a.ts")," is\nchanged? This could lead to your production module running with different\ndependency code than your local module. Deno's solution to avoid this is to use\nintegrity checking and lock files."),(0,a.kt)("h2",{id:"caching-and-lock-files"},"Caching and lock files"),(0,a.kt)("p",null,"Deno can store and check subresource integrity for modules using a small JSON\nfile. To opt into a lock file, either:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create a ",(0,a.kt)("inlineCode",{parentName:"li"},"deno.json")," file in the current or an ancestor directory, which will\nautomatically create an additive lockfile at ",(0,a.kt)("inlineCode",{parentName:"li"},"deno.lock"),"."),(0,a.kt)("li",{parentName:"ol"},"Use the ",(0,a.kt)("inlineCode",{parentName:"li"},"--lock=deno.lock")," to enable and specify lock file checking. To\nupdate or create a lock use ",(0,a.kt)("inlineCode",{parentName:"li"},"--lock=deno.lock --lock-write"),". The\n",(0,a.kt)("inlineCode",{parentName:"li"},"--lock=deno.lock")," tells Deno what the lock file to use is, while the\n",(0,a.kt)("inlineCode",{parentName:"li"},"--lock-write")," is used to output dependency hashes to the lock file\n(",(0,a.kt)("inlineCode",{parentName:"li"},"--lock-write")," must be used in conjunction with ",(0,a.kt)("inlineCode",{parentName:"li"},"--lock"),").")),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"deno.lock")," might look like this, storing a hash of the file against the\ndependency:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "https://deno.land/std@0.208.0/textproto/mod.ts": "3118d7a42c03c242c5a49c2ad91c8396110e14acca1324e7aaefd31a999b71a4",\n  "https://deno.land/std@0.208.0/io/util.ts": "ae133d310a0fdcf298cea7bc09a599c49acb616d34e148e263bcb02976f80dee",\n  "https://deno.land/std@0.208.0/async/delay.ts": "35957d585a6e3dd87706858fb1d6b551cb278271b03f52c5a2cb70e65e00c26a",\n   ...\n}\n')),(0,a.kt)("h3",{id:"auto-generated-lockfile"},"Auto-generated lockfile"),(0,a.kt)("p",null,"As mentioned above, when a Deno configuration file is resolved (ex. ",(0,a.kt)("inlineCode",{parentName:"p"},"deno.json"),")\nthen an additive lockfile will be automatically generated. By default, the path\nof this lockfile will be ",(0,a.kt)("inlineCode",{parentName:"p"},"deno.lock"),". You can change this path by updating your\n",(0,a.kt)("inlineCode",{parentName:"p"},"deno.json")," to specify this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "lock": "./lock.file"\n}\n')),(0,a.kt)("p",null,"Or disable automatically creating and validating a lockfile by specifying:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "lock": false\n}\n')),(0,a.kt)("h3",{id:"using---lock-and---lock-write-flags"},"Using ",(0,a.kt)("inlineCode",{parentName:"h3"},"--lock")," and ",(0,a.kt)("inlineCode",{parentName:"h3"},"--lock-write")," flags"),(0,a.kt)("p",null,"A typical workflow will look like this:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"src/deps.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'// Add a new dependency to "src/deps.ts", used somewhere else.\nexport { xyz } from "https://unpkg.com/xyz-lib@v0.9.0/lib.ts";\n')),(0,a.kt)("p",null,"Then:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'# Create/update the lock file "deno.lock".\ndeno cache --lock=deno.lock --lock-write src/deps.ts\n\n# Include it when committing to source control.\ngit add -u deno.lock\ngit commit -m "feat: Add support for xyz using xyz-lib"\ngit push\n')),(0,a.kt)("p",null,"Collaborator on another machine -- in a freshly cloned project tree:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# Download the project's dependencies into the machine's cache, integrity\n# checking each resource.\ndeno cache --reload --lock=deno.lock src/deps.ts\n\n# Done! You can proceed safely.\ndeno test --allow-read src\n")),(0,a.kt)("h2",{id:"runtime-verification"},"Runtime verification"),(0,a.kt)("p",null,"Like caching above, you can also use lock files during use of the ",(0,a.kt)("inlineCode",{parentName:"p"},"deno run")," sub\ncommand, validating the integrity of any locked modules during the run. Remember\nthat this only validates against dependencies previously added to the lock file."),(0,a.kt)("p",null,"You can take this a step further as well by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"--cached-only")," flag to\nrequire that remote dependencies are already cached."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"deno run --lock=deno.lock --cached-only mod.ts\n")),(0,a.kt)("p",null,"This will fail if there are any dependencies in the dependency tree for mod.ts\nwhich are not yet cached."))}p.isMDXComponent=!0}}]);