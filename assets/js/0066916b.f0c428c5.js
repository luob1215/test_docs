"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[9824],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,y=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?o.createElement(y,l(l({ref:t},c),{},{components:n})):o.createElement(y,l({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8459:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var o=n(87462),a=(n(67294),n(3905));const r={},l="Projects and deployments",i={unversionedId:"manual/subhosting/projects_and_deployments",id:"manual/subhosting/projects_and_deployments",title:"Projects and deployments",description:"In the domain model for subhosting, a project is a container",source:"@site/deploy/manual/subhosting/projects_and_deployments.md",sourceDirName:"manual/subhosting",slug:"/manual/subhosting/projects_and_deployments",permalink:"/deploy/manual/subhosting/projects_and_deployments",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"deployGuideHome",previous:{title:"Getting started with subhosting",permalink:"/deploy/manual/subhosting/getting_started"},next:{title:"Fair use policy",permalink:"/deploy/manual/fair-use-policy"}},s={},p=[{value:"Planning your implementation",id:"planning-your-implementation",level:2},{value:"Creating a deployment for a project",id:"creating-a-deployment-for-a-project",level:2},{value:"Parts of a deployment",id:"parts-of-a-deployment",level:2},{value:"Custom domains",id:"custom-domains",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"projects-and-deployments"},"Projects and deployments"),(0,a.kt)("p",null,"In the ",(0,a.kt)("a",{parentName:"p",href:"/deploy/manual/subhosting/"},"domain model for subhosting"),", a ",(0,a.kt)("strong",{parentName:"p"},"project")," is a container\nfor ",(0,a.kt)("strong",{parentName:"p"},"deployments"),". You can track aggregate analytics for a project (like how\nmany requests are being processed, KV database usage, etc). But actual code that\nruns and serves requests is contained in a ",(0,a.kt)("strong",{parentName:"p"},"deployment"),". Depending on the data\nmodel for your application, you might choose to map projects and deployments in\ndifferent ways."),(0,a.kt)("h2",{id:"planning-your-implementation"},"Planning your implementation"),(0,a.kt)("p",null,"For example - let's say that you were building a SaaS CRM platform like\nSalesforce, and you wanted to empower your customers to write JavaScript code\nthat would be executed every time a new lead was captured."),(0,a.kt)("p",null,"If you were going to implement this feature using Deno Deploy, here's how you\nmight think about building it:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create a ",(0,a.kt)("strong",{parentName:"li"},"project")," and associate that project with a customer account in\nyour database. This would allow you to track usage incurred by each customer,\nand potentially bill them for that usage, using analytics information about\nthe project."),(0,a.kt)("li",{parentName:"ul"},"Create a ",(0,a.kt)("strong",{parentName:"li"},"deployment")," that contains the code your end user provided, which\nshould be run when a new lead is created."),(0,a.kt)("li",{parentName:"ul"},'Using multiple deployments in the same project, you could implement "staging"\nor "production" versions of the event handling logic.'),(0,a.kt)("li",{parentName:"ul"},"Your CRM software would communicate with your end user's code by sending an\nHTTP request to a deployment and awaiting a response."),(0,a.kt)("li",{parentName:"ul"},"In the future, if you wanted to support writing code for other events in your\nCRM (like creating a new contact, or to send automated reports every night),\nyou could create a project for each of those events, and use a flow like the\none described above for each.")),(0,a.kt)("p",null,"Let's look at an example of the API endpoint required to make this happen."),(0,a.kt)("h2",{id:"creating-a-deployment-for-a-project"},"Creating a deployment for a project"),(0,a.kt)("p",null,"In the ",(0,a.kt)("a",{parentName:"p",href:"/deploy/manual/subhosting/getting_started"},"previous chapter"),", you created a new project and\nnoted its ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," property. In the example in the previous chapter, the ID was:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"f084712a-b23b-4aba-accc-3c2de0bfa26a\n")),(0,a.kt)("p",null,"You can use a project identifier to\n",(0,a.kt)("a",{parentName:"p",href:"/deploy/api/rest/deployments"},"create a deployment")," for that project. Create a\nnew file called ",(0,a.kt)("inlineCode",{parentName:"p"},"create_deployment.ts"),' and include the following code to create\na new "hello world" deployment for your project.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="create_deployment.ts"',title:'"create_deployment.ts"'},'const accessToken = Deno.env.get("DEPLOY_ACCESS_TOKEN");\nconst API = "https://api.deno.com/v1";\n\n// Replace with your desired project ID\nconst projectId = "f084712a-b23b-4aba-accc-3c2de0bfa26a";\n\n// Create a new deployment\nconst res = await fetch(`${API}/projects/${projectId}/deployments`, {\n  method: "POST",\n  headers: {\n    Authorization: `Bearer ${accessToken}`,\n    "Content-Type": "application/json",\n  },\n  body: JSON.stringify({\n    entryPointUrl: "main.ts",\n    assets: {\n      "main.ts": {\n        "kind": "file",\n        "content": `Deno.serve(() => new Response("Hello, World!"));`,\n        "encoding": "utf-8",\n      },\n    },\n    envVars: {},\n  }),\n});\n\nconsole.log(res.status);\n')),(0,a.kt)("p",null,"If you run this script with the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"deno run -A --env create_deployment.ts\n")),(0,a.kt)("p",null,'You should soon have a simple "Hello World!" server live on a public URL,\nvisible from your Deno Deploy dashboard.'),(0,a.kt)("h2",{id:"parts-of-a-deployment"},"Parts of a deployment"),(0,a.kt)("p",null,"The example above showed a very simple example of a deployment. A more complex\ndeployment might include some or all of these components, fully described\n",(0,a.kt)("a",{parentName:"p",href:"/deploy/api/rest/deployments"},"here in the API docs"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Assets:")," TypeScript or JavaScript source files, images, JSON documents -\ncode and static files that make your deployment run. These files can be\nencoded in the JSON you upload to the server using ",(0,a.kt)("inlineCode",{parentName:"li"},"utf-8")," (for plain source\nfiles) or ",(0,a.kt)("inlineCode",{parentName:"li"},"base64")," for images and other text files. In addition to actual\nfiles, you can also include symbolic links to other files."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Entry point URL:")," A file path to an asset (a TypeScript or JavaScript file)\nfrom the collection above that should be executed to start a server in your\ndeployment."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Environment variables:")," You can specify values that should exist in the\nsystem environment, to be retrieved by ",(0,a.kt)("inlineCode",{parentName:"li"},"Deno.env.get"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Database ID:")," The identifier for a Deno KV database that should be made\navailable to this deployment."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Compiler options:")," A set of options that should be used to interpret\nTypeScript code.")),(0,a.kt)("h2",{id:"custom-domains"},"Custom domains"),(0,a.kt)("p",null,"After a deployment is created, it is assigned a generated URL. That may be fine\nfor some scenarios, but often you'll want to associate a custom domain with your\ndeployments as well.\n",(0,a.kt)("a",{parentName:"p",href:"/deploy/api/rest/domains"},"Check out the API reference for domains"),"."))}u.isMDXComponent=!0}}]);