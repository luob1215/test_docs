"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[887],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),d=s,m=p["".concat(l,".").concat(d)]||p[d]||f[d]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:s,i[1]=o;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},88448:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=n(87462),s=(n(67294),n(3905));const a={},i="Test Sanitizers",o={unversionedId:"manual/basics/testing/sanitizers",id:"manual/basics/testing/sanitizers",title:"Test Sanitizers",description:"The test runner offers several sanitizers to ensure that the test behaves in a",source:"@site/runtime/manual/basics/testing/sanitizers.md",sourceDirName:"manual/basics/testing",slug:"/manual/basics/testing/sanitizers",permalink:"/runtime/manual/basics/testing/sanitizers",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Mocking",permalink:"/runtime/manual/basics/testing/mocking"},next:{title:"Documentation Tests",permalink:"/runtime/manual/basics/testing/documentation"}},l={},c=[{value:"Resource sanitizer",id:"resource-sanitizer",level:2},{value:"Op sanitizer",id:"op-sanitizer",level:2},{value:"Exit sanitizer",id:"exit-sanitizer",level:2}],u={toc:c},p="wrapper";function f(e){let{components:t,...n}=e;return(0,s.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"test-sanitizers"},"Test Sanitizers"),(0,s.kt)("p",null,"The test runner offers several sanitizers to ensure that the test behaves in a\nreasonable and expected way."),(0,s.kt)("h2",{id:"resource-sanitizer"},"Resource sanitizer"),(0,s.kt)("p",null,"Certain actions in Deno create resources in the resource table\n(",(0,s.kt)("a",{parentName:"p",href:"/runtime/manual/references/contributing/architecture"},"learn more here"),")."),(0,s.kt)("p",null,"These resources should be closed after you are done using them."),(0,s.kt)("p",null,"For each test definition, the test runner checks that all resources created in\nthis test have been closed. This is to prevent resource 'leaks'. This is enabled\nby default for all tests, but can be disabled by setting the ",(0,s.kt)("inlineCode",{parentName:"p"},"sanitizeResources"),"\nboolean to false in the test definition."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'Deno.test({\n  name: "leaky resource test",\n  async fn() {\n    await Deno.open("hello.txt");\n  },\n  sanitizeResources: false,\n});\n')),(0,s.kt)("h2",{id:"op-sanitizer"},"Op sanitizer"),(0,s.kt)("p",null,"The same is true for async operation like interacting with the filesystem. The\ntest runner checks that each operation you start in the test is completed before\nthe end of the test. This is enabled by default for all tests, but can be\ndisabled by setting the ",(0,s.kt)("inlineCode",{parentName:"p"},"sanitizeOps")," boolean to false in the test definition."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'Deno.test({\n  name: "leaky operation test",\n  fn() {\n    crypto.subtle.digest(\n      "SHA-256",\n      new TextEncoder().encode("a".repeat(100000000)),\n    );\n  },\n  sanitizeOps: false,\n});\n')),(0,s.kt)("h2",{id:"exit-sanitizer"},"Exit sanitizer"),(0,s.kt)("p",null,"There's also the exit sanitizer which ensures that tested code doesn't call\n",(0,s.kt)("inlineCode",{parentName:"p"},"Deno.exit()")," signaling a false test success."),(0,s.kt)("p",null,"This is enabled by default for all tests, but can be disabled by setting the\n",(0,s.kt)("inlineCode",{parentName:"p"},"sanitizeExit")," boolean to false in the test definition."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'Deno.test({\n  name: "false success",\n  fn() {\n    Deno.exit(0);\n  },\n  sanitizeExit: false,\n});\n\n// This test never runs, because the process exits during "false success" test\nDeno.test({\n  name: "failing test",\n  fn() {\n    throw new Error("this test fails");\n  },\n});\n')))}f.isMDXComponent=!0}}]);