"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[2739],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),m=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=m(r),d=a,f=s["".concat(p,".").concat(d)]||s[d]||c[d]||o;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[s]="string"==typeof e?e:a,i[1]=l;for(var m=2;m<o;m++)i[m]=r[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},80644:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var n=r(87462),a=(r(67294),r(3905));const o={},i="import.meta API",l={unversionedId:"manual/runtime/import_meta_api",id:"manual/runtime/import_meta_api",title:"import.meta API",description:"Deno supports a number of methods on the",source:"@site/runtime/manual/runtime/import_meta_api.md",sourceDirName:"manual/runtime",slug:"/manual/runtime/import_meta_api",permalink:"/runtime/manual/runtime/import_meta_api",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Permission APIs",permalink:"/runtime/manual/runtime/permission_apis"},next:{title:"Foreign Function Interface",permalink:"/runtime/manual/runtime/ffi_api"}},p={},m=[{value:"<code>import.meta.resolve</code> Example",id:"importmetaresolve-example",level:2}],u={toc:m},s="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(s,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"importmeta-api"},(0,a.kt)("inlineCode",{parentName:"h1"},"import.meta")," API"),(0,a.kt)("p",null,"Deno supports a number of methods on the\n",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta"},(0,a.kt)("inlineCode",{parentName:"a"},"import.meta")),"\nAPI:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"import.meta.url"),": returns the URL of the current module."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"import.meta.main"),": returns whether the current module is the entry point to\nyour program."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"import.meta.resolve"),": resolve specifiers relative to the current module.")),(0,a.kt)("h2",{id:"importmetaresolve-example"},(0,a.kt)("inlineCode",{parentName:"h2"},"import.meta.resolve")," Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const worker = new Worker(import.meta.resolve("./worker.ts"));\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"import.meta.resolve"),' API takes into account the currently applied import\nmap, which gives you the ability to resolve "bare" specifiers as well.'),(0,a.kt)("p",null,"With such import map loaded..."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "imports": {\n    "fresh": "https://deno.land/x/fresh@1.0.1/dev.ts"\n  }\n}\n')),(0,a.kt)("p",null,"...you can now resolve:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// resolve.js\nconsole.log(import.meta.resolve("fresh"));\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ deno run resolve.js\nhttps://deno.land/x/fresh@1.0.1/dev.ts\n")))}c.isMDXComponent=!0}}]);