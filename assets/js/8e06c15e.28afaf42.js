"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[2172],{3905:(e,n,o)=>{o.d(n,{Zo:()=>m,kt:()=>g});var t=o(67294);function a(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function r(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?r(Object(o),!0).forEach((function(n){a(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function s(e,n){if(null==e)return{};var o,t,a=function(e,n){if(null==e)return{};var o,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||(a[o]=e[o]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var l=t.createContext({}),p=function(e){var n=t.useContext(l),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},m=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var o=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=p(o),c=a,g=d["".concat(l,".").concat(c)]||d[c]||u[c]||r;return o?t.createElement(g,i(i({ref:n},m),{},{components:o})):t.createElement(g,i({ref:n},m))}));function g(e,n){var o=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=o.length,i=new Array(r);i[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=o[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,o)}c.displayName="MDXCreateElement"},93818:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var t=o(87462),a=(o(67294),o(3905));const r={},i="How to use Mongoose with Deno",s={unversionedId:"tutorials/how_to_with_npm/mongoose",id:"tutorials/how_to_with_npm/mongoose",title:"How to use Mongoose with Deno",description:"Mongoose is a popular, schema-based library that",source:"@site/runtime/tutorials/how_to_with_npm/mongoose.md",sourceDirName:"tutorials/how_to_with_npm",slug:"/tutorials/how_to_with_npm/mongoose",permalink:"/runtime/tutorials/how_to_with_npm/mongoose",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeTutorialsHome",previous:{title:"How to use Express with Deno",permalink:"/runtime/tutorials/how_to_with_npm/express"},next:{title:"How to use MySQL2 with Deno",permalink:"/runtime/tutorials/how_to_with_npm/mysql2"}},l={},p=[{value:"Creating a Mongoose Model",id:"creating-a-mongoose-model",level:2},{value:"Connecting to MongoDB",id:"connecting-to-mongodb",level:2},{value:"Manipulating Data",id:"manipulating-data",level:2}],m={toc:p},d="wrapper";function u(e){let{components:n,...o}=e;return(0,a.kt)(d,(0,t.Z)({},m,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-use-mongoose-with-deno"},"How to use Mongoose with Deno"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://mongoosejs.com/"},"Mongoose")," is a popular, schema-based library that\nmodels data for ",(0,a.kt)("a",{parentName:"p",href:"https://www.mongodb.com/"},"MongoDB"),". It simplifies writing\nMongoDB validation, casting, and other relevant business logic."),(0,a.kt)("p",null,"This tutorial will show you how to setup Mongoose and MongoDB with your Deno\nproject."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/denoland/examples/tree/main/with-mongoose"},"View source")," or\n",(0,a.kt)("a",{parentName:"p",href:"https://youtu.be/dmZ9Ih0CR9g"},"check out the video guide"),"."),(0,a.kt)("h2",{id:"creating-a-mongoose-model"},"Creating a Mongoose Model"),(0,a.kt)("p",null,"Let's create a simple app that connects to MongoDB, creates a ",(0,a.kt)("inlineCode",{parentName:"p"},"Dinosaur")," model,\nand adds and updates a dinosaur to the database."),(0,a.kt)("p",null,"First, we'll create the necessary files and directories:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ touch main.ts && mkdir model && touch model/Dinosaur.ts\n")),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"/model/Dinosaur.ts"),", we'll import ",(0,a.kt)("inlineCode",{parentName:"p"},"npm:mongoose"),", define the ","[schema]",", and\nexport it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'import { model, Schema } from "npm:mongoose@^6.7";\n\n// Define schema.\nconst dinosaurSchema = new Schema({\n  name: { type: String, unique: true },\n  description: String,\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\n// Validations\ndinosaurSchema.path("name").required(true, "Dinosaur name cannot be blank.");\ndinosaurSchema.path("description").required(\n  true,\n  "Dinosaur description cannot be blank.",\n);\n\n// Export model.\nexport default model("Dinosaur", dinosaurSchema);\n')),(0,a.kt)("h2",{id:"connecting-to-mongodb"},"Connecting to MongoDB"),(0,a.kt)("p",null,"Now, in our ",(0,a.kt)("inlineCode",{parentName:"p"},"main.ts")," file, we'll import mongoose and the ",(0,a.kt)("inlineCode",{parentName:"p"},"Dinosaur")," schema, and\nconnect to MongoDB:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'import mongoose from "npm:mongoose@^6.7";\nimport Dinosaur from "./model/Dinosaur.ts";\n\nawait mongoose.connect("mongodb://localhost:27017");\n\n// Check to see connection status.\nconsole.log(mongoose.connection.readyState);\n')),(0,a.kt)("p",null,"Because Deno supports top-level ",(0,a.kt)("inlineCode",{parentName:"p"},"await"),", we're able to simply\n",(0,a.kt)("inlineCode",{parentName:"p"},"await mongoose.connect()"),"."),(0,a.kt)("p",null,"Running this, we should expect a log of ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"$ deno run --allow-read --allow-sys --allow-env --allow-net main.ts\n1\n")),(0,a.kt)("p",null,"It worked!"),(0,a.kt)("h2",{id:"manipulating-data"},"Manipulating Data"),(0,a.kt)("p",null,"Let's add an instance ",(0,a.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/guide.html#methods"},"method"),"\nto our ",(0,a.kt)("inlineCode",{parentName:"p"},"Dinosaur")," schema in ",(0,a.kt)("inlineCode",{parentName:"p"},"/model/Dinosaur.ts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},"// ./model/Dinosaur.ts\n\n// Methods.\ndinosaurSchema.methods = {\n  // Update description.\n  updateDescription: async function (description: string) {\n    this.description = description;\n    return await this.save();\n  },\n};\n\n// ...\n")),(0,a.kt)("p",null,"This instance method, ",(0,a.kt)("inlineCode",{parentName:"p"},"updateDescription"),", will allow you to update a record's\ndescription."),(0,a.kt)("p",null,"Back in ",(0,a.kt)("inlineCode",{parentName:"p"},"main.ts"),", let's start adding and manipulating data in MongoDB."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'// main.ts\n\n// Create a new Dinosaur.\nconst deno = new Dinosaur({\n  name: "Deno",\n  description: "The fastest dinosaur ever lived.",\n});\n\n// // Insert deno.\nawait deno.save();\n\n// Find Deno by name.\nconst denoFromMongoDb = await Dinosaur.findOne({ name: "Deno" });\nconsole.log(\n  `Finding Deno in MongoDB -- \\n  ${denoFromMongoDb.name}: ${denoFromMongoDb.description}`,\n);\n\n// Update description for Deno and save it.\nawait denoFromMongoDb.updateDescription(\n  "The fastest and most secure dinosaur ever lived.",\n);\n\n// Check MongoDB to see Deno\'s updated description.\nconst newDenoFromMongoDb = await Dinosaur.findOne({ name: "Deno" });\nconsole.log(\n  `Finding Deno (again) -- \\n  ${newDenoFromMongoDb.name}: ${newDenoFromMongoDb.description}`,\n);\n')),(0,a.kt)("p",null,"Running the code, we get:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Finding Deno in MongoDB --\n  Deno: The fastest dinosaur ever lived.\nFinding Deno (again) --\n  Deno: The fastest and most secure dinosaur ever lived.\n")),(0,a.kt)("p",null,"Boom!"),(0,a.kt)("p",null,"For more info on using Mongoose, please refer to\n",(0,a.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/guide.html"},"their documentation"),"."))}u.isMDXComponent=!0}}]);