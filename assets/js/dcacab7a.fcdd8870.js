"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[8257],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=l(n),c=a,h=d["".concat(i,".").concat(c)]||d[c]||m[c]||o;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=c;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[d]="string"==typeof e?e:a,s[1]=p;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},52939:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={},s="How to use Express with Deno",p={unversionedId:"tutorials/how_to_with_npm/express",id:"tutorials/how_to_with_npm/express",title:"How to use Express with Deno",description:"Express is a popular web framework known for being",source:"@site/runtime/tutorials/how_to_with_npm/express.md",sourceDirName:"tutorials/how_to_with_npm",slug:"/tutorials/how_to_with_npm/express",permalink:"/runtime/tutorials/how_to_with_npm/express",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeTutorialsHome",previous:{title:"How to use Apollo with Deno",permalink:"/runtime/tutorials/how_to_with_npm/apollo"},next:{title:"How to use Mongoose with Deno",permalink:"/runtime/tutorials/how_to_with_npm/mongoose"}},i={},l=[{value:"Create <code>main.ts</code>",id:"create-maints",level:2},{value:"Add data and routes",id:"add-data-and-routes",level:2}],u={toc:l},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-use-express-with-deno"},"How to use Express with Deno"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://expressjs.com/"},"Express")," is a popular web framework known for being\nsimple and unopinionated with a large ecosystem of middleware."),(0,a.kt)("p",null,"This How To guide will show you how to create a simple API using Express and\nDeno."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/denoland/examples/tree/main/with-express"},"View source here.")),(0,a.kt)("h2",{id:"create-maints"},"Create ",(0,a.kt)("inlineCode",{parentName:"h2"},"main.ts")),(0,a.kt)("p",null,"Let's create ",(0,a.kt)("inlineCode",{parentName:"p"},"main.ts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"touch main.ts\n")),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"main.ts"),", let's create a simple server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// @deno-types="npm:@types/express@4.17.15"\nimport express from "npm:express@4.18.2";\n\nconst app = express();\n\napp.get("/", (req, res) => {\n  res.send("Welcome to the Dinosaur API!");\n});\n\napp.listen(8000);\n')),(0,a.kt)("p",null,"Let's run this server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"deno run -A main.ts\n")),(0,a.kt)("p",null,"And point our browser to ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost:8000"),". You should see:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Welcome to the Dinosaur API!\n")),(0,a.kt)("h2",{id:"add-data-and-routes"},"Add data and routes"),(0,a.kt)("p",null,"The next step here is to add some data. We'll use this Dinosaur data that we\nfound from ",(0,a.kt)("a",{parentName:"p",href:"https://www.thoughtco.com/dinosaurs-a-to-z-1093748"},"this article"),".\nFeel free to\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/denoland/examples/blob/main/with-express/data.json"},"copy it from here"),"."),(0,a.kt)("p",null,"Let's create ",(0,a.kt)("inlineCode",{parentName:"p"},"data.json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"touch data.json\n")),(0,a.kt)("p",null,"And paste in the dinosaur data."),(0,a.kt)("p",null,"Next, let's import that data into ",(0,a.kt)("inlineCode",{parentName:"p"},"main.ts"),". Let's add this line at the top of\nthe file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import data from "./data.json" assert { type: "json" };\n')),(0,a.kt)("p",null,"Then, we can create the routes to access that data. To keep it simple, let's\njust define ",(0,a.kt)("inlineCode",{parentName:"p"},"GET")," handlers for ",(0,a.kt)("inlineCode",{parentName:"p"},"/api/")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"/api/:dinosaur"),". Add the below after\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"const app = express();")," line:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'app.get("/", (req, res) => {\n  res.send("Welcome to the Dinosaur API!");\n});\n\napp.get("/api", (req, res) => {\n  res.send(data);\n});\n\napp.get("/api/:dinosaur", (req, res) => {\n  if (req?.params?.dinosaur) {\n    const found = data.find((item) =>\n      item.name.toLowerCase() === req.params.dinosaur.toLowerCase()\n    );\n    if (found) {\n      res.send(found);\n    } else {\n      res.send("No dinosaurs found.");\n    }\n  }\n});\n\napp.listen(8000);\n')),(0,a.kt)("p",null,"Let's run the server with ",(0,a.kt)("inlineCode",{parentName:"p"},"deno run -A main.ts")," and check out\n",(0,a.kt)("inlineCode",{parentName:"p"},"localhost:8000/api"),". You should see a list of dinosaurs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "name": "Aardonyx",\n    "description": "An early stage in the evolution of sauropods."\n  },\n  {\n    "name": "Abelisaurus",\n    "description": "\\"Abel\'s lizard\\" has been reconstructed from a single skull."\n  },\n  {\n    "name": "Abrictosaurus",\n    "description": "An early relative of Heterodontosaurus."\n  },\n...\n')),(0,a.kt)("p",null,"And when we go to ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost:8000/api/aardonyx"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "Aardonyx",\n  "description": "An early stage in the evolution of sauropods."\n}\n')),(0,a.kt)("p",null,"Great!"))}m.isMDXComponent=!0}}]);