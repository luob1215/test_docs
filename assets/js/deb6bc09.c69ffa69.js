"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[645],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9169:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(87462),i=(n(67294),n(3905));const r={},o="Overview of TypeScript in Deno",l={unversionedId:"manual/advanced/typescript/overview",id:"manual/advanced/typescript/overview",title:"Overview of TypeScript in Deno",description:"One of the benefits of Deno is that it treats TypeScript as a first class",source:"@site/runtime/manual/advanced/typescript/overview.md",sourceDirName:"manual/advanced/typescript",slug:"/manual/advanced/typescript/overview",permalink:"/runtime/manual/advanced/typescript/overview",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Embedding Deno",permalink:"/runtime/manual/advanced/embedding_deno"},next:{title:"Types and Type Declarations",permalink:"/runtime/manual/advanced/typescript/types"}},p={},s=[{value:"How does it work?",id:"how-does-it-work",level:2},{value:"Type Checking",id:"type-checking",level:2},{value:"Determining the type of file",id:"determining-the-type-of-file",level:2},{value:"Supported media types",id:"supported-media-types",level:3},{value:"Strict by default",id:"strict-by-default",level:2},{value:"Mixing JavaScript and TypeScript",id:"mixing-javascript-and-typescript",level:2},{value:"Type resolution",id:"type-resolution",level:2}],c={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"overview-of-typescript-in-deno"},"Overview of TypeScript in Deno"),(0,i.kt)("p",null,"One of the benefits of Deno is that it treats TypeScript as a first class\nlanguage, just like JavaScript or Web Assembly, when running code in Deno. What\nthat means is you can run or import TypeScript without installing anything more\nthan the Deno CLI."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"But wait a minute, does Deno really run TypeScript?")," you might be asking\nyourself. Well, depends on what you mean by run. One could argue that in a\nbrowser you don't actually ",(0,i.kt)("em",{parentName:"p"},"run")," JavaScript either. The JavaScript engine in the\nbrowser translates the JavaScript to a series of operation codes, which it then\nexecutes in a sandbox. So it translates JavaScript to something close to\nassembly. Even Web Assembly goes through a similar translation, in that Web\nAssembly is architecture agnostic while it needs to be translated into the\nmachine specific operation codes needed for the particular platform architecture\nit is running on. So when we say TypeScript is a first class language in Deno,\nwe mean that we try to make the user experience in authoring and running\nTypeScript as easy and straightforward as JavaScript and Web Assembly."),(0,i.kt)("p",null,"Behind the scenes, we use a combination of technologies, in Rust and JavaScript,\nto provide that experience."),(0,i.kt)("h2",{id:"how-does-it-work"},"How does it work?"),(0,i.kt)("p",null,"At a high level, Deno converts TypeScript (as well as TSX and JSX) into\nJavaScript. It does this via a combination of the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/TypeScript"},"TypeScript compiler"),", which we build\ninto Deno, and a Rust library called ",(0,i.kt)("a",{parentName:"p",href:"https://swc.rs/"},"swc"),". When the code has\nbeen type checked and transformed, it is stored in a cache, ready for the next\nrun without the need to convert it from its source to JavaScript again."),(0,i.kt)("p",null,"You can see this cache location by running ",(0,i.kt)("inlineCode",{parentName:"p"},"deno info"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'> deno info\nDENO_DIR location: "/path/to/cache/deno"\nRemote modules cache: "/path/to/cache/deno/deps"\nTypeScript compiler cache: "/path/to/cache/deno/gen"\n')),(0,i.kt)("p",null,"If you were to look in that cache, you would see a directory structure that\nmimics that source directory structure and individual ",(0,i.kt)("inlineCode",{parentName:"p"},".js")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".meta")," files\n(also potentially ",(0,i.kt)("inlineCode",{parentName:"p"},".map")," files). The ",(0,i.kt)("inlineCode",{parentName:"p"},".js")," file is the transformed source file\nwhile the ",(0,i.kt)("inlineCode",{parentName:"p"},".meta")," file contains meta data we want to cache about the file, which\nat the moment contains a ",(0,i.kt)("em",{parentName:"p"},"hash")," of the source module that helps us manage cache\ninvalidation. You might also see a ",(0,i.kt)("inlineCode",{parentName:"p"},".buildinfo")," file as well, which is a\nTypeScript compiler incremental build information file, which we cache to help\nspeed up type checking."),(0,i.kt)("h2",{id:"type-checking"},"Type Checking"),(0,i.kt)("p",null,'One of the main advantages of TypeScript is that you can make code more type\nsafe, so that what would be syntactically valid JavaScript becomes TypeScript\nwith warnings about being "unsafe".'),(0,i.kt)("p",null,"You can type-check your code (without executing it) using the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"deno check module.ts\n# or also type check remote modules and npm packages\ndeno check --all module.ts\n")),(0,i.kt)("p",null,"Type checking can take a significant amount of time, especially if you are\nworking on a code base where you are making a lot of changes. We have tried to\noptimize type checking, but it still comes at a cost. ",(0,i.kt)("strong",{parentName:"p"},"Therefore,\xa0by default,\nTypeScript modules are not type-checked before they are executed.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"deno run module.ts\n")),(0,i.kt)("p",null,"When using the command above, Deno will simply transpile the module before\nexecuting it, ignoring any potential type-related issues. In order to perform a\ntype-check of the module before execution occurs, the ",(0,i.kt)("inlineCode",{parentName:"p"},"--check")," argument must be\nused with ",(0,i.kt)("inlineCode",{parentName:"p"},"deno run"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"deno run --check module.ts\n# or also type check remote modules and npm packages\ndeno run --check=all module.ts\n")),(0,i.kt)("p",null,"While ",(0,i.kt)("inlineCode",{parentName:"p"},"tsc")," will (by default) still emit JavaScript when encountering diagnostic\n(type-checking) issues, Deno currently treats them as terminal. When using\n",(0,i.kt)("inlineCode",{parentName:"p"},"deno run")," ",(0,i.kt)("em",{parentName:"p"},"with")," the ",(0,i.kt)("inlineCode",{parentName:"p"},"--check")," argument, type-related diagnostics will prevent\nthe program from running: it will halt on these warnings, and exit the process\nbefore executing the code."),(0,i.kt)("p",null,"In order to avoid this, you will either need to resolve the issue, utilise the\n",(0,i.kt)("inlineCode",{parentName:"p"},"// @ts-ignore")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"// @ts-expect-error")," pragmas, or skip type checking all\ntogether."),(0,i.kt)("p",null,"You can learn more about type-checking arguments\n",(0,i.kt)("a",{parentName:"p",href:"/runtime/manual/getting_started/command_line_interface#type-checking-flags"},"here"),"."),(0,i.kt)("h2",{id:"determining-the-type-of-file"},"Determining the type of file"),(0,i.kt)("p",null,"Since Deno supports JavaScript, TypeScript, JSX, TSX modules, Deno has to make a\ndecision about how to treat each of these kinds of files. For local modules,\nDeno makes this determination based fully on the extension. When the extension\nis absent in a local file, it is assumed to be JavaScript."),(0,i.kt)("p",null,"For remote modules, the media type (mime-type) is used to determine the type of\nthe module, where the path of the module is used to help influence the file\ntype, when it is ambiguous what type of file it is."),(0,i.kt)("p",null,"For example, a ",(0,i.kt)("inlineCode",{parentName:"p"},".d.ts")," file and a ",(0,i.kt)("inlineCode",{parentName:"p"},".ts")," file have different semantics in\nTypeScript as well as have different ways they need to be handled in Deno. While\nwe expect to convert a ",(0,i.kt)("inlineCode",{parentName:"p"},".ts")," file into JavaScript, a ",(0,i.kt)("inlineCode",{parentName:"p"},".d.ts"),' file contains no\n"runnable" code, and is simply describing types (often of "plain" JavaScript).\nSo when we fetch a remote module, the media type for a ',(0,i.kt)("inlineCode",{parentName:"p"},".ts.")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".d.ts")," file\nlooks the same. So we look at the path, and if we see something that has a path\nthat ends with ",(0,i.kt)("inlineCode",{parentName:"p"},".d.ts"),' we treat it as a type definition only file instead of\n"runnable" TypeScript.'),(0,i.kt)("h3",{id:"supported-media-types"},"Supported media types"),(0,i.kt)("p",null,"The following table provides a list of media types which Deno supports when\nidentifying the type of file of a remote module:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Media Type"),(0,i.kt)("th",{parentName:"tr",align:null},"How File is Handled"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"application/typescript")),(0,i.kt)("td",{parentName:"tr",align:null},"TypeScript (with path extension influence)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"text/typescript")),(0,i.kt)("td",{parentName:"tr",align:null},"TypeScript (with path extension influence)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"video/vnd.dlna.mpeg-tts")),(0,i.kt)("td",{parentName:"tr",align:null},"TypeScript (with path extension influence)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"video/mp2t")),(0,i.kt)("td",{parentName:"tr",align:null},"TypeScript (with path extension influence)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"application/x-typescript")),(0,i.kt)("td",{parentName:"tr",align:null},"TypeScript (with path extension influence)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"application/javascript")),(0,i.kt)("td",{parentName:"tr",align:null},"JavaScript (with path extensions influence)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"text/javascript")),(0,i.kt)("td",{parentName:"tr",align:null},"JavaScript (with path extensions influence)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"application/ecmascript")),(0,i.kt)("td",{parentName:"tr",align:null},"JavaScript (with path extensions influence)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"text/ecmascript")),(0,i.kt)("td",{parentName:"tr",align:null},"JavaScript (with path extensions influence)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"application/x-javascript")),(0,i.kt)("td",{parentName:"tr",align:null},"JavaScript (with path extensions influence)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"application/node")),(0,i.kt)("td",{parentName:"tr",align:null},"JavaScript (with path extensions influence)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"text/jsx")),(0,i.kt)("td",{parentName:"tr",align:null},"JSX")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"text/tsx")),(0,i.kt)("td",{parentName:"tr",align:null},"TSX")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"text/plain")),(0,i.kt)("td",{parentName:"tr",align:null},"Attempt to determine that path extension, otherwise unknown")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"application/octet-stream")),(0,i.kt)("td",{parentName:"tr",align:null},"Attempt to determine that path extension, otherwise unknown")))),(0,i.kt)("h2",{id:"strict-by-default"},"Strict by default"),(0,i.kt)("p",null,"Deno type checks TypeScript in ",(0,i.kt)("em",{parentName:"p"},"strict")," mode by default, and the TypeScript core\nteam recommends ",(0,i.kt)("em",{parentName:"p"},"strict")," mode as a sensible default. This mode generally enables\nfeatures of TypeScript that probably should have been there from the start, but\nas TypeScript continued to evolve, would be breaking changes for existing code."),(0,i.kt)("h2",{id:"mixing-javascript-and-typescript"},"Mixing JavaScript and TypeScript"),(0,i.kt)("p",null,"By default, Deno does not type check JavaScript. This can be changed, and is\ndiscussed further in ",(0,i.kt)("a",{parentName:"p",href:"/runtime/manual/advanced/typescript/configuration"},"Configuring TypeScript in Deno"),". Deno\ndoes support JavaScript importing TypeScript and TypeScript importing\nJavaScript, in complex scenarios."),(0,i.kt)("p",null,'An important note though is that when type checking TypeScript, by default Deno\nwill "read" all the JavaScript in order to be able to evaluate how it might have\nan impact on the TypeScript types. The type checker will do the best it can to\nfigure out what the types are of the JavaScript you import into TypeScript,\nincluding reading any JSDoc comments. Details of this are discussed in detail in\nthe ',(0,i.kt)("a",{parentName:"p",href:"/runtime/manual/advanced/typescript/types"},"Types and type declarations")," section."),(0,i.kt)("h2",{id:"type-resolution"},"Type resolution"),(0,i.kt)("p",null,"One of the core design principles of Deno is to avoid non-standard module\nresolution, and this applies to type resolution as well. If you want to utilise\nJavaScript that has type definitions (e.g. a ",(0,i.kt)("inlineCode",{parentName:"p"},".d.ts")," file), you have to\nexplicitly tell Deno about this. The details of how this is accomplished are\ncovered in the ",(0,i.kt)("a",{parentName:"p",href:"/runtime/manual/advanced/typescript/types"},"Types and type declarations")," section."))}u.isMDXComponent=!0}}]);