"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[6100],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),f=o,h=u["".concat(s,".").concat(f)]||u[f]||d[f]||l;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var p=2;p<l;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},81220:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const l={},a="File Server",i={unversionedId:"tutorials/file_server",id:"tutorials/file_server",title:"File Server",description:"Concepts",source:"@site/runtime/tutorials/file_server.md",sourceDirName:"tutorials",slug:"/tutorials/file_server",permalink:"/runtime/tutorials/file_server",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeTutorialsHome",previous:{title:"Simple HTTP Web Server",permalink:"/runtime/tutorials/http_server"},next:{title:"TCP echo Server",permalink:"/runtime/tutorials/tcp_echo"}},s={},p=[{value:"Concepts",id:"concepts",level:2},{value:"Overview",id:"overview",level:2},{value:"Example",id:"example",level:2},{value:"Using the <code>std/http</code> file server",id:"using-the-stdhttp-file-server",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"file-server"},"File Server"),(0,o.kt)("h2",{id:"concepts"},"Concepts"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("a",{parentName:"li",href:"https://deno.land/api?s=Deno.open"},"Deno.open")," to read a file's content in\nchunks."),(0,o.kt)("li",{parentName:"ul"},"Transform a Deno file into a\n",(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream"},"ReadableStream"),"."),(0,o.kt)("li",{parentName:"ul"},"Use Deno's integrated HTTP server to run your own file server.")),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"Sending files over the network is a common requirement. As seen in the\n",(0,o.kt)("a",{parentName:"p",href:"/runtime/tutorials/fetch_data"},"Fetch Data example"),", because files can be of any size, it is\nimportant to use streams in order to prevent having to load entire files into\nmemory."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Command:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"deno run --allow-read=. --allow-net file_server.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// Start listening on port 8080 of localhost.\nconst server = Deno.listen({ port: 8080 });\nconsole.log("File server running on http://localhost:8080/");\n\nfor await (const conn of server) {\n  handleHttp(conn).catch(console.error);\n}\n\nasync function handleHttp(conn: Deno.Conn) {\n  const httpConn = Deno.serveHttp(conn);\n  for await (const requestEvent of httpConn) {\n    // Use the request pathname as filepath\n    const url = new URL(requestEvent.request.url);\n    const filepath = decodeURIComponent(url.pathname);\n\n    // Try opening the file\n    let file;\n    try {\n      file = await Deno.open("." + filepath, { read: true });\n    } catch {\n      // If the file cannot be opened, return a "404 Not Found" response\n      const notFoundResponse = new Response("404 Not Found", { status: 404 });\n      await requestEvent.respondWith(notFoundResponse);\n      continue;\n    }\n\n    // Build a readable stream so the file doesn\'t have to be fully loaded into\n    // memory while we send it\n    const readableStream = file.readable;\n\n    // Build and send the response\n    const response = new Response(readableStream);\n    await requestEvent.respondWith(response);\n  }\n}\n')),(0,o.kt)("h2",{id:"using-the-stdhttp-file-server"},"Using the ",(0,o.kt)("inlineCode",{parentName:"h2"},"std/http")," file server"),(0,o.kt)("p",null,"The Deno standard library provides you with a\n",(0,o.kt)("a",{parentName:"p",href:"https://deno.land/std/http/file_server.ts"},"file server")," so that\nyou don't have to write your own."),(0,o.kt)("p",null,"To use it, first install the remote script to your local file system. This will\ninstall the script to the Deno installation root's bin directory, e.g.\n",(0,o.kt)("inlineCode",{parentName:"p"},"/home/alice/.deno/bin/file_server"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"deno install --allow-net --allow-read https://deno.land/std/http/file_server.ts\n")),(0,o.kt)("p",null,"You can now run the script with the simplified script name. Run it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ file_server .\nDownloading https://deno.land/std/http/file_server.ts...\n[...]\nHTTP server listening on http://0.0.0.0:4507/\n")),(0,o.kt)("p",null,"Now go to ",(0,o.kt)("a",{parentName:"p",href:"http://0.0.0.0:4507/"},"http://0.0.0.0:4507/")," in your web browser to\nsee your local directory contents."),(0,o.kt)("p",null,"The complete list of options are available via:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"file_server --help\n")),(0,o.kt)("p",null,"Example output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Deno File Server\n    Serves a local directory in HTTP.\n  INSTALL:\n    deno install --allow-net --allow-read https://deno.land/std/http/file_server.ts\n  USAGE:\n    file_server [path] [options]\n  OPTIONS:\n    -h, --help          Prints help information\n    -p, --port <PORT>   Set port\n    --cors              Enable CORS via the "Access-Control-Allow-Origin" header\n    --host     <HOST>   Hostname (default is 0.0.0.0)\n    -c, --cert <FILE>   TLS certificate file (enables TLS)\n    -k, --key  <FILE>   TLS key file (enables TLS)\n    --no-dir-listing    Disable directory listing\n    All TLS options are required when one is provided.\n')))}d.isMDXComponent=!0}}]);