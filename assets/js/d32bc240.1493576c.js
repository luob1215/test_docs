"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[210],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<r;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},20647:(e,t,n)=>{n.d(t,{ZP:()=>i});var a=n(87462),o=(n(67294),n(3905));const r={toc:[]},s="wrapper";function i(e){let{components:t,...n}=e;return(0,o.kt)(s,(0,a.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"Deno KV is currently in beta",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Deno KV and related cloud primitive APIs like queues and cron are currently\n",(0,o.kt)("strong",{parentName:"p"},"experimental")," and ",(0,o.kt)("strong",{parentName:"p"},"subject to change"),". While we do our best to ensure data\ndurability, data loss is possible, especially around Deno updates."),(0,o.kt)("p",{parentName:"admonition"},"Deno programs that use KV require the ",(0,o.kt)("inlineCode",{parentName:"p"},"--unstable")," flag when launching the\nprogram, as shown below:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"deno run -A --unstable my_kv_code.ts\n"))))}i.isMDXComponent=!0},89264:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a=n(87462),o=(n(67294),n(3905)),r=n(20647);const s={},i="Data Modeling in TypeScript",p={unversionedId:"manual/data_modeling_typescript",id:"manual/data_modeling_typescript",title:"Data Modeling in TypeScript",description:"In TypeScript applications, it is usually desirable to create strongly-typed,",source:"@site/kv/manual/data_modeling_typescript.mdx",sourceDirName:"manual",slug:"/manual/data_modeling_typescript",permalink:"/kv/manual/data_modeling_typescript",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"kvGuideHome",previous:{title:"Scheduling cron tasks",permalink:"/kv/manual/cron"},next:{title:"KV on Deno Deploy",permalink:"/kv/manual/on_deploy"}},l={},c=[{value:"Using interfaces and type assertions",id:"using-interfaces-and-type-assertions",level:2},{value:"Encapsulating business logic with a service layer",id:"encapsulating-business-logic-with-a-service-layer",level:2}],u={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"data-modeling-in-typescript"},"Data Modeling in TypeScript"),(0,o.kt)(r.ZP,{mdxType:"Admonition"}),(0,o.kt)("p",null,"In TypeScript applications, it is usually desirable to create strongly-typed,\nwell-documented objects to contain the data that your application operates on.\nUsing ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/objects.html"},"interfaces"),"\nor ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/classes.html"},"classes"),", you\ncan describe both the shape and behavior of objects in your programs."),(0,o.kt)("p",null,"If you are using Deno KV, however, there is a bit of extra work required to\npersist and retrieve objects that are strongly typed. In this guide, we'll cover\nstrategies for working with strongly typed objects going into and back out from\nDeno KV."),(0,o.kt)("h2",{id:"using-interfaces-and-type-assertions"},"Using interfaces and type assertions"),(0,o.kt)("p",null,"When storing and retrieving application data in Deno KV, you might want to begin\nby describing the shape of your data using TypeScript interfaces. Below is an\nobject model which describes some key components of a blogging system:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="model.ts"',title:'"model.ts"'},"export interface Author {\n  username: string;\n  fullName: string;\n}\n\nexport interface Post {\n  slug: string;\n  title: string;\n  body: string;\n  author: Author;\n  createdAt: Date;\n  updatedAt: Date;\n}\n")),(0,o.kt)("p",null,"This object model describes a blog post and an associated author."),(0,o.kt)("p",null,"With Deno KV, you can use these TypeScript interfaces like\n",(0,o.kt)("a",{parentName:"p",href:"https://martinfowler.com/bliki/LocalDTO.html"},"data transfer objects (DTOs)")," - a\nstrongly typed wrapper around the otherwise untyped objects you might send to or\nreceive from Deno KV."),(0,o.kt)("p",null,"Without any additional work, you can happily store the contents of one of these\nDTOs in Deno KV."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Author } from "./model.ts";\n\nconst kv = await Deno.openKv();\n\nconst a: Author = {\n  username: "acdoyle",\n  fullName: "Arthur Conan Doyle",\n};\n\nawait kv.set(["authors", a.username], a);\n')),(0,o.kt)("p",null,"When retreiving this same object from Deno KV, however, it won't by default have\ntype information associated with it. If you know the shape of the object that\nwas stored for the key, however, you can use\n",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions"},"type assertion"),"\nto inform the TypeScript compiler about the shape of an object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Author } from "./model.ts";\n\nconst kv = await Deno.openKv();\n\nconst r = await kv.get(["authors", "acdoyle"]);\nconst ac = r.value as Author;\n\nconsole.log(ac.fullName);\n')),(0,o.kt)("p",null,"You can also specify an optional\n",(0,o.kt)("a",{parentName:"p",href:"https://deno.land/api?s=Deno.Kv&p=prototype.get&unstable"},"type parameter")," for\n",(0,o.kt)("inlineCode",{parentName:"p"},"get"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Author } from "./model.ts";\n\nconst kv = await Deno.openKv();\n\nconst r = await kv.get<Author>(["authors", "acdoyle"]);\n\nconsole.log(r.value.fullName);\n')),(0,o.kt)("p",null,"For simpler data structures, this technique may be sufficient. But often, you\nwill want or need to apply some business logic when creating or accessing your\ndomain objects. When this need arises, you can develop a set of pure functions\nthat can operate on your DTOs."),(0,o.kt)("h2",{id:"encapsulating-business-logic-with-a-service-layer"},"Encapsulating business logic with a service layer"),(0,o.kt)("p",null,"When your application's persistence needs become more complex - such as when you\nneed to create ",(0,o.kt)("a",{parentName:"p",href:"/kv/manual/secondary_indexes"},"secondary indexes")," to query your data by\ndifferent keys, or maintain relationships between objects - you will want to\ncreate a set of functions to sit on top of your DTOs to ensure that the data\nbeing passed around is valid (and not merely typed correctly)."),(0,o.kt)("p",null,"From our business objects above, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Post")," object is complex enough where it is\nlikely to need a small layer of code to save and retrieve an instance of the\nobject. Below is an example of two functions that wrap the underlying Deno KV\nAPIs, and return strongly typed object instances for the ",(0,o.kt)("inlineCode",{parentName:"p"},"Post")," interface."),(0,o.kt)("p",null,"Notably, we need to store an identifier for an ",(0,o.kt)("inlineCode",{parentName:"p"},"Author")," object, so we can\nretrieve author information from KV later."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Author, Post } from "./model.ts";\n\nconst kv = await Deno.openKv();\n\ninterface RawPost extends Post {\n  authorUsername: string;\n}\n\nexport async function savePost(p: Post): Promise<Post> {\n  const postData: RawPost = Object.assign({}, p, {\n    authorUsername: p.author.username,\n  });\n\n  await kv.set(["posts", p.slug], postData);\n  return p;\n}\n\nexport async function getPost(slug: string): Promise<Post> {\n  const postResponse = await kv.get(["posts", slug]);\n  const rawPost = postResponse.value as RawPost;\n  const authorResponse = await kv.get(["authors", rawPost.authorUsername]);\n\n  const author = authorResponse.value as Author;\n  const post = Object.assign({}, postResponse.value, {\n    author,\n  }) as Post;\n\n  return post;\n}\n')),(0,o.kt)("p",null,"This thin layer uses a ",(0,o.kt)("inlineCode",{parentName:"p"},"RawPost")," interface, which extends the actual ",(0,o.kt)("inlineCode",{parentName:"p"},"Post"),"\ninterface, to include some additional data that is used to reference data at\nanother index (the associated ",(0,o.kt)("inlineCode",{parentName:"p"},"Author")," object)."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"savePost")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"getPost")," functions take the place of a direct Deno KV ",(0,o.kt)("inlineCode",{parentName:"p"},"get"),"\nor ",(0,o.kt)("inlineCode",{parentName:"p"},"set"),' operation, so that they can properly serialize and "hydrate" model\nobjects for us with appropriate types and associations.'))}m.isMDXComponent=!0}}]);