"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[2357],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>u});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var r=a.createContext({}),p=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=p(e.components);return a.createElement(r.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,r=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),d=p(n),c=s,u=d["".concat(r,".").concat(c)]||d[c]||m[c]||o;return n?a.createElement(u,i(i({ref:t},h),{},{components:n})):a.createElement(u,i({ref:t},h))}));function u(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l[d]="string"==typeof e?e:s,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},96202:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),s=(n(67294),n(3905));const o={},i="Snapshot Testing",l={unversionedId:"manual/basics/testing/snapshot_testing",id:"manual/basics/testing/snapshot_testing",title:"Snapshot Testing",description:"The Deno standard library comes with a",source:"@site/runtime/manual/basics/testing/snapshot_testing.md",sourceDirName:"manual/basics/testing",slug:"/manual/basics/testing/snapshot_testing",permalink:"/runtime/manual/basics/testing/snapshot_testing",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Behavior-Driven Development",permalink:"/runtime/manual/basics/testing/behavior_driven_development"},next:{title:"Using Visual Studio Code",permalink:"/runtime/manual/references/vscode_deno/"}},r={},p=[{value:"Basic usage",id:"basic-usage",level:2},{value:"Creating and updating snapshots",id:"creating-and-updating-snapshots",level:2},{value:"Permissions",id:"permissions",level:2},{value:"Version Control",id:"version-control",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Options",id:"options",level:3},{value:"Default Options",id:"default-options",level:3},{value:"Serialization with <code>Deno.customInspect</code>",id:"serialization-with-denocustominspect",level:3}],h={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,s.kt)(d,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"snapshot-testing"},"Snapshot Testing"),(0,s.kt)("p",null,"The Deno standard library comes with a\n",(0,s.kt)("a",{parentName:"p",href:"https://deno.land/std/testing/snapshot.ts"},"snapshot module"),", which enables\ndevelopers to write tests which assert a value against a reference snapshot.\nThis reference snapshot, is a serialized representation of the original value\nand is stored alongside the test file."),(0,s.kt)("p",null,"Snapshot testing can be useful in many cases, as it enables catching a wide\narray of bugs with very little code. It is particularly helpful in situations\nwhere it is difficult to precisely express what should be asserted, without\nrequiring a prohibitive amount of code, or where the assertions a test makes are\nexpected to change often. It therefore lends itself especially well to use in\nthe development of front ends and CLIs."),(0,s.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertSnapshot")," function will create a snapshot of a value and compare it\nto a reference snapshot, which is stored alongside the test file in the\n",(0,s.kt)("inlineCode",{parentName:"p"},"__snapshots__")," directory."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example_test.ts"',title:'"example_test.ts"'},'import {\n  assertSnapshot,\n} from "https://deno.land/std@0.208.0/testing/snapshot.ts";\n\nDeno.test("isSnapshotMatch", async function (t): Promise<void> {\n  const a = {\n    hello: "world!",\n    example: 123,\n  };\n  await assertSnapshot(t, a);\n});\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="__snapshots__/example_test.ts.snap"',title:'"__snapshots__/example_test.ts.snap"'},'export const snapshot = {};\n\nsnapshot[`isSnapshotMatch 1`] = `\n{\n  example: 123,\n  hello: "world!",\n}\n`;\n')),(0,s.kt)("p",null,"Calling ",(0,s.kt)("inlineCode",{parentName:"p"},"assertSnapshot")," in a test will throw an ",(0,s.kt)("inlineCode",{parentName:"p"},"AssertionError"),", causing the\ntest to fail, if the snapshot created during the test does not match the one in\nthe snapshot file."),(0,s.kt)("h2",{id:"creating-and-updating-snapshots"},"Creating and updating snapshots"),(0,s.kt)("p",null,"When adding new snapshot assertions to your test suite, or when intentionally\nmaking changes which cause your snapshots to fail, you can update your snapshots\nby running the snapshot tests in update mode. Tests can be run in update mode by\npassing the ",(0,s.kt)("inlineCode",{parentName:"p"},"--update")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"-u")," flag as an argument when running the test. When\nthis flag is passed, then any snapshots which do not match will be updated."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"deno test --allow-all -- --update\n")),(0,s.kt)("p",null,"Additionally, new snapshots will only be created when this flag is present."),(0,s.kt)("h2",{id:"permissions"},"Permissions"),(0,s.kt)("p",null,"When running snapshot tests, the ",(0,s.kt)("inlineCode",{parentName:"p"},"--allow-read")," permission must be enabled, or\nelse any calls to ",(0,s.kt)("inlineCode",{parentName:"p"},"assertSnapshot")," will fail due to insufficient permissions.\nAdditionally, when updating snapshots, the ",(0,s.kt)("inlineCode",{parentName:"p"},"--allow-write")," permission must also\nbe enabled, as this is required in order to update snapshot files."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertSnapshot")," function will only attempt to read from and write to\nsnapshot files. As such, the allow list for ",(0,s.kt)("inlineCode",{parentName:"p"},"--allow-read")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"--allow-write"),"\ncan be limited to only include existing snapshot files, if so desired."),(0,s.kt)("h2",{id:"version-control"},"Version Control"),(0,s.kt)("p",null,"Snapshot testing works best when changes to snapshot files are committed\nalongside other code changes. This allows for changes to reference snapshots to\nbe reviewed along side the code changes that caused them, and ensures that when\nothers pull your changes, their tests will pass without needing to update\nsnapshots locally."),(0,s.kt)("h2",{id:"advanced-usage"},"Advanced Usage"),(0,s.kt)("h3",{id:"options"},"Options"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertSnapshot")," function can also be called with an options object which\noffers greater flexibility and enables some non standard use cases."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import {\n  assertSnapshot,\n} from "https://deno.land/std@0.208.0/testing/snapshot.ts";\n\nDeno.test("isSnapshotMatch", async function (t): Promise<void> {\n  const a = {\n    hello: "world!",\n    example: 123,\n  };\n  await assertSnapshot(t, a, {\n    // options\n  });\n});\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"serializer"))),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"serializer")," option allows you to provide a custom serializer function. This\nwill be called by ",(0,s.kt)("inlineCode",{parentName:"p"},"assertSnapshot")," and be passed the value being asserted. It\nshould return a string. It is important that the serializer function is\ndeterministic i.e. that it will always produce the same output, given the same\ninput."),(0,s.kt)("p",null,"The result of the serializer function will be written to the snapshot file in\nupdate mode, and in assert mode will be compared to the snapshot stored in the\nsnapshot file."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example_test.ts"',title:'"example_test.ts"'},'import {\n  assertSnapshot,\n  serialize,\n} from "https://deno.land/std@0.208.0/testing/snapshot.ts";\nimport { stripColor } from "https://deno.land/std@0.208.0/fmt/colors.ts";\n\n/**\n * Serializes `actual` and removes ANSI escape codes.\n */\nfunction customSerializer(actual: string) {\n  return serialize(stripColor(actual));\n}\n\nDeno.test("Custom Serializer", async function (t): Promise<void> {\n  const output = "\\x1b[34mHello World!\\x1b[39m";\n  await assertSnapshot(t, output, {\n    serializer: customSerializer,\n  });\n});\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="__snapshots__/example_test.ts.snap"',title:'"__snapshots__/example_test.ts.snap"'},'export const snapshot = {};\n\nsnapshot[`Custom Serializer 1`] = `"Hello World!"`;\n')),(0,s.kt)("p",null,"Custom serializers can be useful in a variety of cases. One possible use case is\nto discard information which is not relevant and/or to present the serialized\noutput in a more human readable form."),(0,s.kt)("p",null,"For example, the above code snippet shows how a custom serializer could be used\nto remove ANSI escape codes (which encode font color and styles in CLI\napplications), making the snapshot more readable than it would be otherwise."),(0,s.kt)("p",null,"Other common use cases would be to obfuscate values which are non-deterministic\nor which you may not want to write to disk for other reasons. For example,\ntimestamps or file paths."),(0,s.kt)("p",null,"Note that the default serializer is exported from the snapshot module so that\nits functionality can be easily extended."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"dir")," and ",(0,s.kt)("inlineCode",{parentName:"strong"},"path"))),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"dir")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"path")," options allow you to control where the snapshot file will\nbe saved to and read from. These can be absolute paths or relative paths. If\nrelative, the they will be resolved relative to the test file."),(0,s.kt)("p",null,"For example, if your test file is located at ",(0,s.kt)("inlineCode",{parentName:"p"},"/path/to/test.ts")," and the ",(0,s.kt)("inlineCode",{parentName:"p"},"dir"),"\noption is set to ",(0,s.kt)("inlineCode",{parentName:"p"},"snapshots"),", then the snapshot file would be written to\n",(0,s.kt)("inlineCode",{parentName:"p"},"/path/to/snapshots/test.ts.snap"),"."),(0,s.kt)("p",null,"As shown in the above example, the ",(0,s.kt)("inlineCode",{parentName:"p"},"dir")," option allows you to specify the\nsnapshot directory, while still using the default format for the snapshot file\nname."),(0,s.kt)("p",null,"In contrast, the ",(0,s.kt)("inlineCode",{parentName:"p"},"path")," option allows you to specify the directory and file name\nof the snapshot file."),(0,s.kt)("p",null,"For example, if your test file is located at ",(0,s.kt)("inlineCode",{parentName:"p"},"/path/to/test.ts")," and the ",(0,s.kt)("inlineCode",{parentName:"p"},"path"),"\noption is set to ",(0,s.kt)("inlineCode",{parentName:"p"},"snapshots/test.snapshot"),", then the snapshot file would be\nwritten to ",(0,s.kt)("inlineCode",{parentName:"p"},"/path/to/snapshots/test.snapshot"),"."),(0,s.kt)("p",null,"If both ",(0,s.kt)("inlineCode",{parentName:"p"},"dir")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"path")," are specified, the ",(0,s.kt)("inlineCode",{parentName:"p"},"dir")," option will be ignored and the\n",(0,s.kt)("inlineCode",{parentName:"p"},"path")," option will be handled as normal."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"mode"))),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"mode")," option can be either ",(0,s.kt)("inlineCode",{parentName:"p"},"assert")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"update"),". When set, the ",(0,s.kt)("inlineCode",{parentName:"p"},"--update"),"\nand ",(0,s.kt)("inlineCode",{parentName:"p"},"-u")," flags will be ignored."),(0,s.kt)("p",null,"If the ",(0,s.kt)("inlineCode",{parentName:"p"},"mode")," option is set to ",(0,s.kt)("inlineCode",{parentName:"p"},"assert"),", then ",(0,s.kt)("inlineCode",{parentName:"p"},"assertSnapshot")," will always\nbehave as though the update flag is not passed i.e. if the snapshot does not\nmatch the one saved in the snapshot file, then an ",(0,s.kt)("inlineCode",{parentName:"p"},"AssertionError")," will be\nthrown."),(0,s.kt)("p",null,"If the ",(0,s.kt)("inlineCode",{parentName:"p"},"mode")," option is set to ",(0,s.kt)("inlineCode",{parentName:"p"},"update"),", then ",(0,s.kt)("inlineCode",{parentName:"p"},"assertSnapshot")," will always\nbehave as though the update flag has been passed i.e. if the snapshot does not\nmatch the one saved in the snapshot file, then the snapshot will be updated\nafter all tests have run."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"name"))),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"name")," option specifies the name of the snapshot. By default, the name of\nthe test step will be used. However, if specified, the ",(0,s.kt)("inlineCode",{parentName:"p"},"name")," option will be\nused instead."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example_test.ts"',title:'"example_test.ts"'},'import {\n  assertSnapshot,\n} from "https://deno.land/std@0.208.0/testing/snapshot.ts";\n\nDeno.test("isSnapshotMatch", async function (t): Promise<void> {\n  const a = {\n    hello: "world!",\n    example: 123,\n  };\n  await assertSnapshot(t, a, {\n    name: "Test Name",\n  });\n});\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="__snapshots__/example_test.ts.snap"',title:'"__snapshots__/example_test.ts.snap"'},'export const snapshot = {};\n\nsnapshot[`Test Name 1`] = `\n{\n  example: 123,\n  hello: "world!",\n}\n`;\n')),(0,s.kt)("p",null,"When ",(0,s.kt)("inlineCode",{parentName:"p"},"assertSnapshot")," is run multiple times with the same value for ",(0,s.kt)("inlineCode",{parentName:"p"},"name"),", then\nthe suffix will be incremented as normal. i.e. ",(0,s.kt)("inlineCode",{parentName:"p"},"Test Name 1"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"Test Name 2"),",\n",(0,s.kt)("inlineCode",{parentName:"p"},"Test Name 3"),", etc."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"msg"))),(0,s.kt)("p",null,"Allows setting a custom error message to use. This will overwrite the default\nerror message, which includes the diff for failed snapshots."),(0,s.kt)("h3",{id:"default-options"},"Default Options"),(0,s.kt)("p",null,"You can configure default options for ",(0,s.kt)("inlineCode",{parentName:"p"},"assertSnapshot"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example_test.ts"',title:'"example_test.ts"'},'import {\n  createAssertSnapshot,\n} from "https://deno.land/std@0.208.0/testing/snapshot.ts";\n\nconst assertSnapshot = createAssertSnapshot({\n  // options\n});\n')),(0,s.kt)("p",null,"When configuring default options like this, the resulting ",(0,s.kt)("inlineCode",{parentName:"p"},"assertSnapshot"),"\nfunction will function the same as the default function exported from the\nsnapshot module. If passed an optional options object, this will take precedence\nover the default options, where the value provided for an option differs."),(0,s.kt)("p",null,'It is possible to "extend" an ',(0,s.kt)("inlineCode",{parentName:"p"},"assertSnapshot")," function which has been\nconfigured with default options."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example_test.ts"',title:'"example_test.ts"'},'import {\n  createAssertSnapshot,\n} from "https://deno.land/std@0.208.0/testing/snapshot.ts";\nimport { stripColor } from "https://deno.land/std@0.208.0/fmt/colors.ts";\n\nconst assertSnapshot = createAssertSnapshot({\n  dir: ".snaps",\n});\n\nconst assertMonochromeSnapshot = createAssertSnapshot<string>(\n  { serializer: stripColor },\n  assertSnapshot,\n);\n\nDeno.test("isSnapshotMatch", async function (t): Promise<void> {\n  const a = "\\x1b[32mThis green text has had it\'s colours stripped\\x1b[39m";\n  await assertMonochromeSnapshot(t, a);\n});\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title=".snaps/example_test.ts.snap"',title:'".snaps/example_test.ts.snap"'},"export const snapshot = {};\n\nsnapshot[`isSnapshotMatch 1`] = `This green text has had it's colours stripped`;\n")),(0,s.kt)("h3",{id:"serialization-with-denocustominspect"},"Serialization with ",(0,s.kt)("inlineCode",{parentName:"h3"},"Deno.customInspect")),(0,s.kt)("p",null,"The default serialization behaviour can be customised in two ways. The first is\nby specifying the ",(0,s.kt)("inlineCode",{parentName:"p"},"serializer")," option. This allows you to control the\nserialisation of any value which is passed to a specific ",(0,s.kt)("inlineCode",{parentName:"p"},"assertSnapshot")," call.\nSee the ",(0,s.kt)("a",{parentName:"p",href:"#options"},"above documentation")," on the correct usage of this option."),(0,s.kt)("p",null,"The second option is to make use of ",(0,s.kt)("inlineCode",{parentName:"p"},"Deno.customInspect"),". Because the default\nserializer used by ",(0,s.kt)("inlineCode",{parentName:"p"},"assertSnapshot")," uses ",(0,s.kt)("inlineCode",{parentName:"p"},"Deno.inspect")," under the hood, you can\nset property ",(0,s.kt)("inlineCode",{parentName:"p"},'Symbol.for("Deno.customInspect")')," to a custom serialization\nfunction."),(0,s.kt)("p",null,"Doing so will ensure that the custom serialization will, by default, be used\nwhenever the object is passed to ",(0,s.kt)("inlineCode",{parentName:"p"},"assertSnapshot"),". This can be useful in many\ncases. One example is shown in the code snippet below."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example_test.ts"',title:'"example_test.ts"'},'import {\n  assertSnapshot,\n} from "https://deno.land/std@0.208.0/testing/snapshot.ts";\n\nclass HTMLTag {\n  constructor(\n    public name: string,\n    public children: Array<HTMLTag | string> = [],\n  ) {}\n\n  public render(depth: number) {\n    const indent = "  ".repeat(depth);\n    let output = `${indent}<${this.name}>\\n`;\n    for (const child of this.children) {\n      if (child instanceof HTMLTag) {\n        output += `${child.render(depth + 1)}\\n`;\n      } else {\n        output += `${indent}  ${child}\\n`;\n      }\n    }\n    output += `${indent}</${this.name}>`;\n    return output;\n  }\n\n  public [Symbol.for("Deno.customInspect")]() {\n    return this.render(0);\n  }\n}\n\nDeno.test("Page HTML Tree", async (t) => {\n  const page = new HTMLTag("html", [\n    new HTMLTag("head", [\n      new HTMLTag("title", [\n        "Simple SSR Example",\n      ]),\n    ]),\n    new HTMLTag("body", [\n      new HTMLTag("h1", [\n        "Simple SSR Example",\n      ]),\n      new HTMLTag("p", [\n        "Ex of customInspect for a snapshot of an SSR representation",\n      ]),\n    ]),\n  ]);\n\n  await assertSnapshot(t, page);\n});\n')),(0,s.kt)("p",null,"This test will produce the following snapshot."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="__snapshots__/example_test.ts.snap"',title:'"__snapshots__/example_test.ts.snap"'},"export const snapshot = {};\n\nsnapshot[`Page HTML Tree 1`] = `\n<html>\n  <head>\n    <title>\n      Simple SSR Example\n    </title>\n  </head>\n  <body>\n    <h1>\n      Simple SSR Example\n    </h1>\n    <p>\n      Ex of customInspect for a snapshot of an SSR representation\n    </p>\n  </body>\n</html>\n`;\n")),(0,s.kt)("p",null,"In contrast, when we remove the ",(0,s.kt)("inlineCode",{parentName:"p"},"Deno.customInspect")," method, the test will\nproduce the following snapshot."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="__snapshots__/example_test.ts.snap"',title:'"__snapshots__/example_test.ts.snap"'},'export const snapshot = {};\n\nsnapshot[`Page HTML Tree 1`] = `\nHTMLTag {\n  children: [\n    HTMLTag {\n      children: [\n        HTMLTag {\n          children: [\n            "Simple SSR Example",\n          ],\n          name: "title",\n        },\n      ],\n      name: "head",\n    },\n    HTMLTag {\n      children: [\n        HTMLTag {\n          children: [\n            "Simple SSR Example",\n          ],\n          name: "h1",\n        },\n        HTMLTag {\n          children: [\n            "Ex of customInspect for a snapshot of an SSR representation",\n          ],\n          name: "p",\n        },\n      ],\n      name: "body",\n    },\n  ],\n  name: "html",\n}\n`;\n')),(0,s.kt)("p",null,"You can see that this snapshot is much less readable. This is because:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"The keys are sorted alphabetically, so the name of the element is displayed\nafter its children"),(0,s.kt)("li",{parentName:"ol"},"It includes a lot of extra information, causing the snapshot to be more than\ntwice as long"),(0,s.kt)("li",{parentName:"ol"},"It is not an accurate serialization of the HTML which the data represents")),(0,s.kt)("p",null,"Note that in this example it would be entirely possible to achieve the same\nresult by calling:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},"await assertSnapshot(t, page.render(0));\n")),(0,s.kt)("p",null,"However, depending on the public API you choose to expose, this may not be\npractical in other cases."),(0,s.kt)("p",null,"It is also worth considering that this will have an impact beyond just snapshot\ntesting. For example, ",(0,s.kt)("inlineCode",{parentName:"p"},"Deno.customInspect")," is also used to serialize objects\nwhen calling ",(0,s.kt)("inlineCode",{parentName:"p"},"console.log")," and in some other cases. This may or may not be\ndesirable."))}m.isMDXComponent=!0}}]);