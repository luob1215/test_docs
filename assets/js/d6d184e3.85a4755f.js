"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[58],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return t?a.createElement(g,r(r({ref:n},p),{},{components:t})):a.createElement(g,r({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},59055:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));const i={},r="How to Deploy Deno to Digital Ocean",l={unversionedId:"manual/advanced/deploying_deno/digital_ocean",id:"manual/advanced/deploying_deno/digital_ocean",title:"How to Deploy Deno to Digital Ocean",description:"Digital Ocean is a popular cloud infrastructure provider offering a variety of",source:"@site/runtime/manual/advanced/deploying_deno/digital_ocean.md",sourceDirName:"manual/advanced/deploying_deno",slug:"/manual/advanced/deploying_deno/digital_ocean",permalink:"/runtime/manual/advanced/deploying_deno/digital_ocean",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Deploying Deno to Cloudflare Workers",permalink:"/runtime/manual/advanced/deploying_deno/cloudflare_workers"},next:{title:"How to Deploy to Google Cloud Run",permalink:"/runtime/manual/advanced/deploying_deno/google_cloud_run"}},s={},c=[{value:"Create Dockerfile and docker-compose.yml",id:"create-dockerfile-and-docker-composeyml",level:2},{value:"Build, Tag, and Push your Docker image to Digital Ocean Container Registry",id:"build-tag-and-push-your-docker-image-to-digital-ocean-container-registry",level:2},{value:"Deploy to Digital Ocean via SSH",id:"deploy-to-digital-ocean-via-ssh",level:2},{value:"Automate the Deployment via GitHub Actions",id:"automate-the-deployment-via-github-actions",level:2},{value:"Generate <code>DIGITALOCEAN_SSHKEY</code>",id:"generate-digitalocean_sshkey",level:3},{value:"Define the yml File",id:"define-the-yml-file",level:3}],p={toc:c},d="wrapper";function u(e){let{components:n,...i}=e;return(0,o.kt)(d,(0,a.Z)({},p,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-to-deploy-deno-to-digital-ocean"},"How to Deploy Deno to Digital Ocean"),(0,o.kt)("p",null,"Digital Ocean is a popular cloud infrastructure provider offering a variety of\nhosting services ranging from networking, to compute, to storage."),(0,o.kt)("p",null,"Here's a step by step guide to deploying a Deno app to Digital Ocean using\nDocker and GitHub Actions."),(0,o.kt)("p",null,"The pre-requisite for this is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/cli/"},(0,o.kt)("inlineCode",{parentName:"a"},"docker")," CLI")),(0,o.kt)("li",{parentName:"ul"},"a ",(0,o.kt)("a",{parentName:"li",href:"https://github.com"},"GitHub account")),(0,o.kt)("li",{parentName:"ul"},"a ",(0,o.kt)("a",{parentName:"li",href:"https://digitalocean.com"},"Digital Ocean account")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.digitalocean.com/reference/doctl/how-to/install/"},(0,o.kt)("inlineCode",{parentName:"a"},"doctl")," CLI"))),(0,o.kt)("h2",{id:"create-dockerfile-and-docker-composeyml"},"Create Dockerfile and docker-compose.yml"),(0,o.kt)("p",null,"To focus on the deployment, our app will simply be a ",(0,o.kt)("inlineCode",{parentName:"p"},"main.ts")," file that returns\na string as an HTTP response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},'import { Application } from "https://deno.land/x/oak/mod.ts";\n\nconst app = new Application();\n\napp.use((ctx) => {\n  ctx.response.body = "Hello from Deno and Digital Ocean!";\n});\n\nawait app.listen({ port: 8000 });\n')),(0,o.kt)("p",null,"Then, we'll create two files -- ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," -- to\nbuild the Docker image."),(0,o.kt)("p",null,"In our ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile"),", let's add:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Dockerfile,",metastring:"ignore",ignore:!0},'FROM denoland/deno\n\nEXPOSE 8000\n\nWORKDIR /app\n\nADD . /app\n\nRUN deno cache main.ts\n\nCMD ["run", "--allow-net", "main.ts"]\n')),(0,o.kt)("p",null,"Then, in our ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml,",metastring:"ignore",ignore:!0},"version: '3'\n\nservices:\n  web:\n    build: .\n    container_name: deno-container\n    image: deno-image\n    ports:\n      - \"8000:8000\"\n")),(0,o.kt)("p",null,"Let's test this locally by running ",(0,o.kt)("inlineCode",{parentName:"p"},"docker compose -f docker-compose.yml build"),",\nthen ",(0,o.kt)("inlineCode",{parentName:"p"},"docker compose up"),", and going to ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost:8000"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Hello from localhost",src:t(44423).Z,width:"1072",height:"577"})),(0,o.kt)("p",null,"It works!"),(0,o.kt)("h2",{id:"build-tag-and-push-your-docker-image-to-digital-ocean-container-registry"},"Build, Tag, and Push your Docker image to Digital Ocean Container Registry"),(0,o.kt)("p",null,"Digital Ocean has its own private Container Registry, with which we can push and\npull Docker images. In order to use this registry, let's\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.digitalocean.com/reference/doctl/how-to/install/"},"install and authenticate ",(0,o.kt)("inlineCode",{parentName:"a"},"doctl")," on the command line"),"."),(0,o.kt)("p",null,"After that, we'll create a new private registry named ",(0,o.kt)("inlineCode",{parentName:"p"},"deno-on-digital-ocean"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"doctl registry create deno-on-digital-ocean\n")),(0,o.kt)("p",null,"Using our Dockerfile and docker-compose.yml, we'll build a new image, tag it,\nand push it to the registry. Note that ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," will name the build\nlocally as ",(0,o.kt)("inlineCode",{parentName:"p"},"deno-image"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"docker compose -f docker-compose.yml build\n")),(0,o.kt)("p",null,"Let's ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/commandline/tag/"},"tag")," it with\n",(0,o.kt)("inlineCode",{parentName:"p"},"new"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"docker tag deno-image registry.digitalocean.com/deno-on-digital-ocean/deno-image:new\n")),(0,o.kt)("p",null,"Now we can push it to the registry."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"docker push registry.digitalocean.com/deno-on-digital-ocean/deno-image:new\n")),(0,o.kt)("p",null,"You should see your new ",(0,o.kt)("inlineCode",{parentName:"p"},"deno-image")," with the ",(0,o.kt)("inlineCode",{parentName:"p"},"new")," tag in your\n",(0,o.kt)("a",{parentName:"p",href:"https://cloud.digitalocean.com/registry"},"Digital Ocean container registry"),":"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"New deno image on Digital Ocean container registry",src:t(87227).Z,width:"1392",height:"1167"})),(0,o.kt)("p",null,"Perfect!"),(0,o.kt)("h2",{id:"deploy-to-digital-ocean-via-ssh"},"Deploy to Digital Ocean via SSH"),(0,o.kt)("p",null,"Once our ",(0,o.kt)("inlineCode",{parentName:"p"},"deno-image")," is in the registry, we can run it anywhere using\n",(0,o.kt)("inlineCode",{parentName:"p"},"docker run"),". In this case, we'll run it while in our\n",(0,o.kt)("a",{parentName:"p",href:"https://www.digitalocean.com/products/droplets"},"Digital Ocean Droplet"),", their\nhosted virtual machine."),(0,o.kt)("p",null,"While on your ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.digitalocean.com/droplets"},"Droplet page"),", click on\nyour Droplet and then ",(0,o.kt)("inlineCode",{parentName:"p"},"console")," to SSH into the virtual machine. (Or you can\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.digitalocean.com/products/droplets/how-to/connect-with-ssh/"},"ssh directly from your command line"),".)"),(0,o.kt)("p",null,"To pull down the ",(0,o.kt)("inlineCode",{parentName:"p"},"deno-image")," image and run it, let's run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"docker run -d --restart always -it -p 8000:8000 --name deno-image registry.digitalocean.com/deno-on-digital-ocean/deno-image:new\n")),(0,o.kt)("p",null,"Using our browser to go to the Digital Ocean address, we now see:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Hello from Deno and Digital Ocean",src:t(96109).Z,width:"1028",height:"592"})),(0,o.kt)("p",null,"Boom!"),(0,o.kt)("h2",{id:"automate-the-deployment-via-github-actions"},"Automate the Deployment via GitHub Actions"),(0,o.kt)("p",null,"Let's automate that entire process with GitHub actions."),(0,o.kt)("p",null,"First, let's get all of our environmental variables needed for logging into\n",(0,o.kt)("inlineCode",{parentName:"p"},"doctl")," and SSHing into the Droplet:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.digitalocean.com/reference/api/create-personal-access-token/"},"DIGITALOCEAN_ACCESS_TOKEN")),(0,o.kt)("li",{parentName:"ul"},"DIGITALOCEAN_HOST (the IP address of your Droplet)"),(0,o.kt)("li",{parentName:"ul"},"DIGITALOCEAN_USERNAME (the default is ",(0,o.kt)("inlineCode",{parentName:"li"},"root"),")"),(0,o.kt)("li",{parentName:"ul"},"DIGITALOCEAN_SSHKEY (more on this below)")),(0,o.kt)("h3",{id:"generate-digitalocean_sshkey"},"Generate ",(0,o.kt)("inlineCode",{parentName:"h3"},"DIGITALOCEAN_SSHKEY")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"DIGITALOCEAN_SSHKEY")," is a private key where its public counterpart exists\non the virtual machine in its ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.ssh/authorized_keys")," file."),(0,o.kt)("p",null,"To do this, first let's run ",(0,o.kt)("inlineCode",{parentName:"p"},"ssh-keygen")," on your local machine:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"ssh-keygen\n")),(0,o.kt)("p",null,"When prompted for an email, ",(0,o.kt)("strong",{parentName:"p"},"be sure to use your GitHub email")," for the GitHub\nAction to authenticate properly. Your final output should look something like\nthis:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Output\nYour identification has been saved in /your_home/.ssh/id_rsa\nYour public key has been saved in /your_home/.ssh/id_rsa.pub\nThe key fingerprint is:\nSHA256:/hk7MJ5n5aiqdfTVUZr+2Qt+qCiS7BIm5Iv0dxrc3ks user@host\nThe key's randomart image is:\n+---[RSA 3072]----+\n|                .|\n|               + |\n|              +  |\n| .           o . |\n|o       S   . o  |\n| + o. .oo. ..  .o|\n|o = oooooEo+ ...o|\n|.. o *o+=.*+o....|\n|    =+=ooB=o.... |\n+----[SHA256]-----+\n")),(0,o.kt)("p",null,"Next, we'll have to upload the newly generated public key to your Droplet. You\ncan either use ",(0,o.kt)("a",{parentName:"p",href:"https://www.ssh.com/academy/ssh/copy-id"},(0,o.kt)("inlineCode",{parentName:"a"},"ssh-copy-id"))," or\nmanually copy it, ssh into your Droplet, and pasting it to\n",(0,o.kt)("inlineCode",{parentName:"p"},"~/.ssh/authorized_keys"),"."),(0,o.kt)("p",null,"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"ssh-copy-id"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"ssh-copy-id {{ username }}@{{ host }}\n")),(0,o.kt)("p",null,"This command will prompt you for the password. Note that this will automatically\ncopy ",(0,o.kt)("inlineCode",{parentName:"p"},"id_rsa.pub")," key from your local machine and paste it to your Droplet's\n",(0,o.kt)("inlineCode",{parentName:"p"},"~/.ssh/authorized_keys")," file. If you've named your key something other than\n",(0,o.kt)("inlineCode",{parentName:"p"},"id_rsa"),", you can pass it with the ",(0,o.kt)("inlineCode",{parentName:"p"},"-i")," flag to the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"ssh-copy-id -i ~/.ssh/mykey {{ username }}@{{ host }}\n")),(0,o.kt)("p",null,"To test whether this is done successfully:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell,",metastring:"ignore",ignore:!0},"ssh -i ~/.ssh/mykey {{ username }}@{{ host }}\n")),(0,o.kt)("p",null,"Awesome!"),(0,o.kt)("h3",{id:"define-the-yml-file"},"Define the yml File"),(0,o.kt)("p",null,"The final step is to put this all together. We're basically taking each step\nduring the manual deployment and adding them to a GitHub Actions workflow yml\nfile:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml,",metastring:"ignore",ignore:!0},'name: Deploy to Digital Ocean\n\non:\n  push:\n    branches:\n      - main\n\nenv:\n  REGISTRY: "registry.digitalocean.com/deno-on-digital-ocean"\n  IMAGE_NAME: "deno-image"\n\njobs:\n  build_and_push:\n    name: Build, Push, and Deploy\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout main\n      uses: actions/checkout@v2\n\n    - name: Set $TAG from shortened sha\n      run: echo "TAG=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV\n\n    - name: Build container image\n      run: docker compose -f docker-compose.yml build\n\n    - name: Tag container image\n      run: docker tag ${{ env.IMAGE_NAME }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}\n\n    - name: Install `doctl`\n      uses: digitalocean/action-doctl@v2\n      with:\n        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}\n\n    - name: Log in to Digital Ocean Container Registry\n      run: doctl registry login --expiry-seconds 600\n\n    - name: Push image to Digital Ocean Container Registry\n      run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}\n\n    - name: Deploy via SSH\n      uses: appleboy/ssh-action@master\n      with:\n        host: ${{ secrets.DIGITALOCEAN_HOST }}\n        username: ${{ secrets.DIGITALOCEAN_USERNAME }}\n        key: ${{ secrets.DIGITALOCEAN_SSHKEY }}\n        script: |\n          # Login to Digital Ocean Container Registry\n          docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com\n          # Stop and remove a running image.\n          docker stop ${{ env.IMAGE_NAME }}\n          docker rm ${{ env.IMAGE_NAME }}\n          # Run a new container from a new image\n          docker run -d --restart always -it -p 8000:8000 --name ${{ env.IMAGE_NAME }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}\n')),(0,o.kt)("p",null,"When you push to GitHub, this yml file is automatically detected, triggering the\nDeploy action."))}u.isMDXComponent=!0},96109:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/hello-from-deno-and-digital-ocean-e290fb243511d81cdc61adf006e33113.png"},44423:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/hello-world-from-localhost-5d39622d6fcf29ae20174d9af7b5954e.png"},87227:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/new-deno-image-on-digital-ocean-container-registry-e1dac0bf1bcc1c2328c05c0e4089c543.png"}}]);