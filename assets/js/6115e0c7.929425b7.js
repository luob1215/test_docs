"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[9480],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=s(n),m=i,g=u["".concat(p,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(g,o(o({ref:t},l),{},{components:n})):a.createElement(g,o({ref:t},l))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[u]="string"==typeof e?e:i,o[1]=c;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},25224:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>s});var a=n(87462),i=(n(67294),n(3905));const r={},o="Migrating to and from JavaScript",c={unversionedId:"manual/advanced/typescript/migration",id:"manual/advanced/typescript/migration",title:"Migrating to and from JavaScript",description:"One of the advantages of Deno is that it treats TypeScript and JavaScript pretty",source:"@site/runtime/manual/advanced/typescript/migration.md",sourceDirName:"manual/advanced/typescript",slug:"/manual/advanced/typescript/migration",permalink:"/runtime/manual/advanced/typescript/migration",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Configuring TypeScript in Deno",permalink:"/runtime/manual/advanced/typescript/configuration"},next:{title:"FAQs about TypeScript in Deno",permalink:"/runtime/manual/advanced/typescript/faqs"}},p={},s=[{value:"Type checking JavaScript",id:"type-checking-javascript",level:2},{value:"Using JSDoc in JavaScript",id:"using-jsdoc-in-javascript",level:2},{value:"Skipping type checking",id:"skipping-type-checking",level:2},{value:"Just renaming JS files to TS files",id:"just-renaming-js-files-to-ts-files",level:2}],l={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"migrating-to-and-from-javascript"},"Migrating to and from JavaScript"),(0,i.kt)("p",null,"One of the advantages of Deno is that it treats TypeScript and JavaScript pretty\nequally. This might mean that transitioning from JavaScript to TypeScript or\neven from TypeScript to JavaScript is something you want to accomplish. There\nare several features of Deno that can help with this."),(0,i.kt)("h2",{id:"type-checking-javascript"},"Type checking JavaScript"),(0,i.kt)("p",null,"You might have some JavaScript that you would like to ensure is more type sound\nbut you don't want to go through a process of adding type annotations\neverywhere."),(0,i.kt)("p",null,"Deno supports using the TypeScript type checker to type check JavaScript. You\ncan mark any individual file by adding the check JavaScript pragma to the file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// @ts-check\n")),(0,i.kt)("p",null,"This will cause the type checker to infer type information about the JavaScript\ncode and raise any issues as diagnostic issues."),(0,i.kt)("p",null,"These can be turned on for all JavaScript files in a program by providing a\nconfiguration file with the check JS option enabled:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "checkJs": true\n  }\n}\n')),(0,i.kt)("p",null,"And setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"--config")," option on the command line."),(0,i.kt)("h2",{id:"using-jsdoc-in-javascript"},"Using JSDoc in JavaScript"),(0,i.kt)("p",null,"If you are type checking JavaScript, or even importing JavaScript into\nTypeScript you can use JSDoc in JavaScript to express more types information\nthan can just be inferred from the code itself. Deno supports this without any\nadditional configuration, you simply need to annotate the code in line with the\nsupported\n",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html"},"TypeScript JSDoc"),".\nFor example to set the type of an array:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/** @type {string[]} */\nconst a = [];\n")),(0,i.kt)("h2",{id:"skipping-type-checking"},"Skipping type checking"),(0,i.kt)("p",null,"You might have TypeScript code that you are experimenting with, where the syntax\nis valid but not fully type safe. You can always bypass type checking for a\nwhole program by passing the ",(0,i.kt)("inlineCode",{parentName:"p"},"--no-check"),"."),(0,i.kt)("p",null,"You can also skip whole files being type checked, including JavaScript if you\nhave check JS enabled, by using the no-check pragma:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// @ts-nocheck\n")),(0,i.kt)("h2",{id:"just-renaming-js-files-to-ts-files"},"Just renaming JS files to TS files"),(0,i.kt)("p",null,"While this might work in some cases, it has some severe limits in Deno. This is\nbecause Deno, by default, runs type checking in what is called ",(0,i.kt)("em",{parentName:"p"},"strict mode"),".\nThis means a lot of unclear or ambiguous situations where are not caught in\nnon-strict mode will result in diagnostics being generated, and JavaScript is\nnothing but unclear and ambiguous when it comes to types."))}d.isMDXComponent=!0}}]);