"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[1819],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>s});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var p=n.createContext({}),u=function(e){var t=n.useContext(p),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},c=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(o),m=r,s=d["".concat(p,".").concat(m)]||d[m]||y[m]||a;return o?n.createElement(s,l(l({ref:t},c),{},{components:o})):n.createElement(s,l({ref:t},c))}));function s(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,l=new Array(a);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<a;u++)l[u]=o[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},78857:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>y,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var n=o(87462),r=(o(67294),o(3905));const a={},l="Deploy with GitHub integration",i={unversionedId:"manual/how-to-deploy",id:"manual/how-to-deploy",title:"Deploy with GitHub integration",description:"The simplest way to deploy more complex projects is via our Github integration.",source:"@site/deploy/manual/how-to-deploy.md",sourceDirName:"manual",slug:"/manual/how-to-deploy",permalink:"/deploy/manual/how-to-deploy",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"deployGuideHome",previous:{title:"Playgrounds",permalink:"/deploy/manual/playgrounds"},next:{title:"CI and GitHub Actions",permalink:"/deploy/manual/ci_github"}},p={},u=[{value:"Deploy from command line with <code>deployctl</code>",id:"deploy-from-command-line-with-deployctl",level:3},{value:"Deploy with playground",id:"deploy-with-playground",level:3}],c={toc:u},d="wrapper";function y(e){let{components:t,...o}=e;return(0,r.kt)(d,(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"deploy-with-github-integration"},"Deploy with GitHub integration"),(0,r.kt)("p",null,"The simplest way to deploy more complex projects is via our Github integration.\nThis allows you to link a Deno Deploy project to a GitHub repository. Every time\nyou push to the repository, your changes will be automatically deployed."),(0,r.kt)("p",null,"Via the Github integration, you can add a Github Action that defines a build\nstep in your deployment process."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"ci_github"},"the Github integration page")," for more details."),(0,r.kt)("h3",{id:"deploy-from-command-line-with-deployctl"},"Deploy from command line with ",(0,r.kt)("a",{parentName:"h3",href:"deployctl"},(0,r.kt)("inlineCode",{parentName:"a"},"deployctl"))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"deployctl")," is a command line tool for deploying your code to Deno Deploy. You\ncan control more details of your deployment than the above automatic GitHub\nintegration by using ",(0,r.kt)("inlineCode",{parentName:"p"},"deployctl"),"."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"deployctl"},"the ",(0,r.kt)("inlineCode",{parentName:"a"},"deployctl")," page")," for more details."),(0,r.kt)("h3",{id:"deploy-with-playground"},"Deploy with playground"),(0,r.kt)("p",null,"The easiest way to deploy some code is via a Deno Deploy playground."),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"playgrounds"},"playground page")," for more details."))}y.isMDXComponent=!0}}]);