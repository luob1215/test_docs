"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[4223],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),c=i,h=m["".concat(s,".").concat(c)]||m[c]||d[c]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},10018:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const r={},o="Language Server Overview",l={unversionedId:"manual/advanced/language_server/overview",id:"manual/advanced/language_server/overview",title:"Language Server Overview",description:"The Deno Language Server provides a server implementation of the",source:"@site/runtime/manual/advanced/language_server/overview.md",sourceDirName:"manual/advanced/language_server",slug:"/manual/advanced/language_server/overview",permalink:"/runtime/manual/advanced/language_server/overview",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Using LinkeDOM with Deno",permalink:"/runtime/manual/advanced/jsx_dom/linkedom"},next:{title:"Import Completions and Intelligent Registries",permalink:"/runtime/manual/advanced/language_server/imports"}},s={},p=[{value:"Structure",id:"structure",level:2},{value:"Settings",id:"settings",level:2},{value:"Commands",id:"commands",level:2},{value:"Requests",id:"requests",level:2},{value:"Notifications",id:"notifications",level:2},{value:"Language IDs",id:"language-ids",level:2}],u={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"language-server-overview"},"Language Server Overview"),(0,i.kt)("p",null,"The Deno Language Server provides a server implementation of the\n",(0,i.kt)("a",{parentName:"p",href:"https://microsoft.github.io/language-server-protocol/"},"Language Server Protocol"),"\nwhich is specifically tailored to provide a ",(0,i.kt)("em",{parentName:"p"},"Deno")," view of code. It is\nintegrated into the command line and can be started via the ",(0,i.kt)("inlineCode",{parentName:"p"},"lsp")," sub-command."),(0,i.kt)("p",null,"Most users will never interact with the server directly, but instead will via\n",(0,i.kt)("a",{parentName:"p",href:"/runtime/manual/references/vscode_deno/"},(0,i.kt)("inlineCode",{parentName:"a"},"vscode_deno"))," or another\n",(0,i.kt)("a",{parentName:"p",href:"/runtime/manual/getting_started/setup_your_environment"},"editor extension"),". This\ndocumentation is for those implementing a editor client."),(0,i.kt)("h2",{id:"structure"},"Structure"),(0,i.kt)("p",null,"When the language server is started, a ",(0,i.kt)("inlineCode",{parentName:"p"},"LanguageServer")," instance is created\nwhich holds all of the state of the language server. It also defines all of the\nmethods that the client calls via the Language Server RPC protocol."),(0,i.kt)("h2",{id:"settings"},"Settings"),(0,i.kt)("p",null,"There are several settings that the language server supports for a workspace:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.enable")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.enablePaths")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.cache")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.certificateStores")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.config")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.importMap")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.internalDebug")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.codeLens.implementations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.codeLens.references")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.codeLens.referencesAllFunctions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.codeLens.test")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.suggest.completeFunctionCalls")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.suggest.names")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.suggest.paths")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.suggest.autoImports")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.suggest.imports.autoDiscover")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.suggest.imports.hosts")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.lint")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.tlsCertificate")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.unsafelyIgnoreCertificateErrors")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.unstable"))),(0,i.kt)("p",null,"There are settings that are supported on a per resource basis by the language\nserver:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.enable")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.enablePaths")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.codeLens.test"))),(0,i.kt)("p",null,"There are several points in the process where Deno analyzes these settings.\nFirst, when the ",(0,i.kt)("inlineCode",{parentName:"p"},"initialize")," request from the client, the\n",(0,i.kt)("inlineCode",{parentName:"p"},"initializationOptions")," will be assumed to be an object that represents the\n",(0,i.kt)("inlineCode",{parentName:"p"},"deno")," namespace of options. For example, the following value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "enable": true,\n  "unstable": true\n}\n')),(0,i.kt)("p",null,"Would enable Deno with the unstable APIs for this instance of the language\nserver."),(0,i.kt)("p",null,"When the language server receives a ",(0,i.kt)("inlineCode",{parentName:"p"},"workspace/didChangeConfiguration"),"\nnotification, it will assess if the client has indicated if it has a\n",(0,i.kt)("inlineCode",{parentName:"p"},"workspaceConfiguration")," capability. If it does, it will send a\n",(0,i.kt)("inlineCode",{parentName:"p"},"workspace/configuration")," request which will include a request for the workspace\nconfiguration as well as the configuration of all URIs that the language server\nis currently tracking."),(0,i.kt)("p",null,"If the client has the ",(0,i.kt)("inlineCode",{parentName:"p"},"workspaceConfiguration")," capability, the language server\nwill send a configuration request for the URI when it received the\n",(0,i.kt)("inlineCode",{parentName:"p"},"textDocument/didOpen")," notification in order to get the resources specific\nsettings."),(0,i.kt)("p",null,"If the client does not have the ",(0,i.kt)("inlineCode",{parentName:"p"},"workspaceConfiguration")," capability, the\nlanguage server will assume the workspace setting applies to all resources."),(0,i.kt)("h2",{id:"commands"},"Commands"),(0,i.kt)("p",null,"There are several commands that might be issued by the language server to the\nclient, which the client is expected to implement:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.cache")," - This is sent as a resolution code action when there is an\nun-cached module specifier that is being imported into a module. It will be\nsent with and argument that contains the resolved specifier as a string to be\ncached."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.showReferences")," - This is sent as the command on some code lenses to\nshow locations of references. The arguments contain the specifier that is the\nsubject of the command, the start position of the target and the locations of\nthe references to show."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno.test")," - This is sent as part of a test code lens to, of which the client\nis expected to run a test based on the arguments, which are the specifier the\ntest is contained in and the name of the test to filter the tests on.")),(0,i.kt)("h2",{id:"requests"},"Requests"),(0,i.kt)("p",null,"The LSP currently supports the following custom requests. A client should\nimplement these in order to have a fully functioning client that integrates well\nwith Deno:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"deno/cache")," - This command will instruct Deno to attempt to cache a module\nand all of its dependencies. If a ",(0,i.kt)("inlineCode",{parentName:"p"},"referrer")," only is passed, then all\ndependencies for the module specifier will be loaded. If there are values in\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"uris"),", then only those ",(0,i.kt)("inlineCode",{parentName:"p"},"uris")," will be cached."),(0,i.kt)("p",{parentName:"li"},"It expects parameters of:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},"interface CacheParams {\n  referrer: TextDocumentIdentifier;\n  uris: TextDocumentIdentifier[];\n}\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"deno/performance")," - Requests the return of the timing averages for the\ninternal instrumentation of Deno."),(0,i.kt)("p",{parentName:"li"},"It does not expect any parameters.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"deno/reloadImportRegistries")," - Reloads any cached responses from import\nregistries."),(0,i.kt)("p",{parentName:"li"},"It does not expect any parameters.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"deno/virtualTextDocument")," - Requests a virtual text document from the LSP,\nwhich is a read only document that can be displayed in the client. This allows\nclients to access documents in the Deno cache, like remote modules and\nTypeScript library files built into Deno. The Deno language server will encode\nall internal files under the custom schema ",(0,i.kt)("inlineCode",{parentName:"p"},"deno:"),", so clients should route\nall requests for the ",(0,i.kt)("inlineCode",{parentName:"p"},"deno:")," schema back to the ",(0,i.kt)("inlineCode",{parentName:"p"},"deno/virtualTextDocument"),"\nAPI."),(0,i.kt)("p",{parentName:"li"},"It also supports a special URL of ",(0,i.kt)("inlineCode",{parentName:"p"},"deno:/status.md")," which provides a markdown\nformatted text document that contains details about the status of the LSP for\ndisplay to a user."),(0,i.kt)("p",{parentName:"li"},"It expects parameters of:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts,",metastring:"ignore",ignore:!0},"interface VirtualTextDocumentParams {\n  textDocument: TextDocumentIdentifier;\n}\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"deno/task")," - Requests the return of available deno tasks, see\n",(0,i.kt)("a",{parentName:"p",href:"/runtime/manual/tools/task_runner"},"task_runner"),"."),(0,i.kt)("p",{parentName:"li"},"It does not expect any parameters."))),(0,i.kt)("h2",{id:"notifications"},"Notifications"),(0,i.kt)("p",null,"There is currently one custom notification that is sent from the server to the\nclient:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"deno/registryState")," - when ",(0,i.kt)("inlineCode",{parentName:"p"},"deno.suggest.imports.autoDiscover")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," and\nan origin for an import being added to a document is not explicitly set in\n",(0,i.kt)("inlineCode",{parentName:"p"},"deno.suggest.imports.hosts"),", the origin will be checked and the notification\nwill be sent to the client of the status."),(0,i.kt)("p",{parentName:"li"},"When receiving the notification, if the param ",(0,i.kt)("inlineCode",{parentName:"p"},"suggestion")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the\nclient should offer the user the choice to enable the origin and add it to the\nconfiguration for ",(0,i.kt)("inlineCode",{parentName:"p"},"deno.suggest.imports.hosts"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"suggestion")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," the\nclient should add it to the configuration of as ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," to stop the language\nserver from attempting to detect if suggestions are supported."),(0,i.kt)("p",{parentName:"li"},"The params for the notification are:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface RegistryStatusNotificationParams {\n  origin: string;\n  suggestions: boolean;\n}\n")))),(0,i.kt)("h2",{id:"language-ids"},"Language IDs"),(0,i.kt)("p",null,"The language server supports diagnostics and formatting for the following\n",(0,i.kt)("a",{parentName:"p",href:"https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentItem"},"text document language IDs"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"javascript"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"javascriptreact"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"jsx"')," ",(0,i.kt)("em",{parentName:"li"},"non standard, same as ",(0,i.kt)("inlineCode",{parentName:"em"},"javascriptreact"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"typescript"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"typescriptreact"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"tsx"')," ",(0,i.kt)("em",{parentName:"li"},"non standard, same as ",(0,i.kt)("inlineCode",{parentName:"em"},"typescriptreact")))),(0,i.kt)("p",null,"The language server supports only formatting for the following language IDs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"json"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"jsonc"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"markdown"'))))}d.isMDXComponent=!0}}]);